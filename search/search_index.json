{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u5173\u4e8e \u672c\u6587\u6863\u4e13\u7528\u4e8e\u6536\u5f55\u4e00\u4e9b\u597d\u8bfe\u4ee5\u53ca\u8d44\u6599","title":"\u5173\u4e8e"},{"location":"#_1","text":"\u672c\u6587\u6863\u4e13\u7528\u4e8e\u6536\u5f55\u4e00\u4e9b\u597d\u8bfe\u4ee5\u53ca\u8d44\u6599","title":"\u5173\u4e8e"},{"location":"awesome/","text":"awesome Research if the stuff you're including is actually awesome. Only put stuff on the list that you or another contributor can personally recommend. You should rather leave stuff out than include too much.","title":"awesome"},{"location":"awesome/#awesome","text":"Research if the stuff you're including is actually awesome. Only put stuff on the list that you or another contributor can personally recommend. You should rather leave stuff out than include too much.","title":"awesome"},{"location":"awesome/awesome-courses/","text":"Awesome CS Courses Introduction There is a lot of ~~hidden~~ treasure lying within university pages scattered across the internet. This list is an attempt to bring to light those awesome CS courses which make their high-quality material i.e. assignments, lectures, notes, readings & examinations available online for free. Table of Contents Algorithms Artificial Intelligence Computer Graphics CS Theory Introduction to CS Machine Learning Misc Programming Languages / Compilers Security Systems Legend - Lecture Videos - Lecture Notes - Assignments / Labs - Readings Courses Systems CS 61C Great Ideas in Computer Architecture (Machine Structures) UC Berkeley The subjects covered in this course include: C and assembly language programming, translation of high-level programs into machine language, computer organization, caches, performance measurement, parallelism, CPU design, warehouse-scale computing, and related topics. Lecture Videos Lecture Notes Resources Old Exams CS 107 Computer Organization & Systems Stanford University CS107 is the third course in Stanford's introductory programming sequence. The course will work from the C programming language down to the microprocessor to de-mystify the machine. With a complete understanding of how computer systems execute programs and manipulate data, you will become a more effective programmer, especially in dealing with issues of debugging, performance, portability, and robustness. Lecture Videos Assignments CS 140 Operating Systems Stanford University This class introduces the basic facilities provided in modern operating systems. The course divides into three major sections. The first part of the course discusses concurrency. The second part of the course addresses the problem of memory management. The third major part of the course concerns file systems. Lecture Notes Assignments 6.004 Computation Structures MIT Introduces architecture of digital systems, emphasizing structural principles common to a wide range of technologies. Multilevel implementation strategies; definition of new primitives (e.g., gates, instructions, procedures, processes) and their mechanization using lower-level elements. Analysis of potential concurrency; precedence constraints and performance measures; pipelined and multidimensional systems. Instruction set design issues; architectural support for contemporary software structures. 4 Engineering Design Points. 6.004 offers an introduction to the engineering of digital systems. Starting with MOS transistors, the course develops of series of building blocks logic gates, combinational and sequential circuits, finite-state machines, computers and finally complete systems. Both hardware and software mechanisms are explored through a series of design examples. Youtube Playlist Lecture Notes Labs-Assignments CS 162 Operating Systems and Systems Programming UC Berkeley The purpose of this course is to teach the design of operating systems and operating systems concepts that appear in other advanced systems. Topics we will cover include concepts of operating systems, systems programming, networked and distributed systems, and storage systems, including multiple-program systems (processes, interprocess communication, and synchronization), memory allocation (segmentation, paging), resource allocation and scheduling, file systems, basic networking (sockets, layering, APIs, reliability), transactions, security, and privacy. Operating Systems course by the Chair of EECS, UC Berkeley David Culler Lecture Videos Spring 2015 lectures Lecture Notes Spring 2015 lectures CS 168 Introduction to the Internet: Architecture and Protocols UC Berkeley This course is an introduction to the Internet architecture. We will focus on the concepts and fundamental design principles that have contributed to the Internet's scalability and robustness and survey the various protocols and algorithms used within this architecture. Topics include layering, addressing, intradomain routing, interdomain routing, reliable delivery, congestion control, and the core protocols (e.g., TCP, UDP, IP, DNS, and HTTP) and network technologies (e.g., Ethernet, wireless). Lecture Notes & Assignments Discussion Notes CS 179 GPU Programming Caltech This course will cover programming techniques for the GPU. The course will introduce NVIDIA's parallel computing language, CUDA. Beyond covering the CUDA programming model and syntax, the course will also discuss GPU architecture, high performance computing on GPUs, parallel algorithms, CUDA libraries, and applications of GPU computing. Assignments Lecture Notes CS 186 Introduction to Database Systems UC Berkeley In the project assignments in CS186, you will write a basic database management system called SimpleDB. For this project, you will focus on implementing the core modules required to access stored data on disk; in future projects, you will add support for various query processing operators, as well as transactions, locking, and concurrent queries. Lecture Videos Lecture Notes Projects CS 241 Systems Programming (Spring 2016) Univ of Illinois, Urbana-Champaign System programming refers to writing code that tasks advantage of operating system support for programmers. This course is designed to introduce you to system programming. By the end of this course, you should be proficient at writing programs that take full advantage of operating system support. To be concrete, we need to fix an operating system and we need to choose a programming language for writing programs. We chose the C language running on a Linux/UNIX operating system (which implements the POSIX standard interface between the programmer and the OS). Assignments Labs Github Page Crowd Sourced Book CS 425 Distributed Systems Univ of Illinois, Urbana-Champaign Brilliant set of lectures and reading material covering fundamental concepts in distributed systems such as Vector clocks, Consensus and Paxos. This is the 2016 version by Prof Indranil Gupta. Lectures Assignments CS 452 Real-Time Programming University of Waterloo Write a real-time OS microkernel in C, and application code to operate a model train set in response to real-time sensor information. The communication with the train set runs at 2400 baud so it takes about 61 milliseconds to ask all of the sensors for data about the train's possible location. This makes it particularly challenging because a train can move about 3 centimeters in that time. One of the most challenging and time-consuming courses at the University of Waterloo. Assignments Lecture notes CS 2043 Unix Tools & Scripting Cornell University UNIX-like systems are increasingly being used on personal computers, mobile phones, web servers, and many other systems. They represent a wonderful family of programming environments useful both to computer scientists and to people in many other fields, such as computational biology and computational linguistics, in which data is naturally represented by strings. This course provides an intensive training to develop skills in Unix command line tools and scripting that enable the accomplishment and automation of large and challenging computing tasks. The syllabus takes students from shell basics and piping, to regular-expression processing tools, to shell scripting and Python. Syllabus Lectures Assignments CS 3410 Computer System Organization and Programming Cornell University CS3410 provides an introduction to computer organization, systems programming and the hardware/software interface. Topics include instruction sets, computer arithmetic, datapath design, data formats, addressing modes, memory hierarchies including caches and virtual memory, I/O devices, bus-based I/O systems, and multicore architectures. Students learn assembly language programming and design a pipelined RISC processor. Lectures Assignments CS 4410 Operating Systems Cornell University CS 4410 covers systems programming and introductory operating system design and implementation. We will cover the basics of operating systems, namely structure, concurrency, scheduling, synchronization, memory management, filesystems, security and networking. The course is open to any undergraduate who has mastered the material in CS3410/ECE3140. Syllabus Lectures CS 4414 Operating Systems University of Virginia A course (that) covers topics including: Analysis process communication and synchronization; resource management; virtual memory management algorithms; file systems; and networking and distributed systems. The primary goal of this course is to improve your ability to build scalable, robust and secure computing systems. It focuses on doing that by understanding what underlies the core abstractions of modern computer systems. Syllabus Lectures CS 5412 Cloud Computing Cornell University Taught by one of the stalwarts of this field, Prof Ken Birman, this course has a fantastic set of slides that one can go through. The Prof's book is also a gem and recommended as a must read in Google's tutorial on Distributed System Design Slides CSCE 3613 Operating Systems University of Arkansas (Fayetteville) - An introduction to operating systems including topics in system structures, process management, storage management, files, distributed systems, and case studies. Syllabus Assignments Lecture Notes Readings CSCI-UA.0202: Operating Systems (Undergrad) Operating Systems NYU NYU's operating system course. It's a fundamental course focusing basic ideas of operating systems, including memory management, process shceduling, file system, ect. It also includes some recommended reading materials. What's more, there are a series of hands-on lab materials, helping you easily understand OS. Assignments Lectures Old Exams CSCI 360 Computer Architecture 3 CUNY Hunter College A course that covers cache design, buses, memory hierarchies, processor-peripheral interfaces, and multiprocessors, including GPUs. CSCI 493.66 UNIX System Programming (formerly UNIX Tools) CUNY Hunter College A course that is mostly about writing programs against the UNIX API, covering all of the basic parts of the kernel interface and libraries, including files, processes, terminal control, signals, and threading. CSCI 493.75 Parallel Computing CUNY Hunter College The course is an introduction to parallel algorithms and parallel programming in C and C++, using the Message Passing Interface (MPI) and the OpenMP application programming interface. It also includes a brief introduction to parallel architectures and interconnection networks. It is both theoretical and practical, including material on design methodology, performance analysis, and mathematical concepts, as well as details on programming using MPI and OpenMP. Hack the Kernel Introduction to Operating Systems SUNY University at Buffalo, NY This course is an introduction to operating system design and implementation. We study operating systems because they are examples of mature and elegant solutions to a difficult design problem: how to safely and efficiently share system resources and provide abstractions useful to applications. For the processor, memory, and disks, we discuss how the operating system allocates each resource and explore the design and implementation of related abstractions. We also establish techniques for testing and improving system performance and introduce the idea of hardware virtualization. Programming assignments provide hands-on experience with implementing core operating system components in a realistic development environment. Course by Dr.Geoffrey Challen Syllabus Slides Video lectures Assignments Old Exams ECE 459 Programming for Performance University of Waterloo Learn techniques for profiling, rearchitecting, and implementing software systems that can handle industrial-sized inputs, and to design and build critical software infrastructure. Learn performance optimization through parallelization, multithreading, async I/O, vectorization and GPU programming, and distributed computing. Lecture slides ECGR4101/5101 Embedded Systems using the Renesas RX63N Processor University of North Carolina at Charlotte Introduction to designing microcontroller-based embedded computer systems using assembly and C programs. Examination of Real-time Operating Systems and their impact on performance. Computer engineering applications will be emphasized. The goal of this course is to solidify and build upon a student\u2019s knowledge of computer organization by presenting hands-on experience with microcontrollers. Students will also examine a few sensors that are used in commercial and medical products and learn how to interface them in a microcontroller system. Lecture Videos Lecture Notes PODC Principles of Distributed Computing ETH-Zurich Explore essential algorithmic ideas and lower bound techniques, basically the \"pearls\" of distributed computing in an easy-to-read set of lecture notes, combined with complete exercises and solutions. Book Assignments and Solutions SPAC Parallelism and Concurrency Univ of Washington Technically not a course nevertheless an awesome collection of materials used by Prof Dan Grossman to teach parallelism and concurrency concepts to sophomores at UWash 6.824 Distributed Systems MIT MIT's graduate-level DS course with a focus on fault tolerance, replication, and consistency, all taught via awesome lab assignments in Golang! Assignments - Just do git clone git://g.csail.mit.edu/6.824-golabs-2014 6.824 Readings 6.828 Operating Systems MIT MIT's operating systems course focusing on the fundamentals of OS design including booting, memory management, environments, file systems, multitasking, and more. In a series of lab assignments, you will build JOS, an OS exokernel written in C. Assignments Lectures Videos Note: These are student recorded cam videos of the 2011 course. The videos explain a lot of concepts required for the labs and assignments. CSEP 552 Distributed Systems University of Washington CSEP552 is a graduate course on distributed systems. Distributed systems have become central to many aspects of how computers are used, from web applications to e-commerce to content distribution. This course will cover abstractions and implementation techniques for the construction of distributed systems, including client server computing, the web, cloud computing, peer-to-peer systems, and distributed storage systems. Topics will include remote procedure call, maintaining consistency of distributed state, fault tolerance, high availability, and other topics. As we believe the best way to learn the material is to build it, there will be a series of hands-on programming projects. Lectures of a previous session are available to watch. 15-213 Introduction to Computer Systems (ICS) Carnegie-Mellon University The ICS course provides a programmer's view of how computer systems execute programs, store information, and communicate. It enables students to become more effective programmers, especially in dealing with issues of performance, portability and robustness. It also serves as a foundation for courses on compilers, networks, operating systems, and computer architecture, where a deeper understanding of systems-level issues is required. Topics covered include: machine-level code and its generation by optimizing compilers, performance evaluation and optimization, computer arithmetic, memory organization and management, networking technology and protocols, and supporting concurrent computation. This is the must-have course for everyone in CMU who wants to learn some computer science no matter what major are you in. Because it's CMU (The course number is as same as the zip code of CMU)! Lecture Notes Videos Assignments 15-319/619 Cloud Computing (ICS) Carnegie-Mellon University This project-based on-line course focuses on skill building across various aspects of cloud computing. We cover conceptual topics and provide hands-on experience through projects utilizing public cloud infrastructures (Amazon Web Services (AWS), Microsoft Azure and Google Cloud Platform (GCP)). The adoption of cloud computing services continues to grow across a variety of organizations and in many domains. Simply, cloud computing is the delivery of computing as a service over a network, whereby distributed resources and services are rented, rather than owned, by an end user as a utility. For the projects, students will work with Amazon Web Services, Microsoft Azure and Google Cloud Platform, use them to rent and provision compute resources and then program and deploy applications that run on these resources. Students will develop and evaluate virtual machine (VM) and container scaling, elasticity and load balancing solutions. In addition, students will work with cloud storage systems and learn to develop different applications using batch, iterative and stream processing frameworks. 15-619 students will have to complete an extra project which entails designing and implementing a complete web-service solution for querying big data. For the extra project, the student teams are evaluated based on the cost and performance of their web service. Lecture Notes Videos 15-418 Parallel Computer Architecture and Programming Carnegie-Mellon University The goal of this course is to provide a deep understanding of the fundamental principles and engineering trade-offs involved in designing modern parallel computing systems as well as to teach parallel programming techniques necessary to effectively utilize these machines. Because writing good parallel programs requires an understanding of key machine performance characteristics, this course will cover both parallel hardware and software design. Assignments Lecture Notes Lecture Videos Readings 15-440 Distributed Systems Carnegie-Mellon University Introduction to distributed systems with a focus on teaching concepts via projects implemented in the Go programming language. Assignments 15-721 Database Systems Carnegie-Mellon University This course is a comprehensive study of the internals of modern database management systems. It will cover the core concepts and fundamentals of the components that are used in both high-performance transaction processing systems (OLTP) and large-scale analytical systems (OLAP). The class will stress both efficiency and correctness of the implementation of these ideas. All class projects will be in the context of a real in-memory, multi-core database system. The course is appropriate for graduate students in software systems and for advanced undergraduates with strong systems programming skills. Assignments Lecture Videos Readings 15-445/645 Database Systems Carnegie-Mellon University This course covers fundamental topics of DBMS, compared to CMU 15-721. Assignments Lecture Videos Readings 15-749 Engineering Distributed Systems Carnegie-Mellon University A project focused course on Distributed Systems with an awesome list of readings Readings 18-447 Introduction to Computer Architecture CMU Very comprehensive material on Computer Architecture - definitely more than just \"introduction\". Online material is very user-friendly, even the recitation videos available online. This is the Spring'15 version by Prof. Onur Mutlu Lectures and Recitation Homeworks 7 HWs with answer set as well Readings Programming Languages / Compilers CS 75 Principles of Compiler Design Swathmore College Modelled after the influential paper on incremental approach to compiler design , this course teaches how to build a compiler in OCaml Course on Github Notes CS 91 Introduction to Programming Languages Swathmore College Uses the Pyret programming language & PAPL book to understand the fundamentals of programming languages. Labs CIS 194 Introduction to Haskell Penn Engineering Explore the joys of functional programming, using Haskell as a vehicle. The aim of the course will be to allow you to use Haskell to easily and conveniently write practical programs. Previous semester also available, with more exercises CIS 198 Rust Programming UPenn This course covers what makes Rust so unique and applies it to practical systems programming problems. Topics covered include traits and generics; memory safety (move semantics, borrowing, and lifetimes); Rust\u2019s rich macro system; closures; and concurrency. Assignments Clojure Functional Programming with Clojure University of Helsinki The course is an introduction to functional programming with a dynamically typed language Clojure. We start with an introduction to Clojure; its syntax and development environment. Clojure has a good selection of data structures and we cover most of them. We also go through the basics of recursion and higher-order functions. The course material is in English. Github Page CMSC 430 Introduction to Compilers Univ of Maryland The goal of CMSC 430 is to arm students with the ability to design, implement, and extend a programming language. Throughout the course, students will design and implement several related languages, and will explore parsing, syntax querying, dataflow analysis, compilation to bytecode, type systems, and language interoperation. Lecture Notes Assignments COS 326 Functional Programming Princeton University Covers functional programming concepts like closures, tail-call recursion & parallelism using the OCaml programming language Lectures Assignments CS 143 Compiler construction Stanford University CS143 is a Stanford's course in the practical and theoretical aspects of compiler construction. Home Syllabus Lectures Assignments CS143 - 2011 CS 164 Hack your language! UC Berkeley Introduction to programming languages by designing and implementing domain-specific languages. Lecture Videos Code for Assignments CS 173 Programming Languages Brown University Course by Prof. Krishnamurthi (author of HtDP ) and numerous other awesome books on programming languages. Uses a custom designed Pyret programming language to teach the concepts. There was an online class hosted in 2012, which includes all lecture videos for you to enjoy. Videos Assignments CS 223 Purely Functional Data Structures In Elm University of Chicago This course teaches functional reactive programming and purely functional data structures based on Chris Okazaki's book and using the Elm programming language. Lectures Assignments CS 240h Functional Systems in Haskell Stanford University Building software systems in Haskell Lecture Slides 3 Assignments: Lab1 , Lab2 , Lab3 CS 421 Programming Languages and Compilers Univ of Illinois, Urbana-Champaign Course that uses OCaml to teach functional programming and programming language design. Lectures Videos Assignments Exams CS 3110 Data Structures and Functional Programming Cornell University Another course that uses OCaml to teach alternative programming paradigms, especially functional and concurrent programming. Lecture Slides Assignments CS 4120 Introduction to Compilers Cornell University An introduction to the specification and implementation of modern compilers. Topics covered include lexical scanning, parsing, type checking, code generation and translation, an introduction to optimization, and compile-time and run-time support for modern programming languages. As part of the course, students build a working compiler for an object-oriented language. Syllabus Lectures Assignments CS 4400 Programming Languages Northeastern University This is a course on the study, design, and implementation of programming languages. The course works at two simultaneous levels: first, we will use a programming language that can demonstrate a wide variety of programming paradigms. Second, using this language, we will learn about the mechanics behind programming languages by implementing our own language(s). The two level approach usually means that we will often see how to use a certain feature, and continue by implementing it. Syllabus Lecture Notes/Resources CS 4610 Programming Languages and Compilers University of Virginia Course that uses OCaml to teach functional programming and programming language design. Each assignment is a part of an interpreter and compiler for an object-oriented language similar to Java, and you are required to use a different language for each assignment (i.e., choose 4 from Python, JS, OCaml, Haskell, Ruby). Lecture Notes Assignments CS 5114 Network Programming Languages Cornell University This course provides an introduction to the languages used to program computer networks. It will examine recent proposals based on logic, functional, and distributed languages, as well as tools for establishing correctness using automatic solvers, model checkers, and proof assistants. Syllabus Lectures CS 5142 Scripting Languages Cornell University Perl, PHP, JavaScript, VisualBasic -- they are often-requested skills for employment, but most of us do not have the time to find out what they are all about. In this course, you learn how to use scripting languages for rapid prototyping, web programming, data processing, and application extension. Besides covering traditional programming languages concepts as they apply to scripting (e.g., dynamic typing and scoping), this course looks at new concepts rarely found in traditional languages (e.g., string interpolation, hashes, and polylingual code). Through a series of small projects, you use different languages to achieve programming tasks that highlight the strengths and weaknesses of scripting. As a side effect, you practice teaching yourself new languages. Syllabus Lectures Assignments CS 5470 Compilers University of Utah If you're a fan of Prof Matt's writing on his fantastic blog you ought to give this a shot. The course covers the design and implementation of compilers, and it explores related topics such as interpreters, virtual machines and runtime systems. Aside from the Prof's witty take on cheating the page has tons of interesting links on programming languages, parsing and compilers. Lecture Notes Projects CS 6118 Types and Semantics Cornell University Types and Semantics is about designing and understand programming languages, whether they be domain specific or general purpose. The goal of this class is to provide a variety of tools for designing custom (programming) languages for whatever task is at hand. Part of that will be a variety of insights on how languages work along with experiences from working with academics and industry on creating new languages such as Ceylon and Kotlin. The class focuses on types and semantics and the interplay between them. This means category theory and constructive type theory (e.g. Coq and richer variations) are ancillary topics of the class. The class also covers unconventional semantic domains such as classical linear type theory in order to both break students from conventional thinking and to provide powerful targets capable of formalizing thinks like networking protocols, resource-sensitive computation, and concurrency constructs. The class project is to design and formalize a (programming) language for a purpose of the student's choosing, and assignments are designed to ensure students have had a chance to practice applying the techniques learned in class before culminating these skills in the class project. Syllabus Lectures CSC 253 CPython internals: A ten-hour codewalk through the Python interpreter source code University of Rochester Nine lectures walking through the internals of CPython, the canonical Python interpreter implemented in C. They were from the Dynamic Languages and Software Development course taught in Fall 2014 at the University of Rochester. CSE 341 Programming Languages University of Washington Covers non-imperative paradigms and languages such as Ruby, Racket, and ML and the fundamentals of programming languages. Lectures and Videos Assignments and Tests CSE P 501 Compiler Construction University of Washington Teaches understanding of how a modern compiler is structured and the major algorithms that are used to translate code from high-level to machine language. The best way to do this is to actually build a working compiler, so there will be a significant project to implement one that translates programs written in a core subset of Java into executable x86 assembly language. The compilers themselves will use scanner and parser generator tools and the default implementation language is Java. Lectures Assignments, Tests, and Solutions DMFP Discrete Mathematics and Functional Programming Wheaton College A course that teaches discrete maths concepts with functional programming Lecture Videos Assignments PCPP Practical Concurrent and Parallel Programming IT University of Copenhagen In this MSc course you learn how to write correct and efficient concurrent and parallel software, primarily using Java, on standard shared-memory multicore hardware. The course covers basic mechanisms such as threads, locks and shared memory as well as more advanced mechanisms such as parallel streams for bulk data, transactional memory, message passing, and lock-free data structures with compare-and-swap. It covers concepts such as atomicity, safety, liveness and deadlock. It covers how to measure and understand performance and scalability of parallel programs. It covers tools and methods to find bugs in concurrent programs. 6.945 Adventures in Advanced Symbolic Programming MIT Taught by Gerald Sussman of SICP fame, this class deals with concepts and techniques for the design an implementation of large software systems that can be adapted to uses not anticipated by the designer. Applications include compilers, computer-algebra systems, deductive systems, and some artificial intelligence applications. Assignments : Extensive programming assignments, using MIT/GNU Scheme. Students should have significant programming experience in Scheme, Common Lisp, Haskell, CAML or other \"functional\" language. Readings CS 696 Functional Design and Programming San Diego State University Covers functional programming basis using Clojure. Topics include testing, functional programming, immutable collections and concurrency. Also includes assignments covering Clojurescript, Reagent etc. L28 Advanced Functional Programming University of Cambridge This module aims to teach students how to use the features of modern typed functional programming languages (e.g. OCaml, Haskell) to design and implement libraries and DSLs. It aims to demonstrate how such techniques can improve both correctness and efficiency. Students wishing to take the module should have some experience of a typed functional programming language and an understanding of type inference. This particular session was taught by a prominent OCaml programmer, open Source contributor & author of real world OCaml - Dr Anil Madhavapeddy. Algorithms CS 61B Data Structures UC Berkeley In this course, you will study advanced programming techniques including data structures, encapsulation, abstract data types, interfaces, and algorithms for sorting and searching, and you will get a taste of \u201csoftware engineering\u201d\u2014the design and implementation of large programs. Full Lecture Materials Lecture of Spring 2016. This website contains full matrials including video links, labs, homeworks, projects. Very good for self-learner. Also a good start for Java. And it includes some other useful resources for Java Documentation, Data Structure Resources, Git/GitHub and Java Development Resources. Resources Labs The link to labs and projects is included in the website. Lecture Videos CS 97SI Introduction to Competitive Programming Stanford University Fantastic repository of theory and practice problems across various topics for students who are interested to participate in ACM-ICPC. Lectures and Assignments CS 224 Advanced Algorithms Harvard University CS 224 is an advanced course in algorithm design, and topics we will cover include the word RAM model, data structures, amortization, online algorithms, linear programming, semidefinite programming, approximation algorithms, hashing, randomized algorithms, fast exponential time algorithms, graph algorithms, and computational geometry. Lecture Videos ( Youtube ) Assignments CS 261 A Second Course in Algorithms Stanford University Algorithms for network optimization: max-flow, min-cost flow, matching, assignment, and min-cut problems. Introduction to linear programming. Use of LP duality for design and analysis of algorithms. Approximation algorithms for NP-complete problems such as Steiner Trees, Traveling Salesman, and scheduling problems. Randomized algorithms. Introduction to online algorithms. Lecture Notes, Videos & Assignments ( Youtube ) CS 473/573 Fundamental Algorithms Univ of Illinois, Urbana-Champaign Algorithms class covering recursion, randomization, amortization, graph algorithms, network flows and hardness. The lecture notes by Prof. Erikson are comprehensive enough to be a book by themselves. Highly recommended! Lecture Notes Labs and Exams CS 2150 Program & Data Representation University of Virginia This data structures course introduces C++, linked-lists, stacks, queues, trees, numerical representation, hash tables, priority queues, heaps, huffman coding, graphs, and x86 assembly. Lectures Assignments CS 4820 Introduction to Analysis of Algorithms Cornell University This course develops techniques used in the design and analysis of algorithms, with an emphasis on problems arising in computing applications. Example applications are drawn from systems and networks, artificial intelligence, computer vision, data mining, and computational biology. This course covers four major algorithm design techniques (greedy algorithms, divide and conquer, dynamic programming, and network flow), computability theory focusing on undecidability, computational complexity focusing on NP-completeness, and algorithmic techniques for intractable problems, including identification of structured special cases, approximation algorithms, and local search heuristics. Lectures Syllabus CSCI 104 Data Structures and Object Oriented Design University of Southern California (USC) Lectures Labs Assignments Additional Resources CSCI 135 Software Design and Analysis I CUNY Hunter College It is currently an intensive introduction to program development and problem solving. Its emphasis is on the process of designing, implementing, and evaluating small-scale programs. It is not supposed to be a C++ programming course, although much of the course is spent on the details of C++. C++ is an extremely large and complex programming language with many features that interact in unexpected ways. One does not need to know even half of the language to use it well. Lectures and Assignments CSCI 235 Software Design and Analysis II CUNY Hunter College Introduces algorithms for a few common problems such as sorting. Practically speaking, it furthers the students' programming skills with topics such as recursion, pointers, and exception handling, and provides a chance to improve software engineering skills and to give the students practical experience for more productive programming. Lectures and Assignments CSCI 335 Software Design and Analysis III CUNY Hunter College This includes the introduction of hashes, heaps, various forms of trees, and graphs. It also revisits recursion and the sorting problem from a higher perspective than was presented in the prequels. On top of this, it is intended to introduce methods of algorithmic analysis. Lectures and Assignments CSE 331 Software Design and Implementation University of Washington Explores concepts and techniques for design and construction of reliable and maintainable software systems in modern high-level languages; program structure and design; program-correctness approaches, including testing. Lectures, Assignments, and Exams CSE 373 Analysis of Algorithms Stony Brook University Prof Steven Skiena's no stranger to any student when it comes to algorithms. His seminal book has been touted by many to be best for getting that job in Google . In addition, he's also well-known for tutoring students in competitive programming competitions . If you're looking to brush up your knowledge on Algorithms, you can't go wrong with this course. Lecture Videos ECS 122A Algorithm Design and Analysis UC Davis Taught by Dan Gusfield in 2010, this course is an undergraduate introduction to algorithm design and analysis. It features traditional topics, such as Big Oh notation, as well as an importance on implementing specific algorithms. Also featured are sorting (in linear time), graph algorithms, depth-first search, string matching, dynamic programming, NP-completeness, approximation, and randomization. Syllabus Lecture Videos Assignments ECS 222A Graduate Level Algorithm Design and Analysis UC Davis This is the graduate level complement to the ECS 122A undergraduate algorithms course by Dan Gusfield in 2011. It assumes an undergrad course has already been taken in algorithms, and, while going over some undergraduate algorithms topics, focuses more on increasingly complex and advanced algorithms. Lecture Videos Syllabus Assignments 6.INT Hacking a Google Interview MIT This course taught in the MIT Independent Activities Period in 2009 goes over common solution to common interview questions for software engineer interviews at highly selective companies like Apple, Google, and Facebook. They cover time complexity, hash tables, binary search trees, and other common algorithm topics you should have already covered in a different course, but goes more in depth on things you wouldn't otherwise learn in class- like bitwise logic and problem solving tricks. Handouts Topics Covered 6.006 Introduction to Algorithms MIT This course provides an introduction to mathematical modeling of computational problems. It covers the common algorithms, algorithmic paradigms, and data structures used to solve these problems. The course emphasizes the relationship between algorithms and programming, and introduces basic performance measures and analysis techniques for these problems. Lecture Videos Assignments Readings Resources Old Exams 6.046J/18.410J Design and Analysis of Algorithms MIT This is an intermediate algorithms course with an emphasis on teaching techniques for the design and analysis of efficient algorithms, emphasizing methods of application. Topics include divide-and-conquer, randomization, dynamic programming, greedy algorithms, incremental improvement, complexity, and cryptography. This course assumes that students know how to analyze simple algorithms and data structures from having taken 6.006 . It introduces students to the design of computer algorithms, as well as analysis of sophisticated algorithms. Lecture Videos Lecture Notes Assignments Resources Old Exams 6.851 Advanced Data Structures MIT This is an advanced DS course, you must be done with the Advanced Algorithms course before attempting this one. Lectures Contains videos from sp2012 version, but there isn't much difference. Assignments contains the calendar as well. 6.854/18.415J Advanced Algorithms MIT Advanced course in algorithms by Dr. David Karger covering topics such as amortization, randomization, fingerprinting, word-level parallelism, bit scaling, dynamic programming, network flow, linear programming, fixed-parameter algorithms, and approximation algorithms. Register on NB to access the problem set and lectures . 6.854J/18.415J Advanced Algorithms MIT This course is a first-year graduate course in algorithms. Emphasis is placed on fundamental algorithms and advanced methods of algorithmic design, analysis, and implementation. Techniques to be covered include amortization, randomization, fingerprinting, word-level parallelism, bit scaling, dynamic programming, network flow, linear programming, fixed-parameter algorithms, and approximation algorithms. Domains include string algorithms, network optimization, parallel algorithms, computational geometry, online algorithms, external memory, cache, and streaming algorithms, and data structures. The need for efficient algorithms arises in nearly every area of computer science. But the type of problem to be solved, the notion of what algorithms are \"efficient,'' and even the model of computation can vary widely from area to area. In this second class in algorithms, we will survey many of the techniques that apply broadly in the design of efficient algorithms, and study their application in a wide range of application domains and computational models. The goal is for the class to be broad rather than deep. Our plan is to touch upon the following areas. This is a tentative list of topics that might be covered in the class; we will select material adaptively based on the background, interests, and rate of progress of the students. Lecture Videos - Spring 2016 Lecture Notes Assignments Readings Resources 15-451/651 Algorithms Carnegie Mellon University The required algorithms class that go in depth into all basic algorithms and the proofs behind them. This is one of the heavier algorithms curriculums on this page. Taught by Avrim Blum and Manuel Blum who has a Turing Award due to his contributions to algorithms. Course link includes a very comprehensive set of reference notes by Avrim Blum. 16s-4102 Algorithms University of Virginia Lecture Videos & Homeworks ( Youtube ) CS Theory CIS 500 Software Foundations University of Pennsylvania An introduction to formal verification of software using the Coq proof assistant. Topics include basic concepts of logic, computer-assisted theorem proving, functional programming, operational semantics, Hoare logic, and static type systems. Lectures and Assignments Textbook CS 103 Mathematical Foundations of Computing Stanford University CS103 is a first course in discrete math, computability theory, and complexity theory. In this course, we'll probe the limits of computer power, explore why some problems are harder to solve than others, and see how to reason with mathematical certainty. Links to all lectures notes and assignments are directly on the course page CS 173 Discrete Structures Univ of Illinois Urbana-Champaign This course is an introduction to the theoretical side of computer science. In it, you will learn how to construct proofs, read and write literate formal mathematics, get a quick introduction to key theory topics and become familiar with a range of standard mathematics concepts commonly used in computer science. Textbook Written by the professor. Includes Instructor's Guide. Assignments Exams CS 276 Foundations of Cryptography UC Berkeley This course discusses the complexity-theory foundations of modern cryptography, and looks at recent results in the field such as Fully Homomorphic Encryption, Indistinguishability Obfuscation, MPC and so on. CS 278 Complexity Theory UC Berkeley A graduate level course on complexity theory that introduces P vs NP, the power of randomness, average-case complexity, hardness of approximation, and so on. CS 374 Algorithms & Models of Computation (Fall 2014) University of Illinois Urbana-Champaign CS 498 section 374 (unofficially \"CS 374\") covers fundamental tools and techniques from theoretical computer science, including design and analysis of algorithms, formal languages and automata, computability, and complexity. Specific topics include regular and context-free languages, finite-state automata, recursive algorithms (including divide and conquer, backtracking, dynamic programming, and greedy algorithms), fundamental graph algorithms (including depth- and breadth-first search, topological sorting, minimum spanning trees, and shortest paths), undecidability, and NP-completeness. The course also has a strong focus on clear technical communication. Assignments/Exams Lecture Notes/Labs Lecture videos CS 3110 Data Structures and Functional Programming Cornell University CS 3110 (formerly CS 312) is the third programming course in the Computer Science curriculum, following CS 1110/1112 and CS 2110. The goal of the course is to help students become excellent programmers and software designers who can design and implement software that is elegant, efficient, and correct, and whose code can be maintained and reused. Syllabus Lectures Assignments CS 3220 Introduction to Scientific Computing Cornell University In this one-semester survey course, we introduce numerical methods for solving linear and nonlinear equations, interpolating data, computing integrals, and solving differential equations, and we describe how to use these tools wisely (we hope!) when solving scientific problems. Syllabus Lectures Assignments CS 4300 Information Retrieval Cornell University Studies the methods used to search for and discover information in large-scale systems. The emphasis is on information retrieval applied to textual materials, but there is some discussion of other formats.The course includes techniques for searching, browsing, and filtering information and the use of classification systems and thesauruses. The techniques are illustrated with examples from web searching and digital libraries. Syllabus Lectures Assignments CS 4810 Introduction to Theory of Computing Cornell University This undergraduate course provides a broad introduction to the mathematical foundations of computer science. We will examine basic computational models, especially Turing machines. The goal is to understand what problems can or cannot be solved in these models. Syllabus Lectures Assignments CS 6810 Theory of Computing Cornell University This graduate course gives a broad introduction to complexity theory, including classical results and recent developments. Complexity theory aims to understand the power of efficient computation (when computational resources like time and space are limited). Many compelling conceptual questions arise in this context. Most of these questions are (surprisingly?) difficult and far from being resolved. Nevertheless, a lot of progress has been made toward understanding them (and also why they are difficult). We will learn about these advances in this course. A theme will be combinatorial constructions with random-like properties, e.g., expander graphs and error-correcting codes. Some examples: Is finding a solution inherently more difficult than verifying it? Do more computational resources mean more computing power? Is it easier to find approximate solutions than exact ones? Are randomized algorithms more powerful than deterministic ones? Is it easier to solve problems in the average case than in the worst case? Are quantum computers more powerful than classical ones? Syllabus Lectures Assignments CSCE 3193 Programming Paradigms University of Arkansas (Fayetteville) Programming in different paradigms with emphasis on object oriented programming, network programming and functional programming. Survey of programming languages, event driven programming, concurrency, software validation. Syllabus Notes Assignments Practice Exams 6.045 Great Ideas in Theoretical Computer Science MIT This course provides a challenging introduction to some of the central ideas of theoretical computer science. Beginning in antiquity, the course will progress through finite automata, circuits and decision trees, Turing machines and computability, efficient algorithms and reducibility, the P versus NP problem, NP-completeness, the power of randomness, cryptography and one-way functions, computational learning theory, and quantum computing. It examines the classes of problems that can and cannot be solved by various kinds of machines. It tries to explain the key differences between computational models that affect their power. Syllabus Lecture Notes Lecture Videos Introduction to CS CS 10 The Beauty and Joy of Computing UC Berkeley CS10 is UCB's introductory computer science class, taught using the beginners' drag-and-drop language. Students learn about history, social implications, great principles, and future of computing. They also learn the joy of programming a computer using a friendly, graphical language, and will complete a substantial team programming project related to their interests. Snap ! (based on Scratch by MIT). Curriculum CS 50 Introduction to Computer Science Harvard University CS50x is Harvard College's introduction to the intellectual enterprises of computer science and the art of programming for majors and non-majors alike, with or without prior programming experience. An entry-level course taught by David J. Malan. Lectures Problem Sets The course can also be taken from edX . The course's OpenCourseware resides here CS 61A Structure and Interpretation of Computer Programs [Python] UC Berkeley In CS 61A, we are interested in teaching you about programming, not about how to use one particular programming language. We consider a series of techniques for controlling program complexity, such as functional programming, data abstraction, and object-oriented programming. Mastery of a particular programming language is a very useful side effect of studying these general techniques. However, our hope is that once you have learned the essence of programming, you will find that picking up a new programming language is but a few days' work. Lecture Resources by Type Lecture Resources by Topic Additional Resources Practice Problems Extra Lectures CS 61AS Structure & Interpretation of Computer Programs [Racket] UC Berkeley A self-paced version of the CS61 Course but in Racket / Scheme. 61AS is a great introductory course that will ease you into all the amazing concepts that future CS courses will cover, so remember to keep an open mind, have fun, and always respect the data abstraction Lecture Videos Assignments and Notes CS 101 Computer Science 101 Stanford University CS101 teaches the essential ideas of Computer Science for a zero-prior-experience audience. Participants play and experiment with short bits of \"computer code\" to bring to life to the power and limitations of computers. Lectures videos will available for free after registration. CS 106A Programming Methodology Stanford University This course is the largest of the introductory programming courses and is one of the largest courses at Stanford. Topics focus on the introduction to the engineering of computer applications emphasizing modern software engineering principles: object-oriented design, decomposition, encapsulation, abstraction, and testing. Programming Methodology teaches the widely-used Java programming language along with good software engineering principles. Lecture Videos Assignments All materials in a zip file CS 106B Programming Abstractions Stanford University This course is the natural successor to Programming Methodology and covers such advanced programming topics as recursion, algorithmic analysis, and data abstraction using the C++ programming language, which is similar to both C and Java. Lectures Assignments All materials in a zip file CS 107 Programming Paradigms Stanford University Topics: Advanced memory management features of C and C++; the differences between imperative and object-oriented paradigms. The functional paradigm (using LISP) and concurrent programming (using C and C++) Lectures Assignments CS 109 Programming Practice Using Scala KAIST This course introduces basic concepts of programming and computer science, such as dynamic and static typing, dynamic memory allocation, objects and methods, binary representation of numbers, using an editor and compiler from the command line, running programs with arguments from the command line, using libraries, and the use of basic data structures such as arrays, lists, sets, and maps. We will use Scala for this course. [Lectures] (http://otfried.org/courses/cs109/index.html) [Assignments] (http://otfried.org/courses/cs109/index.html) CS 1109 Fundamental Programming Concepts Cornell University This course provides an introduction to programming and problem solving using a high-level programming language. It is designed to increase your knowledge level to comfortably continue to courses CS111x. Our focus will be on generic programming concepts: variables, expressions, control structures, loops, arrays, functions, pseudocode and algorithms. You will learn how to analyze problems and convert your ideas into solutions interpretable by computers. We will use MATLAB; because it provides a productive environment, and it is widely used by all engineering communities. Syllabus Lectures Assignments CS 1110 Introduction to Computing Using Python Cornell University Programming and problem solving using Python. Emphasizes principles of software development, style, and testing. Topics include procedures and functions, iteration, recursion, arrays and vectors, strings, an operational model of procedure and function calls, algorithms, exceptions, object-oriented programming, and GUIs (graphical user interfaces). Weekly labs provide guided practice on the computer, with staff present to help. Assignments use graphics and GUIs to help develop fluency and understanding. Syllabus Lectures Assignments CS 1112 Introduction to Computing Using Matlab Cornell University Programming and problem solving using MATLAB. Emphasizes the systematic development of algorithms and programs. Topics include iteration, functions, arrays and vectors, strings, recursion, algorithms, object-oriented programming, and MATLAB graphics. Assignments are designed to build an appreciation for complexity, dimension, fuzzy data, inexact arithmetic, randomness, simulation, and the role of approximation. NO programming experience is necessary; some knowledge of Calculus is required. Syllabus Lectures Assignments Projects CS 1115 Introduction to Computational Science and Engineering Using Matlab Graphical User Interfaces Cornell University Programming and problem solving using MATLAB. Emphasizes the systematic development of algorithms and programs. Topics include iteration, functions, arrays and vectors, strings, recursion, algorithms, object-oriented programming, and MATLAB graphics. Assignments are designed to build an appreciation for complexity, dimension, fuzzy data, inexact arithmetic, randomness, simulation, and the role of approximation. NO programming experience is necessary; some knowledge of Calculus is required. Syllabus Lectures Projects CS 1130 Transition to OO Programming Cornell University Introduction to object-oriented concepts using Java. Assumes programming knowledge in a language like MATLAB, C, C++, or Fortran. Students who have learned Java but were not exposed heavily to OO programming are welcome. Syllabus Lectures Assignments CS 1133 Transition to Python Cornell University Introduction to the Python programming language. Covers the basic programming constructs of Python, including assignment, conditionals, iteration, functions, object-oriented design, arrays, and vectorized computation. Assumes programming knowledge in a language like Java, Matlab, C, C++, or Fortran. Syllabus Lectures Assignments CS 1410-2 and CS2420-20 Computer Science I and II for Hackers University of Utah An intro course in the spirit of SICP designed by Professor Matthew Flatt (one of the lead designers of Racket and author of HtDP). Mostly Racket and C, and a bit of Java, with explanations on how high level functional programming concepts relate to the design of OOP programs. Do this one before SICP if SICP is a bit too much... Lectures and Assignments 1 Lectures and Assignments 2 Textbook Racket Language CS 2110 Object-Oriented Programming and Data Structures Cornell University CS 2110 is an intermediate-level programming course and an introduction to computer science. Topics include program design and development, debugging and testing, object-oriented programming, proofs of correctness, complexity analysis, recursion, commonly used data structures, graph algorithms, and abstract data types. Java is the principal programming language. The course syllabus can easily be extracted by looking at the link to lectures . Syllabus Lectures Assignments CS 4302 Web Information Systems Cornell University This course will introduce you to technologies for building data-centric information systems on the World Wide Web, show the practical applications of such systems, and discuss their design and their social and policy context by examining cross-cutting issues such as citizen science, data journalism and open government. Course work involves lectures and readings as well as weekly homework assignments, and a semester-long project in which the students demonstrate their expertise in building data-centric Web information systems. Syllabus Lectures Assignments CSCE 2004 Programming Foundations I University of Arkansas (Fayetteville) Introductory course for students majoring in computer science or computer engineering. Software development process: problem specification, program design, implementation, testing and documentation. Programming topics: data representation, conditional and iterative statements, functions, arrays, strings, file I/O, and classes. Using C++ in a UNIX environment. Syllabus Notes Assignments Practice Exams CSCI E-1 Understanding Computers and the Internet Harvard University Extension College This course is all about understanding: understanding what's going on inside your computer when you flip on the switch, why tech support has you constantly rebooting your computer, how everything you do on the Internet can be watched by others, and how your computer can become infected with a worm just by being turned on. Designed for students who use computers and the Internet every day but don't fully understand how it all works, this course fills in the gaps. Through lectures on hardware, software, the Internet, multimedia, security, privacy, website development, programming, and more, this course \"takes the hood off\" of computers and the Internet so that students understand how it all works and why. Through discussions of current events, students are exposed also to the latest technologies. Lecture Videos Syllabus Notes / Recaps Assignments CS-for-all CS for All Harvey Mudd College This book (and course) takes a unique approach to \u201cIntro CS.\u201d In a nutshell, our objective is to provide an introduction to computer science as an intellectually rich and vibrant field rather than focusing exclusively on computer programming. While programming is certainly an important and pervasive element of our approach, we emphasize concepts and problem-solving over syntax and programming language features. Lectures and Other resources 6.001 Structure and Interpretation of Computer Programs MIT Teaches big-picture computing concepts using the Scheme programming language. Students will implement programs in a variety of different programming paradigms (functional, object-oriented, logical). Heavy emphasis on function composition, code-as-data, control abstraction with continuations, and syntactic abstraction through macros. An excellent course if you are looking to build a mental framework on which to hang your programming knowledge. Lectures Textbook ( epub , pdf ) IDE 6.005 Software Construction, Fall 2016 MIT This course introduces fundamental principles and techniques of software development. Students learn how to write software that is safe from bugs, easy to understand, and ready for change. Topics include specifications and invariants; testing, test-case generation, and coverage; state machines; abstract data types and representation independence; design patterns for object-oriented programming; concurrent programming, including message passing and shared concurrency, and defending against races and deadlock; and functional programming with immutable data and higher-order functions. Lectures Notes/Assignments Machine Learning DEEPNLP Deep Learning for Natural Language Processing University of Oxford This is an applied course focussing on recent advances in analysing and generating speech and text using recurrent neural networks. We introduce the mathematical definitions of the relevant machine learning models and derive their associated optimisation algorithms. The course covers a range of applications of neural networks in NLP including analysing latent dimensions in text, transcribing speech to text, translating between languages, and answering questions. This course is organised by Phil Blunsom and delivered in partnership with the DeepMind Natural Language Research Group . Lectures Assignments are available on the organisation page titled as \"practicals\" CS20si Tensorflow for Deep Learning Research Stanford University This course will cover the fundamentals and contemporary usage of the Tensorflow library for deep learning research. We aim to help students understand the graphical computational model of Tensorflow, explore the functions it has to offer, and learn how to build and structure models best suited for a deep learning project. Through the course, students will use Tensorflow to build models of different complexity, from simple linear/logistic regression to convolutional neural network and recurrent neural networks with LSTM to solve tasks such as word embeddings, translation, optical character recognition. Students will also learn best practices to structure a model and manage research experiments. Assignments available on Github. COMS 4771 Machine Learning Columbia University Course taught by Tony Jebara introduces topics in Machine Learning for both generative and discriminative estimation. Material will include least squares methods, Gaussian distributions, linear classification, linear regression, maximum likelihood, exponential family distributions, Bayesian networks, Bayesian inference, mixture models, the EM algorithm, graphical models, hidden Markov models, support vector machines, and kernel methods. Lectures and Assignments CS 109 Data Science Harvard University Learning from data in order to gain useful predictions and insights. This course introduces methods for five key facets of an investigation: data wrangling, cleaning, and sampling to get a suitable data set; data management to be able to access big data quickly and reliably; exploratory data analysis to generate hypotheses and intuition; prediction based on statistical methods such as regression and classification; and communication of results through visualization, stories, and interpretable summaries. Lectures Slides Labs and Assignments 2014 Lectures 2013 Lectures (slightly better) CS 156 Learning from Data Caltech This is an introductory course in machine learning (ML) that covers the basic theory, algorithms, and applications. ML is a key technology in Big Data, and in many financial, medical, commercial, and scientific applications. It enables computational systems to adaptively improve their performance with experience accumulated from the observed data. ML has become one of the hottest fields of study today, taken up by undergraduate and graduate students from 15 different majors at Caltech. This course balances theory and practice, and covers the mathematical as well as the heuristic aspects. Lectures Homework Textbook CS 189 Introduction To Machine Learning UC Berkeley Introductory ML course covering a wide range of topics: ranging from least squares to convolutional neural networks Notes Homework CS 224d Deep Learning for Natural Language Processing Stanford University Natural language processing (NLP) is one of the most important technologies of the information age. Understanding complex language utterances is also a crucial part of artificial intelligence. Applications of NLP are everywhere because people communicate most everything in language: web search, advertisement, emails, customer service, language translation, radiology reports, etc. There are a large variety of underlying tasks and machine learning models powering NLP applications. Recently, deep learning approaches have obtained very high performance across many different NLP tasks. These models can often be trained with a single end-to-end model and do not require traditional, task-specific feature engineering. In this spring quarter course students will learn to implement, train, debug, visualize and invent their own neural network models. The course provides a deep excursion into cutting-edge research in deep learning applied to NLP. Syllabus Lectures and Assignments CS 229r Algorithms for Big Data Harvard University Big data is data so large that it does not fit in the main memory of a single machine, and the need to process big data by efficient algorithms arises in Internet search, network traffic monitoring, machine learning, scientific computing, signal processing, and several other areas. This course will cover mathematically rigorous models for developing such algorithms, as well as some provable limitations of algorithms operating in those models. Lectures ( Youtube ) Assignments CS 231n Convolutional Neural Networks for Visual Recognition Stanford University Computer Vision has become ubiquitous in our society, with applications in search, image understanding, apps, mapping, medicine, drones, and self-driving cars. This course is a deep dive into details of the deep learning architectures with a focus on learning end-to-end models for these tasks, particularly image classification. During the 10-week course, students will learn to implement, train and debug their own neural networks and gain a detailed understanding of cutting-edge research in computer vision. Lecture Notes Lecture Videos Github Page CS 287 Advanced Robotics UC Berkeley The course introduces the math and algorithms underneath state-of-the-art robotic systems. The majority of these techniques are heavily based on probabilistic reasoning and optimization---two areas with wide applicability in modern Artificial Intelligence. An intended side-effect of the course is to generally strengthen your expertise in these two areas. Lectures Notes Assignments CS 395T Statistical and Discrete Methods for Scientific Computing University of Texas Practical course in applying modern statistical techniques to real data, particularly bioinformatic data and large data sets. The emphasis is on efficient computation and concise coding, mostly in MATLAB and C++. Topics covered include probability theory and Bayesian inference; univariate distributions; Central Limit Theorem; generation of random deviates; tail (p-value) tests; multiple hypothesis correction; empirical distributions; model fitting; error estimation; contingency tables; multivariate normal distributions; phylogenetic clustering; Gaussian mixture models; EM methods; maximum likelihood estimation; Markov Chain Monte Carlo; principal component analysis; dynamic programming; hidden Markov models; performance measures for classifiers; support vector machines; Wiener filtering; wavelets; multidimensional interpolation; information theory. Lectures and Assignments CS 4780 Machine Learning Cornell University This course will introduce you to technologies for building data-centric information systems on the World Wide Web, show the practical applications of such systems, and discuss their design and their social and policy context by examining cross-cutting issues such as citizen science, data journalism and open government. Course work involves lectures and readings as well as weekly homework assignments, and a semester-long project in which the students demonstrate their expertise in building data-centric Web information systems. Syllabus Lectures CS 4786 Machine Learning for Data Science Cornell University An introductory course in machine learning, with a focus on data modeling and related methods and learning algorithms for data sciences. Tentative topic list: Dimensionality reduction, such as principal component analysis (PCA) and the singular value decomposition (SVD), canonical correlation analysis (CCA), independent component analysis (ICA), compressed sensing, random projection, the information bottleneck. (We expect to cover some, but probably not all, of these topics). Clustering, such as k-means, Gaussian mixture models, the expectation-maximization (EM) algorithm, link-based clustering. (We do not expect to cover hierarchical or spectral clustering.). Probabilistic-modeling topics such as graphical models, latent-variable models, inference (e.g., belief propagation), parameter learning. Regression will be covered if time permits. Assignments Lectures CVX 101 Convex Optimization Stanford University The course concentrates on recognizing and solving convex optimization problems that arise in applications. Topics addressed include the following. Convex sets, functions, and optimization problems. Basics of convex analysis. Least-squares, linear and quadratic programs, semidefinite programming, minimax, extremal volume, and other problems. Optimality conditions, duality theory, theorems of alternative, and applications. Interior-point methods. Applications to signal processing, statistics and machine learning, control and mechanical engineering, digital and analog circuit design, and finance. Textbook Lectures and Assignments DS-GA 1008 Deep Learning New York University This increasingly popular course is taught through the Data Science Center at NYU. Originally introduced by Yann Lecun , it is now led by Zaid Harchaoui , although Prof. Lecun is rumored to still stop by from time to time. It covers the theory, technique, and tricks that are used to achieve very high accuracy for machine learning tasks in computer vision and natural language processing. The assignments are in Lua and hosted on Kaggle. Course Page Recorded Lectures EECS E6893 & EECS E6895 Big Data Analytics & Advanced Big Data Analytics Columbia University Students will gain knowledge on analyzing Big Data. It serves as an introductory course for graduate students who are expecting to face Big Data storage, processing, analysis, visualization, and application issues on both workplaces and research environments. Taught by Dr. Ching-Yung Lin Course Site Assignments - Assignments are present in the Course Slides EECS E6894 Deep Learning for Computer Vision and Natural Language Processing Columbia University This graduate level research class focuses on deep learning techniques for vision and natural language processing problems. It gives an overview of the various deep learning models and techniques, and surveys recent advances in the related fields. This course uses Theano as the main programming tool. GPU programming experiences are preferred although not required. Frequent paper presentations and a heavy programming workload are expected. Readings Assignments Lecture Notes EE103 Introduction to Matrix Methods Stanford University The course covers the basics of matrices and vectors, solving linear equations, least-squares methods, and many applications. It'll cover the mathematics, but the focus will be on using matrix methods in applications such as tomography, image processing, data fitting, time series prediction, finance, and many others. EE103 is based on a book that Stephen Boyd and Lieven Vandenberghe are currently writing. Students will use a new language called Julia to do computations with matrices and vectors. Lectures Book Assignments Code Fast.ai Introduction to Machine Learning for Coders Fast.ai / University of San Francisco There are around 24 hours of lessons, and you should plan to spend around 8 hours a week for 12 weeks to complete the material. The course is based on lessons recorded at the University of San Francisco for the Masters of Science in Data Science program. We assume that you have at least one year of coding experience, and either remember what you learned in high school math, or are prepared to do some independent study to refresh your knowledge. Lecture Videos Lecture Notes Jupyter Notebooks Info 290 Analyzing Big Data with Twitter UC Berkeley school of information In this course, UC Berkeley professors and Twitter engineers provide lectures on the most cutting-edge algorithms and software tools for data analytics as applied to Twitter's data. Topics include applied natural language processing algorithms such as sentiment analysis, large scale anomaly detection, real-time search, information diffusion and outbreak detection, trend detection in social streams, recommendation algorithms, and advanced frameworks for distributed computing. Lecture Videos Previous Years coursepage Machine Learning: 2014-2015 University of Oxford The course focusses on neural networks and uses the Torch deep learning library (implemented in Lua) for exercises and assignments. Topics include: logistic regression, back-propagation, convolutional neural networks, max-margin learning, siamese networks, recurrent neural networks, LSTMs, hand-writing with recurrent neural networks, variational autoencoders and image generation and reinforcement learning Lectures and Assignments Source code StatLearning Intro to Statistical Learning Stanford University This is an introductory-level course in supervised learning, with a focus on regression and classification methods. The syllabus includes: linear and polynomial regression, logistic regression and linear discriminant analysis; cross-validation and the bootstrap, model selection and regularization methods (ridge and lasso); nonlinear models, splines and generalized additive models; tree-based methods, random forests and boosting; support-vector machines. The lectures cover all the material in An Introduction to Statistical Learning, with Applications in R which is a more approachable version of the Elements of Statistical Learning (or ESL) book. 10-601 Machine Learning Carnegie Mellon University This course covers the theory and practical algorithms for machine learning from a variety of perspectives. It covers topics such as Bayesian networks, decision tree learning, Support Vector Machines, statistical learning methods, unsupervised learning and reinforcement learning. The course covers theoretical concepts such as inductive bias, the PAC learning framework, Bayesian learning methods, margin-based learning, and Occam's Razor. Short programming assignments include hands-on experiments with various learning algorithms. This course is designed to give a graduate-level student a thorough grounding in the methodologies, technologies, mathematics and algorithms currently needed by people who do research in machine learning. Taught by one of the leading experts on Machine Learning - Tom Mitchell Lectures Project Ideas and Datasets 10-708 Probabilistic Graphical Models Carnegie Mellon University Many of the problems in artificial intelligence, statistics, computer systems, computer vision, natural language processing, and computational biology, among many other fields, can be viewed as the search for a coherent global conclusion from local information. The probabilistic graphical models framework provides a unified view for this wide range of problems, enabling efficient inference, decision-making and learning in problems with a very large number of attributes and huge datasets. This graduate-level course will provide you with a strong foundation for both applying graphical models to complex problems and for addressing core research topics in graphical models. Lecture Videos Assignments Lecture notes Readings 11-785 Deep Learning Carnegie Mellon University The course presents the subject through a series of seminars and labs, which will explore it from its early beginnings, and work themselves to some of the state of the art. The seminars will cover the basics of deep learning and the underlying theory, as well as the breadth of application areas to which it has been applied, as well as the latest issues on learning from very large amounts of data. We will concentrate largely, although not entirely, on the connectionist architectures that are most commonly associated with it. Lectures and Reading Notes are available on the page. CS246 Mining Massive Data Sets Stanford University The course will discuss data mining and machine learning algorithms for analyzing very large amounts of data. The emphasis will be on Map Reduce as a tool for creating parallel algorithms that can process very large amounts of data. Lecture Videos Assignments Lecture notes Readings CS276 Information Retrieval and Web Search Stanford University Basic and advanced techniques for text-based information systems: efficient text indexing; Boolean and vector space retrieval models; evaluation and interface issues; Web search including crawling, link-based algorithms, and Web metadata; text/Web clustering, classification; text mining. Lecture notes Readings Practical_RL Reinforcement Learning in the Wild Yandex SDA A course on reinforcement learning in the wild. Taught on-campus in HSE and Yandex SDA (russian) and maintained to be friendly to online students (both english and russian). Syllabus UvA DEEP LEARNING UvA Deep Learning Course University of Amsterdam This course is taught in the MSc program in Artificial Intelligence of the University of Amsterdam. In this course we study the theory of deep learning, namely of modern, multi-layered neural networks trained on big data. The course focuses particularly on computer vision and language modelling, which are perhaps two of the most recognizable and impressive applications of the deep learning theory. Lecture Videos & Notes Practicals Readings Security CIS 4930 / CIS 5930 Offensive Computer Security Florida State University Course taught by W. Owen Redwood and Xiuwen Liu . It covers a wide range of computer security topics, starting from Secure C Coding and Reverse Engineering to Penetration Testing, Exploitation and Web Application Hacking, both from the defensive and the offensive point of view. Lectures and Videos Assignments CS 155 Computer and Network Security Stanford Principles of computer systems security. Attack techniques and how to defend against them. Topics include: network attacks and defenses, operating system holes, application security (web, email, databases), viruses, social engineering attacks, privacy, and digital rights management. Course projects focus on building reliable code. Recommended: Basic Unix. Primarily intended for seniors and first-year graduate students. CS 161 Computer Security UC Berkeley Introduction to computer security. Cryptography, including encryption, authentication, hash functions, cryptographic protocols, and applications. Operating system security, access control. Network security, firewalls, viruses, and worms. Software security, defensive programming, and language-based security. Case studies from real-world systems. CS 259 Security Modeling and Analysis Stanford The course will cover a variety of contemporary network protocols and other systems with security properties. The course goal is to give students hands-on experience in using automated tools and related techniques to analyze and evaluate security mechanisms. To understand security properties and requirements, we will look at several network protocols and their properties, including secrecy, authentication, key establishment, and fairness. In parallel, the course will look at several models and tools used in security analysis and examine their advantages and limitations. In addition to fully automated finite-state model checking techniques, we will also study other approaches, such as constraint solving, process algebras, protocol logics, probabilistic model checking, game theory, and executable models based on logic programming. CS 261 Internet/Network Security UC Berkeley This class aims to provide a thorough grounding in network security suitable for those interested in conducting research in the area, as well as students more generally interested in either security or networking. We will also look at broader issues relating to Internet security for which networking plays a role. Topics include: denial-of-service; capabilities; network intrusion detection; worms; forensics; scanning; traffic analysis / inferring activity; architecture; protocol issues; legality and ethics; web attacks; anonymity; honeypots; botnets; spam; the underground economy; research pitfalls. The course is taught with an emphasis on seminal papers rather than bleeding-edge for a given topic. CS 5430 System Security Cornell University This course discusses security for computers and networked information systems. We focus on abstractions, principles, and defenses for implementing military as well as commercial-grade secure systems. Syllabus Lectures Assignments CSCI 4968 Modern Binary Exploitation Rensselaer Polytechnic Institute This repository contains the materials as developed and used by RPISEC to teach Modern Binary Exploitation at Rensselaer Polytechnic Institute in Spring 2015. This was a university course developed and run solely by students to teach skills in vulnerability research, reverse engineering, and binary exploitation. Lectures Notes Labs Projects CSCI 4976 Malware Analysis Rensselaer Polytechnic Institute This repository contains the materials as developed and used by RPISEC to teach Malware Analysis at Rensselaer Polytechnic Institute in Fall 2015. This was a university course developed and run solely by students, primarily using the EECS 588 Computer & Network Security University of Michigan Taught by J. Alex Halderman who has analyzed the security of Electronic Voting Machines in the US and over seas . This intensive research seminar covers foundational work and current topics in computer systems security. Readings Practical Malware Analysis book by Michael Sikorski and Andrew Honig, to teach skills in reverse engineering, malicious behaviour, malware, and anti-analysis techniques. Lectures Notes Labs Projects 6.857 Computer and Network Security MIT Emphasis on applied cryptography and may include: basic notion of systems security, cryptographic hash functions, symmetric cryptography (one-time pad, stream ciphers, block ciphers), cryptanalysis, secret-sharing, authentication codes, public-key cryptography (encryption, digital signatures), public-key attacks, web browser security, biometrics, electronic cash, viruses, electronic voting, Assignments include a group final project. Topics may vary year to year. Lecture Notes References 6.858 Computer Systems Security MIT Design and implementation of secure computer systems. Lectures cover threat models, attacks that compromise security, and techniques for achieving security, based on recent research papers. Topics include operating system (OS) security, capabilities, information flow control, language security, network protocols, hardware security, and security in web applications. Taught by James Mickens and Nickolai Zeldovich Video Lectures and Labs Quizzes Readings Final Projects 18-636 Browser Security Stanford The Web continues to grow in popularity as platform for retail transactions, financial services, and rapidly evolving forms of communication. It is becoming an increasingly attractive target for attackers who wish to compromise users' systems or steal data from other sites. Browser vendors must stay ahead of these attacks by providing features that support secure web applications. This course will study vulnerabilities in existing web browsers and the applications they render, as well as new technologies that enable web applications that were never before possible. The material will be largely based on current research problems, and students will be expected to criticize and improve existing defenses. Topics of study include (but are not limited to) browser encryption, JavaScript security, plug-in security, sandboxing, web mashups, and authentication. Artificial Intelligence CS 188 Introduction to Artificial Intelligence UC Berkeley This course will introduce the basic ideas and techniques underlying the design of intelligent computer systems. A specific emphasis will be on the statistical and decision-theoretic modeling paradigm. By the end of this course, you will have built autonomous agents that efficiently make decisions in fully informed, partially observable and adversarial settings. Your agents will draw inferences in uncertain environments and optimize actions for arbitrary reward structures. Your machine learning algorithms will classify handwritten digits and photographs. The techniques you learn in this course apply to a wide variety of artificial intelligence problems and will serve as the foundation for further study in any application area you choose to pursue. Lectures Projects Exams CS 4700 Foundations of Artificial Intelligence Cornell University This course will provide an introduction to computer vision, with topics including image formation, feature detection, motion estimation, image mosaics, 3D shape reconstruction, and object and face detection and recognition. Applications of these techniques include building 3D maps, creating virtual characters, organizing photo and video databases, human computer interaction, video surveillance, automatic vehicle navigation, and mobile computer vision. This is a project-based course, in which you will implement several computer vision algorithms throughout the semester. Assignments Lectures CS 6700 Advanced Artificial Intelligence Cornell University The design of systems that are among top 10 performers in the world (human, computer, or hybrid human-computer). Syllabus Lectures Readings 6.868J The Society of Mind MIT This course is an introduction, by Prof. Marvin Minsky , to the theory that tries to explain how minds are made from collections of simpler processes. It treats such aspects of thinking as vision, language, learning, reasoning, memory, consciousness, ideals, emotions, and personality. It incorporates ideas from psychology, artificial intelligence, and computer science to resolve theoretical issues such as wholes vs. parts, structural vs. functional descriptions, declarative vs. procedural representations, symbolic vs. connectionist models, and logical vs. common-sense theories of learning. Lectures Assignments Readings Computer Graphics CAP 5415 Computer Vision University of Central Florida An introductory level course covering the basic topics of computer vision, and introducing some fundamental approaches for computer vision research. Lectures and Videos Assignments CIS 581 Computer Vision and Computational Photography University of Pennsylvania An introductory course in computer vision and computational photography focusing on four topics: image features, image morphing, shape matching, and image search. Lectures Assignments CMU 462 Computer Graphics Carnegie Mellon University This course provides a comprehensive introduction to computer graphics. Focuses on fundamental concepts and techniques, and their cross-cutting relationship to multiple problem domains in graphics (rendering, animation, geometry, imaging). Topics include: sampling, aliasing, interpolation, rasterization, geometric transformations, parameterization, visibility, compositing, filtering, convolution, curves & surfaces, geometric data structures, subdivision, meshing, spatial hierarchies, ray tracing, radiometry, reflectance, light fields, geometric optics, Monte Carlo rendering, importance sampling, camera models, high-performance ray tracing, differential equations, time integration, numerical differentiation, physically-based animation, optimization, numerical linear algebra, inverse kinematics, Fourier methods, data fitting, example-based synthesis. Lectures and Readings Assignments and Quizes CS 378 3D Reconstruction with Computer Vision UTexas In this lab-based class, we'll dive into practical applications of 3D reconstruction, combining hardware and software to build our own 3D environments from scratch. We'll use open-source frameworks like OpenCV to do the heavy lifting, with the focus on understanding and applying state-of-the art approaches to geometric computer vision Lectures CS 4620 Introduction to Computer Graphics Cornell University The study of creating, manipulating, and using visual images in the computer. Assignments Exams CS 4670 Introduction to Computer Vision Cornell University This course will provide an introduction to computer vision, with topics including image formation, feature detection, motion estimation, image mosaics, 3D shape reconstruction, and object and face detection and recognition. Applications of these techniques include building 3D maps, creating virtual characters, organizing photo and video databases, human computer interaction, video surveillance, automatic vehicle navigation, and mobile computer vision. This is a project-based course, in which you will implement several computer vision algorithms throughout the semester. Assignments Lectures CS 6670 Computer Vision Cornell University Introduction to computer vision. Topics include edge detection, image segmentation, stereopsis, motion and optical flow, image mosaics, 3D shape reconstruction, and object recognition. Students are required to implement several of the algorithms covered in the course and complete a final project. Syllabus Lectures Assignments CSCI 1230 Introduction to Computer Graphics Brown University This course offers an in-depth exploration of fundamental concepts in 2D and 3D computer graphics. It introduces 2D raster graphics techniques, including scan conversion, simple image processing, interaction techniques and user interface design. The bulk of the course is devoted to 3D modeling, geometric transformations, and 3D viewing and rendering. Lectures Labs Demos CSCI-GA.2270-001 Graduate Computer Graphics New York University Step-by-step study computer graphics, with reading and homework at each lecture (Fall2015) Lectures Misc AM 207 Monte Carlo Methods and Stochastic Optimization Harvard University This course introduces important principles of Monte Carlo techniques and demonstrates the power of these techniques with simple (but very useful) applications. All of this in Python! Lecture Videos Assignments Lecture Notes CS 75 Introduction to Game Development Tufts University The course taught by Ming Y. Chow teaches game development initially in PyGame through Python, before moving on to addressing all facets of game development. Topics addressed include game physics, sprites, animation, game development methodology, sound, testing, MMORPGs and online games, and addressing mobile development in Android, HTML5, and iOS. Most to all of the development is focused on PyGame for learning principles Text Lectures Assignments Labs CS 50 Intro to Game Developement Harvard University This course picks up where Harvard College\u2019s CS50 leaves off, focusing on the development of 2D and 3D interactive games. Students explore the design of such childhood games as Super Mario Bros., Legend of Zelda, and Portal in a quest to understand how video games themselves are implemented. Via lectures and hands-on projects, the course explores principles of 2D and 3D graphics, animation, sound, and collision detection using frameworks like Unity and L\u00d6VE 2D , as well as languages like Lua and C#. By class\u2019s end, students will have programmed several of their own games and gained a thorough understanding of the basics of game design and development. Assignments Lecture Videos CS 100 Open Source Software Construction UC Riverside This is a course on how to be a hacker. Your first four homework assignments walk you through the process of building your own unix shell. You'll be developing it as an open source project, and you will collaborate with each other at various points. Github Page Assignments CS 108 Object Oriented System Design Stanford Software design and construction in the context of large OOP libraries. Taught in Java. Topics: OOP design, design patterns, testing, graphical user interface (GUI) OOP libraries, software engineering strategies, approaches to programming in teams. CS 168 Computer Networks UC Berkeley This is an undergraduate level course covering the fundamental concepts of networking as embodied in the Internet. The course will cover a wide range of topics; see the lecture schedule for more details. While the class has a textbook, we will not follow its order of presentation but will instead use the text as a reference when covering each individual topic. The course will also have several projects that involve programming (in Python). You should know programming, data structures, and software engineering. In terms of mathematics, your algebra should be very solid, you need to know basic probability, and you should be comfortable with thinking abstractly. The TAs will spend very little time reviewing material that is not specific to networking. We assume that you either know the material covered in those courses, or are willing to learn the material as necessary. We won't cover any of this material in lecture. CS 193a Android App Development, Spring 2016 Stanford University Course Description: This course provides an introduction to developing applications for the Android mobile platform. Prerequisite: CS 106B or equivalent. Java experience highly recommended. OOP highly recommmended. Devices: Access to an Android phone and/or tablet recommended but not required. Videos: Videos list can be found here Other materials: Some codes, handsout, homework ..... and lecture notes are not downloadable on the site due to login requirement. Please head to my Github repo here to download them. CS 193p Developing Applications for iOS Stanford University Updated for iOS 7. Tools and APIs required to build applications for the iPhone and iPad platform using the iOS SDK. User interface designs for mobile devices and unique user interactions using multi-touch technologies. Object-oriented design using model-view-controller paradigm, memory management, Objective-C programming language. Other topics include: object-oriented database API, animation, multi-threading and performance considerations. Prerequisites: C language and object-oriented programming experience Recommended: Programming Abstractions Updated courses for iOS8 - Swift Updated courses for iOS9 - Swift CS 223A Introduction to Robotics Stanford University The purpose of this course is to introduce you to basics of modeling, design, planning, and control of robot systems. In essence, the material treated in this course is a brief survey of relevant results from geometry, kinematics, statics, dynamics, and control. CS 262a Advanced Topics in Computer Systems UC Berkeley CS262a is the first semester of a year-long sequence on computer systems research, including operating systems, database systems, and Internet infrastructure systems. The goal of the course is to cover a broad array of research topics in computer systems, and to engage you in top-flight systems research. The first semester is devoted to basic thematic issues and underlying techniques in computer systems, while the second semester goes deeper into topics related to scalable, parallel and distributed systems. The class is based on a discussion of important research papers and a research project. Parts : Some Classics, Persistent Storage, Concurrency, Higher-Level Models, Virtual Machines, Cloud Computing, Parallel and Distributed Computing, Potpourri. Prerequisites: The historical prerequisite was to pass an entrance exam in class, which covered undergraduate operating systems material (similar to UCB's CS162 ). There is no longer an exam. However, if you have not already taken a decent undergrad OS class, you should talk with me before taking this class. The exam had the benefit of \"paging in\" the undergrad material, which may have been its primary value (since the pass rate was high). Readings & Lectures CS 294 Cutting-edge Web Technologies Berkeley Want to learn what makes future web technologies tick? Join us for the class where we will dive into the internals of many of the newest web technologies, analyze and dissect them. We will conduct survey lectures to provide the background and overview of the area as well as invite guest lecturers from various leading projects to present their technologies. CS 411 Software Architecture Design Bilkent University This course teaches the basic concepts, methods and techniques for designing software architectures. The topics include: rationale for software architecture design, modeling software architecture design, architectural styles/patterns, architectural requirements analysis, comparison and evaluation of architecture design methods, synthesis-based software architecture design, software product-line architectures, domain modeling, domain engineering and application engineering, software architecture implementation, evaluating software architecture designs. CS 3152 Introduction to Computer Game Development Cornell University A project-based course in which programmers and designers collaborate to make a computer game. This course investigates the theory and practice of developing computer games from a blend of technical, aesthetic, and cultural perspectives. Technical aspects of game architecture include software engineering, artificial intelligence, game physics, computer graphics, and networking. Aesthetic and cultural include art and modeling, sound and music, game balance, and player experience. Syllabus Lectures Assignments CS 4152 Advanced Topics in Computer Game Development Cornell University Project-based follow-up course to CS/INFO 3152. Students work in a multidisciplinary team to develop a game that incorporates innovative game technology. Advanced topics include 3D game development, mobile platforms, multiplayer gaming, and nontraditional input devices. There is a special emphasis on developing games that can be submitted to festivals and competitions, or that can be commercialized. Syllabus Lectures Assignments CS 4154 Analytics-driven Game Design Cornell University A project-based course in which programmers and designers collaborate to design, implement, and release a video game online through popular game portals. In this course, students will use the internet to gather data anonymously from players. Students will analyze this data in order to improve their game over multiple iterations. Technical aspects of this course include programming, database architecture, and statistical analysis. Syllabus Lectures Assignments CS 4812 Quantum Information Processing Cornell University Hardware that exploits quantum phenomena can dramatically alter the nature of computation. Though constructing a working quantum computer is a formidable technological challenge, there has been much recent experimental progress. In addition, the theory of quantum computation is of interest in itself, offering strikingly different perspectives on the nature of computation and information, as well as providing novel insights into the conceptual puzzles posed by the quantum theory. The course is intended both for physicists, unfamiliar with computational complexity theory or cryptography, and also for computer scientists and mathematicians, unfamiliar with quantum mechanics. The prerequisites are familiarity (and comfort) with finite dimensional vector spaces over the complex numbers, some standard group theory, and ability to count in binary. Syllabus Lectures CS 4860 Applied Logic Cornell University In addition to basic first-order logic, when taught by Computer Science this course involves elements of Formal Methods and Automated Reasoning. Formal Methods is concerned with proving properties of algorithms, specifying programming tasks and synthesizing programs from proofs. We will use formal methods tools such as interactive proof assistants (see www.nuprl.org ). We will also spend two weeks on constructive type theory, the language used by the Coq and Nuprl proof assistants. Syllabus Lectures Assignments CS 5150 Software Engineering Cornell University Introduction to the practical problems of specifying, designing, building, testing, and delivering reliable software systems Lectures Assignments CS 5220 Applications of Parallel Computers Cornell University How do we solve the large-scale problems of science quickly on modern computers? How do we measure the performance of new or existing simulation codes, and what things can we do to make them run faster? How can we best take advantage of features like multicore processors, vector units, and graphics co-processors? These are the types of questions we will address in CS 5220, Applications of Parallel Computers. Topics include: Single-processor architecture, caches, and serial performance tuning Basics of parallel machine organization Distributed memory programming with MPI Shared memory programming with OpenMP Parallel patterns: data partitioning, synchronization, and load balancing Examples of parallel numerical algorithms Applications from science and engineering Lectures Assignments CS 5540 Computational Techniques for Analyzing Clinical Data Cornell University CS5540 is a masters-level course that covers a wide range of clinical problems and their associated computational challenges. The practice of medicine is filled with digitally accessible information about patients, ranging from EKG readings to MRI images to electronic health records. This poses a huge opportunity for computer tools that make sense out of this data. Computation tools can be used to answer seemingly straightforward questions about a single patient's test results (\u201cDoes this patient have a normal heart rhythm?\u201d), or to address vital questions about large populations (\u201cIs there any clinical condition that affects the risks of Alzheimer\u201d). In CS5540 we will look at many of the most important sources of clinical data and discuss the basic computational techniques used for their analysis, ranging in sophistication from current clinical practice to state-of-the-art research projects. Syllabus Lectures Assignments CS 5724 Evolutionary Computation Cornell University This course will cover advanced topics in evolutionary algorithms and their application to open-ended computational design. The field of evolutionary computation tries to address large-scale optimization and planning problems through stochastic population-based methods. It draws inspiration from evolutionary processes in nature and in engineering, and also serves as abstract models for these phenomena. Evolutionary processes are generally weak methods that require little information about the problem domain and hence can be applied across a wide variety of applications. They are especially useful for open-ended problem domains for which little formal knowledge exists and the number of parameters is undefined, such as for the general engineering design process. This course will provide insight to a variety of evolutionary computation paradigms, such as genetic algorithms, genetic programming, and evolutionary strategies, as well as governing dynamics of co-evolution, arms races and mediocre stable states. New methods involving symbiosis models and pattern recognition will also be presented. The material will be intertwined with discussions of representations and results for design problems in a variety of problem domains including software, electronics, and mechanics. Syllabus Lectures Assignments CS 6452 Datacenter Networks and Services Cornell University CS6452 focuses on datacenter networks and services. The emerging demand for web services and cloud computing have created need for large scale data centers. The hardware and software infrastructure for datacenters critically determines the functionality, performance, cost and failure tolerance of applications running on that datacenter. This course will examine design alternatives for both the hardware (networking) infrastructure, and the software infrastructure for datacenters. Syllabus Lectures CS 6630 Realistic Image Synthesis Cornell University CS6630 is an introduction to physics-based rendering at the graduate level. Starting from the fundamentals of light transport we will look at formulations of the Rendering Equation, and a series of Monte Carlo methods, from sequential sampling to multiple importance sampling to Markov Chains, for solving the equation to make pictures. We'll look at light reflection from surfaces and scattering in volumes, illumination from luminaries and environments, and diffusion models for translucent materials. We will build working implementations of many of the algorithms we study, and learn how to make sure they are actually working correctly. It's fun to watch integrals and probability distributions transform into photographs of a slightly too perfect synthetic world. Syllabus Lectures Assignments Readings CS 6640 Computational Photography Cornell University A course on the emerging applications of computation in photography. Likely topics include digital photography, unconventional cameras and optics, light field cameras, image processing for photography, techniques for combining multiple images, advanced image editing algorithms, and projector-camera systems.cornell.edu/courses/CS6630/2012sp/about.stm) Lectures Assignments CS 6650 Computational Motion Cornell University Covers computational aspects of motion, broadly construed. Topics include the computer representation, modeling, analysis, and simulation of motion, and its relationship to various areas, including computational geometry, mesh generation, physical simulation, computer animation, robotics, biology, computer vision, acoustics, and spatio-temporal databases. Students implement several of the algorithms covered in the course and complete a final project. This offering will also explore the special role of motion processing in physically based sound rendering. CS 6840 Algorithmic Game Theory Cornell University Algorithmic Game Theory combines algorithmic thinking with game-theoretic, or, more generally, economic concepts. The course will study a range of topics at this interface Syllabus Lectures Assignments Readings CSE 154 Web Programming University of Washington This course is an introduction to programming for the World Wide Web. Covers use of HTML, CSS, PHP, JavaScript, AJAX, and SQL. Lectures Assignments ESM 296-4F GIS & Spatial Analysis UC Santa Barbara Taught by James Frew , Ben Best , and Lisa Wedding Focuses on specific computational languages (e.g., Python, R, shell) and tools (e.g., GDAL/OGR, InVEST, MGET, ModelBuilder) applied to the spatial analysis of environmental problems GitHub (includes lecture materials and labs) ICS 314 Software Engineering University of Hawaii Taught by Philip Johnson Introduction to software engineering using the \"Athletic Software Engineering\" pedagogy Readings Experiences Assessments IGME 582 Humanitarian Free & Open Source Software Development Rochester Institute of Technology This course provides students with exposure to the design, creation and production of Open Source Software projects. Students will be introduced to the historic intersections of technology and intellectual property rights and will become familiar with Open Source development processes, tools and practices. I485 / H400 Biologically Inspired Computation Indiana University Course taught by Luis Rocha about the multi-disciplinary field algorithms inspired by naturally occurring phenomenon. This course provides introduces the following areas: L-systems, Cellular Automata, Emergence, Genetic Algorithms, Swarm Intelligence and Artificial Immune Systems. It's aim is to cover the fundamentals and enable readers to build up a proficiency in applying various algorithms to real-world problems. Lectures Assignments Open Sourced Elective: Database and Rails Intro to Ruby on Rails University of Texas An introductory course in Ruby on Rails open sourced by University of Texas' CS Adjunct Professor, Richard Schneeman. Lectures Assignments Videos SCICOMP An Introduction to Efficient Scientific Computation Universit\u00e4t Bremen This is a graduate course in scientific computing created and taught by Oliver Serang in 2014, which covers topics in computer science and statistics with applications from biology. The course is designed top-down, starting with a problem and then deriving a variety of solutions from scratch. Topics include memoization, recurrence closed forms, string matching (sorting, hash tables, radix tries, and suffix tries), dynamic programming (e.g. Smith-Waterman and Needleman-Wunsch), Bayesian statistics (e.g. the envelope paradox), graphical models (HMMs, Viterbi, junction tree, belief propagation), FFT, and the probabilistic convolution tree. Lecture videos on Youtube and for direct download 14-740 Fundamentals of Computer Networks CMU This is an introductory course on Networking for graduate students. It follows a top-down approach to teaching Computer Networks, so it starts with the Application layer which most of the students are familiar with and as the course unravels we learn more about transport, network and link layers of the protocol stack. As far as prerequisites are concerned - basic computer, programming and probability theory background is required. The course site contains links to the lecture videos, reading material and assignments.","title":"Awesome CS Courses"},{"location":"awesome/awesome-courses/#awesome-cs-courses","text":"","title":"Awesome CS Courses"},{"location":"awesome/awesome-courses/#introduction","text":"There is a lot of ~~hidden~~ treasure lying within university pages scattered across the internet. This list is an attempt to bring to light those awesome CS courses which make their high-quality material i.e. assignments, lectures, notes, readings & examinations available online for free.","title":"Introduction"},{"location":"awesome/awesome-courses/#table-of-contents","text":"Algorithms Artificial Intelligence Computer Graphics CS Theory Introduction to CS Machine Learning Misc Programming Languages / Compilers Security Systems","title":"Table of Contents"},{"location":"awesome/awesome-courses/#legend","text":"- Lecture Videos - Lecture Notes - Assignments / Labs - Readings","title":"Legend"},{"location":"awesome/awesome-courses/#courses","text":"","title":"Courses"},{"location":"awesome/awesome-courses/#systems","text":"CS 61C Great Ideas in Computer Architecture (Machine Structures) UC Berkeley The subjects covered in this course include: C and assembly language programming, translation of high-level programs into machine language, computer organization, caches, performance measurement, parallelism, CPU design, warehouse-scale computing, and related topics. Lecture Videos Lecture Notes Resources Old Exams CS 107 Computer Organization & Systems Stanford University CS107 is the third course in Stanford's introductory programming sequence. The course will work from the C programming language down to the microprocessor to de-mystify the machine. With a complete understanding of how computer systems execute programs and manipulate data, you will become a more effective programmer, especially in dealing with issues of debugging, performance, portability, and robustness. Lecture Videos Assignments CS 140 Operating Systems Stanford University This class introduces the basic facilities provided in modern operating systems. The course divides into three major sections. The first part of the course discusses concurrency. The second part of the course addresses the problem of memory management. The third major part of the course concerns file systems. Lecture Notes Assignments 6.004 Computation Structures MIT Introduces architecture of digital systems, emphasizing structural principles common to a wide range of technologies. Multilevel implementation strategies; definition of new primitives (e.g., gates, instructions, procedures, processes) and their mechanization using lower-level elements. Analysis of potential concurrency; precedence constraints and performance measures; pipelined and multidimensional systems. Instruction set design issues; architectural support for contemporary software structures. 4 Engineering Design Points. 6.004 offers an introduction to the engineering of digital systems. Starting with MOS transistors, the course develops of series of building blocks logic gates, combinational and sequential circuits, finite-state machines, computers and finally complete systems. Both hardware and software mechanisms are explored through a series of design examples. Youtube Playlist Lecture Notes Labs-Assignments CS 162 Operating Systems and Systems Programming UC Berkeley The purpose of this course is to teach the design of operating systems and operating systems concepts that appear in other advanced systems. Topics we will cover include concepts of operating systems, systems programming, networked and distributed systems, and storage systems, including multiple-program systems (processes, interprocess communication, and synchronization), memory allocation (segmentation, paging), resource allocation and scheduling, file systems, basic networking (sockets, layering, APIs, reliability), transactions, security, and privacy. Operating Systems course by the Chair of EECS, UC Berkeley David Culler Lecture Videos Spring 2015 lectures Lecture Notes Spring 2015 lectures CS 168 Introduction to the Internet: Architecture and Protocols UC Berkeley This course is an introduction to the Internet architecture. We will focus on the concepts and fundamental design principles that have contributed to the Internet's scalability and robustness and survey the various protocols and algorithms used within this architecture. Topics include layering, addressing, intradomain routing, interdomain routing, reliable delivery, congestion control, and the core protocols (e.g., TCP, UDP, IP, DNS, and HTTP) and network technologies (e.g., Ethernet, wireless). Lecture Notes & Assignments Discussion Notes CS 179 GPU Programming Caltech This course will cover programming techniques for the GPU. The course will introduce NVIDIA's parallel computing language, CUDA. Beyond covering the CUDA programming model and syntax, the course will also discuss GPU architecture, high performance computing on GPUs, parallel algorithms, CUDA libraries, and applications of GPU computing. Assignments Lecture Notes CS 186 Introduction to Database Systems UC Berkeley In the project assignments in CS186, you will write a basic database management system called SimpleDB. For this project, you will focus on implementing the core modules required to access stored data on disk; in future projects, you will add support for various query processing operators, as well as transactions, locking, and concurrent queries. Lecture Videos Lecture Notes Projects CS 241 Systems Programming (Spring 2016) Univ of Illinois, Urbana-Champaign System programming refers to writing code that tasks advantage of operating system support for programmers. This course is designed to introduce you to system programming. By the end of this course, you should be proficient at writing programs that take full advantage of operating system support. To be concrete, we need to fix an operating system and we need to choose a programming language for writing programs. We chose the C language running on a Linux/UNIX operating system (which implements the POSIX standard interface between the programmer and the OS). Assignments Labs Github Page Crowd Sourced Book CS 425 Distributed Systems Univ of Illinois, Urbana-Champaign Brilliant set of lectures and reading material covering fundamental concepts in distributed systems such as Vector clocks, Consensus and Paxos. This is the 2016 version by Prof Indranil Gupta. Lectures Assignments CS 452 Real-Time Programming University of Waterloo Write a real-time OS microkernel in C, and application code to operate a model train set in response to real-time sensor information. The communication with the train set runs at 2400 baud so it takes about 61 milliseconds to ask all of the sensors for data about the train's possible location. This makes it particularly challenging because a train can move about 3 centimeters in that time. One of the most challenging and time-consuming courses at the University of Waterloo. Assignments Lecture notes CS 2043 Unix Tools & Scripting Cornell University UNIX-like systems are increasingly being used on personal computers, mobile phones, web servers, and many other systems. They represent a wonderful family of programming environments useful both to computer scientists and to people in many other fields, such as computational biology and computational linguistics, in which data is naturally represented by strings. This course provides an intensive training to develop skills in Unix command line tools and scripting that enable the accomplishment and automation of large and challenging computing tasks. The syllabus takes students from shell basics and piping, to regular-expression processing tools, to shell scripting and Python. Syllabus Lectures Assignments CS 3410 Computer System Organization and Programming Cornell University CS3410 provides an introduction to computer organization, systems programming and the hardware/software interface. Topics include instruction sets, computer arithmetic, datapath design, data formats, addressing modes, memory hierarchies including caches and virtual memory, I/O devices, bus-based I/O systems, and multicore architectures. Students learn assembly language programming and design a pipelined RISC processor. Lectures Assignments CS 4410 Operating Systems Cornell University CS 4410 covers systems programming and introductory operating system design and implementation. We will cover the basics of operating systems, namely structure, concurrency, scheduling, synchronization, memory management, filesystems, security and networking. The course is open to any undergraduate who has mastered the material in CS3410/ECE3140. Syllabus Lectures CS 4414 Operating Systems University of Virginia A course (that) covers topics including: Analysis process communication and synchronization; resource management; virtual memory management algorithms; file systems; and networking and distributed systems. The primary goal of this course is to improve your ability to build scalable, robust and secure computing systems. It focuses on doing that by understanding what underlies the core abstractions of modern computer systems. Syllabus Lectures CS 5412 Cloud Computing Cornell University Taught by one of the stalwarts of this field, Prof Ken Birman, this course has a fantastic set of slides that one can go through. The Prof's book is also a gem and recommended as a must read in Google's tutorial on Distributed System Design Slides CSCE 3613 Operating Systems University of Arkansas (Fayetteville) - An introduction to operating systems including topics in system structures, process management, storage management, files, distributed systems, and case studies. Syllabus Assignments Lecture Notes Readings CSCI-UA.0202: Operating Systems (Undergrad) Operating Systems NYU NYU's operating system course. It's a fundamental course focusing basic ideas of operating systems, including memory management, process shceduling, file system, ect. It also includes some recommended reading materials. What's more, there are a series of hands-on lab materials, helping you easily understand OS. Assignments Lectures Old Exams CSCI 360 Computer Architecture 3 CUNY Hunter College A course that covers cache design, buses, memory hierarchies, processor-peripheral interfaces, and multiprocessors, including GPUs. CSCI 493.66 UNIX System Programming (formerly UNIX Tools) CUNY Hunter College A course that is mostly about writing programs against the UNIX API, covering all of the basic parts of the kernel interface and libraries, including files, processes, terminal control, signals, and threading. CSCI 493.75 Parallel Computing CUNY Hunter College The course is an introduction to parallel algorithms and parallel programming in C and C++, using the Message Passing Interface (MPI) and the OpenMP application programming interface. It also includes a brief introduction to parallel architectures and interconnection networks. It is both theoretical and practical, including material on design methodology, performance analysis, and mathematical concepts, as well as details on programming using MPI and OpenMP. Hack the Kernel Introduction to Operating Systems SUNY University at Buffalo, NY This course is an introduction to operating system design and implementation. We study operating systems because they are examples of mature and elegant solutions to a difficult design problem: how to safely and efficiently share system resources and provide abstractions useful to applications. For the processor, memory, and disks, we discuss how the operating system allocates each resource and explore the design and implementation of related abstractions. We also establish techniques for testing and improving system performance and introduce the idea of hardware virtualization. Programming assignments provide hands-on experience with implementing core operating system components in a realistic development environment. Course by Dr.Geoffrey Challen Syllabus Slides Video lectures Assignments Old Exams ECE 459 Programming for Performance University of Waterloo Learn techniques for profiling, rearchitecting, and implementing software systems that can handle industrial-sized inputs, and to design and build critical software infrastructure. Learn performance optimization through parallelization, multithreading, async I/O, vectorization and GPU programming, and distributed computing. Lecture slides ECGR4101/5101 Embedded Systems using the Renesas RX63N Processor University of North Carolina at Charlotte Introduction to designing microcontroller-based embedded computer systems using assembly and C programs. Examination of Real-time Operating Systems and their impact on performance. Computer engineering applications will be emphasized. The goal of this course is to solidify and build upon a student\u2019s knowledge of computer organization by presenting hands-on experience with microcontrollers. Students will also examine a few sensors that are used in commercial and medical products and learn how to interface them in a microcontroller system. Lecture Videos Lecture Notes PODC Principles of Distributed Computing ETH-Zurich Explore essential algorithmic ideas and lower bound techniques, basically the \"pearls\" of distributed computing in an easy-to-read set of lecture notes, combined with complete exercises and solutions. Book Assignments and Solutions SPAC Parallelism and Concurrency Univ of Washington Technically not a course nevertheless an awesome collection of materials used by Prof Dan Grossman to teach parallelism and concurrency concepts to sophomores at UWash 6.824 Distributed Systems MIT MIT's graduate-level DS course with a focus on fault tolerance, replication, and consistency, all taught via awesome lab assignments in Golang! Assignments - Just do git clone git://g.csail.mit.edu/6.824-golabs-2014 6.824 Readings 6.828 Operating Systems MIT MIT's operating systems course focusing on the fundamentals of OS design including booting, memory management, environments, file systems, multitasking, and more. In a series of lab assignments, you will build JOS, an OS exokernel written in C. Assignments Lectures Videos Note: These are student recorded cam videos of the 2011 course. The videos explain a lot of concepts required for the labs and assignments. CSEP 552 Distributed Systems University of Washington CSEP552 is a graduate course on distributed systems. Distributed systems have become central to many aspects of how computers are used, from web applications to e-commerce to content distribution. This course will cover abstractions and implementation techniques for the construction of distributed systems, including client server computing, the web, cloud computing, peer-to-peer systems, and distributed storage systems. Topics will include remote procedure call, maintaining consistency of distributed state, fault tolerance, high availability, and other topics. As we believe the best way to learn the material is to build it, there will be a series of hands-on programming projects. Lectures of a previous session are available to watch. 15-213 Introduction to Computer Systems (ICS) Carnegie-Mellon University The ICS course provides a programmer's view of how computer systems execute programs, store information, and communicate. It enables students to become more effective programmers, especially in dealing with issues of performance, portability and robustness. It also serves as a foundation for courses on compilers, networks, operating systems, and computer architecture, where a deeper understanding of systems-level issues is required. Topics covered include: machine-level code and its generation by optimizing compilers, performance evaluation and optimization, computer arithmetic, memory organization and management, networking technology and protocols, and supporting concurrent computation. This is the must-have course for everyone in CMU who wants to learn some computer science no matter what major are you in. Because it's CMU (The course number is as same as the zip code of CMU)! Lecture Notes Videos Assignments 15-319/619 Cloud Computing (ICS) Carnegie-Mellon University This project-based on-line course focuses on skill building across various aspects of cloud computing. We cover conceptual topics and provide hands-on experience through projects utilizing public cloud infrastructures (Amazon Web Services (AWS), Microsoft Azure and Google Cloud Platform (GCP)). The adoption of cloud computing services continues to grow across a variety of organizations and in many domains. Simply, cloud computing is the delivery of computing as a service over a network, whereby distributed resources and services are rented, rather than owned, by an end user as a utility. For the projects, students will work with Amazon Web Services, Microsoft Azure and Google Cloud Platform, use them to rent and provision compute resources and then program and deploy applications that run on these resources. Students will develop and evaluate virtual machine (VM) and container scaling, elasticity and load balancing solutions. In addition, students will work with cloud storage systems and learn to develop different applications using batch, iterative and stream processing frameworks. 15-619 students will have to complete an extra project which entails designing and implementing a complete web-service solution for querying big data. For the extra project, the student teams are evaluated based on the cost and performance of their web service. Lecture Notes Videos 15-418 Parallel Computer Architecture and Programming Carnegie-Mellon University The goal of this course is to provide a deep understanding of the fundamental principles and engineering trade-offs involved in designing modern parallel computing systems as well as to teach parallel programming techniques necessary to effectively utilize these machines. Because writing good parallel programs requires an understanding of key machine performance characteristics, this course will cover both parallel hardware and software design. Assignments Lecture Notes Lecture Videos Readings 15-440 Distributed Systems Carnegie-Mellon University Introduction to distributed systems with a focus on teaching concepts via projects implemented in the Go programming language. Assignments 15-721 Database Systems Carnegie-Mellon University This course is a comprehensive study of the internals of modern database management systems. It will cover the core concepts and fundamentals of the components that are used in both high-performance transaction processing systems (OLTP) and large-scale analytical systems (OLAP). The class will stress both efficiency and correctness of the implementation of these ideas. All class projects will be in the context of a real in-memory, multi-core database system. The course is appropriate for graduate students in software systems and for advanced undergraduates with strong systems programming skills. Assignments Lecture Videos Readings 15-445/645 Database Systems Carnegie-Mellon University This course covers fundamental topics of DBMS, compared to CMU 15-721. Assignments Lecture Videos Readings 15-749 Engineering Distributed Systems Carnegie-Mellon University A project focused course on Distributed Systems with an awesome list of readings Readings 18-447 Introduction to Computer Architecture CMU Very comprehensive material on Computer Architecture - definitely more than just \"introduction\". Online material is very user-friendly, even the recitation videos available online. This is the Spring'15 version by Prof. Onur Mutlu Lectures and Recitation Homeworks 7 HWs with answer set as well Readings","title":"Systems"},{"location":"awesome/awesome-courses/#programming-languages-compilers","text":"CS 75 Principles of Compiler Design Swathmore College Modelled after the influential paper on incremental approach to compiler design , this course teaches how to build a compiler in OCaml Course on Github Notes CS 91 Introduction to Programming Languages Swathmore College Uses the Pyret programming language & PAPL book to understand the fundamentals of programming languages. Labs CIS 194 Introduction to Haskell Penn Engineering Explore the joys of functional programming, using Haskell as a vehicle. The aim of the course will be to allow you to use Haskell to easily and conveniently write practical programs. Previous semester also available, with more exercises CIS 198 Rust Programming UPenn This course covers what makes Rust so unique and applies it to practical systems programming problems. Topics covered include traits and generics; memory safety (move semantics, borrowing, and lifetimes); Rust\u2019s rich macro system; closures; and concurrency. Assignments Clojure Functional Programming with Clojure University of Helsinki The course is an introduction to functional programming with a dynamically typed language Clojure. We start with an introduction to Clojure; its syntax and development environment. Clojure has a good selection of data structures and we cover most of them. We also go through the basics of recursion and higher-order functions. The course material is in English. Github Page CMSC 430 Introduction to Compilers Univ of Maryland The goal of CMSC 430 is to arm students with the ability to design, implement, and extend a programming language. Throughout the course, students will design and implement several related languages, and will explore parsing, syntax querying, dataflow analysis, compilation to bytecode, type systems, and language interoperation. Lecture Notes Assignments COS 326 Functional Programming Princeton University Covers functional programming concepts like closures, tail-call recursion & parallelism using the OCaml programming language Lectures Assignments CS 143 Compiler construction Stanford University CS143 is a Stanford's course in the practical and theoretical aspects of compiler construction. Home Syllabus Lectures Assignments CS143 - 2011 CS 164 Hack your language! UC Berkeley Introduction to programming languages by designing and implementing domain-specific languages. Lecture Videos Code for Assignments CS 173 Programming Languages Brown University Course by Prof. Krishnamurthi (author of HtDP ) and numerous other awesome books on programming languages. Uses a custom designed Pyret programming language to teach the concepts. There was an online class hosted in 2012, which includes all lecture videos for you to enjoy. Videos Assignments CS 223 Purely Functional Data Structures In Elm University of Chicago This course teaches functional reactive programming and purely functional data structures based on Chris Okazaki's book and using the Elm programming language. Lectures Assignments CS 240h Functional Systems in Haskell Stanford University Building software systems in Haskell Lecture Slides 3 Assignments: Lab1 , Lab2 , Lab3 CS 421 Programming Languages and Compilers Univ of Illinois, Urbana-Champaign Course that uses OCaml to teach functional programming and programming language design. Lectures Videos Assignments Exams CS 3110 Data Structures and Functional Programming Cornell University Another course that uses OCaml to teach alternative programming paradigms, especially functional and concurrent programming. Lecture Slides Assignments CS 4120 Introduction to Compilers Cornell University An introduction to the specification and implementation of modern compilers. Topics covered include lexical scanning, parsing, type checking, code generation and translation, an introduction to optimization, and compile-time and run-time support for modern programming languages. As part of the course, students build a working compiler for an object-oriented language. Syllabus Lectures Assignments CS 4400 Programming Languages Northeastern University This is a course on the study, design, and implementation of programming languages. The course works at two simultaneous levels: first, we will use a programming language that can demonstrate a wide variety of programming paradigms. Second, using this language, we will learn about the mechanics behind programming languages by implementing our own language(s). The two level approach usually means that we will often see how to use a certain feature, and continue by implementing it. Syllabus Lecture Notes/Resources CS 4610 Programming Languages and Compilers University of Virginia Course that uses OCaml to teach functional programming and programming language design. Each assignment is a part of an interpreter and compiler for an object-oriented language similar to Java, and you are required to use a different language for each assignment (i.e., choose 4 from Python, JS, OCaml, Haskell, Ruby). Lecture Notes Assignments CS 5114 Network Programming Languages Cornell University This course provides an introduction to the languages used to program computer networks. It will examine recent proposals based on logic, functional, and distributed languages, as well as tools for establishing correctness using automatic solvers, model checkers, and proof assistants. Syllabus Lectures CS 5142 Scripting Languages Cornell University Perl, PHP, JavaScript, VisualBasic -- they are often-requested skills for employment, but most of us do not have the time to find out what they are all about. In this course, you learn how to use scripting languages for rapid prototyping, web programming, data processing, and application extension. Besides covering traditional programming languages concepts as they apply to scripting (e.g., dynamic typing and scoping), this course looks at new concepts rarely found in traditional languages (e.g., string interpolation, hashes, and polylingual code). Through a series of small projects, you use different languages to achieve programming tasks that highlight the strengths and weaknesses of scripting. As a side effect, you practice teaching yourself new languages. Syllabus Lectures Assignments CS 5470 Compilers University of Utah If you're a fan of Prof Matt's writing on his fantastic blog you ought to give this a shot. The course covers the design and implementation of compilers, and it explores related topics such as interpreters, virtual machines and runtime systems. Aside from the Prof's witty take on cheating the page has tons of interesting links on programming languages, parsing and compilers. Lecture Notes Projects CS 6118 Types and Semantics Cornell University Types and Semantics is about designing and understand programming languages, whether they be domain specific or general purpose. The goal of this class is to provide a variety of tools for designing custom (programming) languages for whatever task is at hand. Part of that will be a variety of insights on how languages work along with experiences from working with academics and industry on creating new languages such as Ceylon and Kotlin. The class focuses on types and semantics and the interplay between them. This means category theory and constructive type theory (e.g. Coq and richer variations) are ancillary topics of the class. The class also covers unconventional semantic domains such as classical linear type theory in order to both break students from conventional thinking and to provide powerful targets capable of formalizing thinks like networking protocols, resource-sensitive computation, and concurrency constructs. The class project is to design and formalize a (programming) language for a purpose of the student's choosing, and assignments are designed to ensure students have had a chance to practice applying the techniques learned in class before culminating these skills in the class project. Syllabus Lectures CSC 253 CPython internals: A ten-hour codewalk through the Python interpreter source code University of Rochester Nine lectures walking through the internals of CPython, the canonical Python interpreter implemented in C. They were from the Dynamic Languages and Software Development course taught in Fall 2014 at the University of Rochester. CSE 341 Programming Languages University of Washington Covers non-imperative paradigms and languages such as Ruby, Racket, and ML and the fundamentals of programming languages. Lectures and Videos Assignments and Tests CSE P 501 Compiler Construction University of Washington Teaches understanding of how a modern compiler is structured and the major algorithms that are used to translate code from high-level to machine language. The best way to do this is to actually build a working compiler, so there will be a significant project to implement one that translates programs written in a core subset of Java into executable x86 assembly language. The compilers themselves will use scanner and parser generator tools and the default implementation language is Java. Lectures Assignments, Tests, and Solutions DMFP Discrete Mathematics and Functional Programming Wheaton College A course that teaches discrete maths concepts with functional programming Lecture Videos Assignments PCPP Practical Concurrent and Parallel Programming IT University of Copenhagen In this MSc course you learn how to write correct and efficient concurrent and parallel software, primarily using Java, on standard shared-memory multicore hardware. The course covers basic mechanisms such as threads, locks and shared memory as well as more advanced mechanisms such as parallel streams for bulk data, transactional memory, message passing, and lock-free data structures with compare-and-swap. It covers concepts such as atomicity, safety, liveness and deadlock. It covers how to measure and understand performance and scalability of parallel programs. It covers tools and methods to find bugs in concurrent programs. 6.945 Adventures in Advanced Symbolic Programming MIT Taught by Gerald Sussman of SICP fame, this class deals with concepts and techniques for the design an implementation of large software systems that can be adapted to uses not anticipated by the designer. Applications include compilers, computer-algebra systems, deductive systems, and some artificial intelligence applications. Assignments : Extensive programming assignments, using MIT/GNU Scheme. Students should have significant programming experience in Scheme, Common Lisp, Haskell, CAML or other \"functional\" language. Readings CS 696 Functional Design and Programming San Diego State University Covers functional programming basis using Clojure. Topics include testing, functional programming, immutable collections and concurrency. Also includes assignments covering Clojurescript, Reagent etc. L28 Advanced Functional Programming University of Cambridge This module aims to teach students how to use the features of modern typed functional programming languages (e.g. OCaml, Haskell) to design and implement libraries and DSLs. It aims to demonstrate how such techniques can improve both correctness and efficiency. Students wishing to take the module should have some experience of a typed functional programming language and an understanding of type inference. This particular session was taught by a prominent OCaml programmer, open Source contributor & author of real world OCaml - Dr Anil Madhavapeddy.","title":"Programming Languages / Compilers"},{"location":"awesome/awesome-courses/#algorithms","text":"CS 61B Data Structures UC Berkeley In this course, you will study advanced programming techniques including data structures, encapsulation, abstract data types, interfaces, and algorithms for sorting and searching, and you will get a taste of \u201csoftware engineering\u201d\u2014the design and implementation of large programs. Full Lecture Materials Lecture of Spring 2016. This website contains full matrials including video links, labs, homeworks, projects. Very good for self-learner. Also a good start for Java. And it includes some other useful resources for Java Documentation, Data Structure Resources, Git/GitHub and Java Development Resources. Resources Labs The link to labs and projects is included in the website. Lecture Videos CS 97SI Introduction to Competitive Programming Stanford University Fantastic repository of theory and practice problems across various topics for students who are interested to participate in ACM-ICPC. Lectures and Assignments CS 224 Advanced Algorithms Harvard University CS 224 is an advanced course in algorithm design, and topics we will cover include the word RAM model, data structures, amortization, online algorithms, linear programming, semidefinite programming, approximation algorithms, hashing, randomized algorithms, fast exponential time algorithms, graph algorithms, and computational geometry. Lecture Videos ( Youtube ) Assignments CS 261 A Second Course in Algorithms Stanford University Algorithms for network optimization: max-flow, min-cost flow, matching, assignment, and min-cut problems. Introduction to linear programming. Use of LP duality for design and analysis of algorithms. Approximation algorithms for NP-complete problems such as Steiner Trees, Traveling Salesman, and scheduling problems. Randomized algorithms. Introduction to online algorithms. Lecture Notes, Videos & Assignments ( Youtube ) CS 473/573 Fundamental Algorithms Univ of Illinois, Urbana-Champaign Algorithms class covering recursion, randomization, amortization, graph algorithms, network flows and hardness. The lecture notes by Prof. Erikson are comprehensive enough to be a book by themselves. Highly recommended! Lecture Notes Labs and Exams CS 2150 Program & Data Representation University of Virginia This data structures course introduces C++, linked-lists, stacks, queues, trees, numerical representation, hash tables, priority queues, heaps, huffman coding, graphs, and x86 assembly. Lectures Assignments CS 4820 Introduction to Analysis of Algorithms Cornell University This course develops techniques used in the design and analysis of algorithms, with an emphasis on problems arising in computing applications. Example applications are drawn from systems and networks, artificial intelligence, computer vision, data mining, and computational biology. This course covers four major algorithm design techniques (greedy algorithms, divide and conquer, dynamic programming, and network flow), computability theory focusing on undecidability, computational complexity focusing on NP-completeness, and algorithmic techniques for intractable problems, including identification of structured special cases, approximation algorithms, and local search heuristics. Lectures Syllabus CSCI 104 Data Structures and Object Oriented Design University of Southern California (USC) Lectures Labs Assignments Additional Resources CSCI 135 Software Design and Analysis I CUNY Hunter College It is currently an intensive introduction to program development and problem solving. Its emphasis is on the process of designing, implementing, and evaluating small-scale programs. It is not supposed to be a C++ programming course, although much of the course is spent on the details of C++. C++ is an extremely large and complex programming language with many features that interact in unexpected ways. One does not need to know even half of the language to use it well. Lectures and Assignments CSCI 235 Software Design and Analysis II CUNY Hunter College Introduces algorithms for a few common problems such as sorting. Practically speaking, it furthers the students' programming skills with topics such as recursion, pointers, and exception handling, and provides a chance to improve software engineering skills and to give the students practical experience for more productive programming. Lectures and Assignments CSCI 335 Software Design and Analysis III CUNY Hunter College This includes the introduction of hashes, heaps, various forms of trees, and graphs. It also revisits recursion and the sorting problem from a higher perspective than was presented in the prequels. On top of this, it is intended to introduce methods of algorithmic analysis. Lectures and Assignments CSE 331 Software Design and Implementation University of Washington Explores concepts and techniques for design and construction of reliable and maintainable software systems in modern high-level languages; program structure and design; program-correctness approaches, including testing. Lectures, Assignments, and Exams CSE 373 Analysis of Algorithms Stony Brook University Prof Steven Skiena's no stranger to any student when it comes to algorithms. His seminal book has been touted by many to be best for getting that job in Google . In addition, he's also well-known for tutoring students in competitive programming competitions . If you're looking to brush up your knowledge on Algorithms, you can't go wrong with this course. Lecture Videos ECS 122A Algorithm Design and Analysis UC Davis Taught by Dan Gusfield in 2010, this course is an undergraduate introduction to algorithm design and analysis. It features traditional topics, such as Big Oh notation, as well as an importance on implementing specific algorithms. Also featured are sorting (in linear time), graph algorithms, depth-first search, string matching, dynamic programming, NP-completeness, approximation, and randomization. Syllabus Lecture Videos Assignments ECS 222A Graduate Level Algorithm Design and Analysis UC Davis This is the graduate level complement to the ECS 122A undergraduate algorithms course by Dan Gusfield in 2011. It assumes an undergrad course has already been taken in algorithms, and, while going over some undergraduate algorithms topics, focuses more on increasingly complex and advanced algorithms. Lecture Videos Syllabus Assignments 6.INT Hacking a Google Interview MIT This course taught in the MIT Independent Activities Period in 2009 goes over common solution to common interview questions for software engineer interviews at highly selective companies like Apple, Google, and Facebook. They cover time complexity, hash tables, binary search trees, and other common algorithm topics you should have already covered in a different course, but goes more in depth on things you wouldn't otherwise learn in class- like bitwise logic and problem solving tricks. Handouts Topics Covered 6.006 Introduction to Algorithms MIT This course provides an introduction to mathematical modeling of computational problems. It covers the common algorithms, algorithmic paradigms, and data structures used to solve these problems. The course emphasizes the relationship between algorithms and programming, and introduces basic performance measures and analysis techniques for these problems. Lecture Videos Assignments Readings Resources Old Exams 6.046J/18.410J Design and Analysis of Algorithms MIT This is an intermediate algorithms course with an emphasis on teaching techniques for the design and analysis of efficient algorithms, emphasizing methods of application. Topics include divide-and-conquer, randomization, dynamic programming, greedy algorithms, incremental improvement, complexity, and cryptography. This course assumes that students know how to analyze simple algorithms and data structures from having taken 6.006 . It introduces students to the design of computer algorithms, as well as analysis of sophisticated algorithms. Lecture Videos Lecture Notes Assignments Resources Old Exams 6.851 Advanced Data Structures MIT This is an advanced DS course, you must be done with the Advanced Algorithms course before attempting this one. Lectures Contains videos from sp2012 version, but there isn't much difference. Assignments contains the calendar as well. 6.854/18.415J Advanced Algorithms MIT Advanced course in algorithms by Dr. David Karger covering topics such as amortization, randomization, fingerprinting, word-level parallelism, bit scaling, dynamic programming, network flow, linear programming, fixed-parameter algorithms, and approximation algorithms. Register on NB to access the problem set and lectures . 6.854J/18.415J Advanced Algorithms MIT This course is a first-year graduate course in algorithms. Emphasis is placed on fundamental algorithms and advanced methods of algorithmic design, analysis, and implementation. Techniques to be covered include amortization, randomization, fingerprinting, word-level parallelism, bit scaling, dynamic programming, network flow, linear programming, fixed-parameter algorithms, and approximation algorithms. Domains include string algorithms, network optimization, parallel algorithms, computational geometry, online algorithms, external memory, cache, and streaming algorithms, and data structures. The need for efficient algorithms arises in nearly every area of computer science. But the type of problem to be solved, the notion of what algorithms are \"efficient,'' and even the model of computation can vary widely from area to area. In this second class in algorithms, we will survey many of the techniques that apply broadly in the design of efficient algorithms, and study their application in a wide range of application domains and computational models. The goal is for the class to be broad rather than deep. Our plan is to touch upon the following areas. This is a tentative list of topics that might be covered in the class; we will select material adaptively based on the background, interests, and rate of progress of the students. Lecture Videos - Spring 2016 Lecture Notes Assignments Readings Resources 15-451/651 Algorithms Carnegie Mellon University The required algorithms class that go in depth into all basic algorithms and the proofs behind them. This is one of the heavier algorithms curriculums on this page. Taught by Avrim Blum and Manuel Blum who has a Turing Award due to his contributions to algorithms. Course link includes a very comprehensive set of reference notes by Avrim Blum. 16s-4102 Algorithms University of Virginia Lecture Videos & Homeworks ( Youtube )","title":"Algorithms"},{"location":"awesome/awesome-courses/#cs-theory","text":"CIS 500 Software Foundations University of Pennsylvania An introduction to formal verification of software using the Coq proof assistant. Topics include basic concepts of logic, computer-assisted theorem proving, functional programming, operational semantics, Hoare logic, and static type systems. Lectures and Assignments Textbook CS 103 Mathematical Foundations of Computing Stanford University CS103 is a first course in discrete math, computability theory, and complexity theory. In this course, we'll probe the limits of computer power, explore why some problems are harder to solve than others, and see how to reason with mathematical certainty. Links to all lectures notes and assignments are directly on the course page CS 173 Discrete Structures Univ of Illinois Urbana-Champaign This course is an introduction to the theoretical side of computer science. In it, you will learn how to construct proofs, read and write literate formal mathematics, get a quick introduction to key theory topics and become familiar with a range of standard mathematics concepts commonly used in computer science. Textbook Written by the professor. Includes Instructor's Guide. Assignments Exams CS 276 Foundations of Cryptography UC Berkeley This course discusses the complexity-theory foundations of modern cryptography, and looks at recent results in the field such as Fully Homomorphic Encryption, Indistinguishability Obfuscation, MPC and so on. CS 278 Complexity Theory UC Berkeley A graduate level course on complexity theory that introduces P vs NP, the power of randomness, average-case complexity, hardness of approximation, and so on. CS 374 Algorithms & Models of Computation (Fall 2014) University of Illinois Urbana-Champaign CS 498 section 374 (unofficially \"CS 374\") covers fundamental tools and techniques from theoretical computer science, including design and analysis of algorithms, formal languages and automata, computability, and complexity. Specific topics include regular and context-free languages, finite-state automata, recursive algorithms (including divide and conquer, backtracking, dynamic programming, and greedy algorithms), fundamental graph algorithms (including depth- and breadth-first search, topological sorting, minimum spanning trees, and shortest paths), undecidability, and NP-completeness. The course also has a strong focus on clear technical communication. Assignments/Exams Lecture Notes/Labs Lecture videos CS 3110 Data Structures and Functional Programming Cornell University CS 3110 (formerly CS 312) is the third programming course in the Computer Science curriculum, following CS 1110/1112 and CS 2110. The goal of the course is to help students become excellent programmers and software designers who can design and implement software that is elegant, efficient, and correct, and whose code can be maintained and reused. Syllabus Lectures Assignments CS 3220 Introduction to Scientific Computing Cornell University In this one-semester survey course, we introduce numerical methods for solving linear and nonlinear equations, interpolating data, computing integrals, and solving differential equations, and we describe how to use these tools wisely (we hope!) when solving scientific problems. Syllabus Lectures Assignments CS 4300 Information Retrieval Cornell University Studies the methods used to search for and discover information in large-scale systems. The emphasis is on information retrieval applied to textual materials, but there is some discussion of other formats.The course includes techniques for searching, browsing, and filtering information and the use of classification systems and thesauruses. The techniques are illustrated with examples from web searching and digital libraries. Syllabus Lectures Assignments CS 4810 Introduction to Theory of Computing Cornell University This undergraduate course provides a broad introduction to the mathematical foundations of computer science. We will examine basic computational models, especially Turing machines. The goal is to understand what problems can or cannot be solved in these models. Syllabus Lectures Assignments CS 6810 Theory of Computing Cornell University This graduate course gives a broad introduction to complexity theory, including classical results and recent developments. Complexity theory aims to understand the power of efficient computation (when computational resources like time and space are limited). Many compelling conceptual questions arise in this context. Most of these questions are (surprisingly?) difficult and far from being resolved. Nevertheless, a lot of progress has been made toward understanding them (and also why they are difficult). We will learn about these advances in this course. A theme will be combinatorial constructions with random-like properties, e.g., expander graphs and error-correcting codes. Some examples: Is finding a solution inherently more difficult than verifying it? Do more computational resources mean more computing power? Is it easier to find approximate solutions than exact ones? Are randomized algorithms more powerful than deterministic ones? Is it easier to solve problems in the average case than in the worst case? Are quantum computers more powerful than classical ones? Syllabus Lectures Assignments CSCE 3193 Programming Paradigms University of Arkansas (Fayetteville) Programming in different paradigms with emphasis on object oriented programming, network programming and functional programming. Survey of programming languages, event driven programming, concurrency, software validation. Syllabus Notes Assignments Practice Exams 6.045 Great Ideas in Theoretical Computer Science MIT This course provides a challenging introduction to some of the central ideas of theoretical computer science. Beginning in antiquity, the course will progress through finite automata, circuits and decision trees, Turing machines and computability, efficient algorithms and reducibility, the P versus NP problem, NP-completeness, the power of randomness, cryptography and one-way functions, computational learning theory, and quantum computing. It examines the classes of problems that can and cannot be solved by various kinds of machines. It tries to explain the key differences between computational models that affect their power. Syllabus Lecture Notes Lecture Videos","title":"CS Theory"},{"location":"awesome/awesome-courses/#introduction-to-cs","text":"CS 10 The Beauty and Joy of Computing UC Berkeley CS10 is UCB's introductory computer science class, taught using the beginners' drag-and-drop language. Students learn about history, social implications, great principles, and future of computing. They also learn the joy of programming a computer using a friendly, graphical language, and will complete a substantial team programming project related to their interests. Snap ! (based on Scratch by MIT). Curriculum CS 50 Introduction to Computer Science Harvard University CS50x is Harvard College's introduction to the intellectual enterprises of computer science and the art of programming for majors and non-majors alike, with or without prior programming experience. An entry-level course taught by David J. Malan. Lectures Problem Sets The course can also be taken from edX . The course's OpenCourseware resides here CS 61A Structure and Interpretation of Computer Programs [Python] UC Berkeley In CS 61A, we are interested in teaching you about programming, not about how to use one particular programming language. We consider a series of techniques for controlling program complexity, such as functional programming, data abstraction, and object-oriented programming. Mastery of a particular programming language is a very useful side effect of studying these general techniques. However, our hope is that once you have learned the essence of programming, you will find that picking up a new programming language is but a few days' work. Lecture Resources by Type Lecture Resources by Topic Additional Resources Practice Problems Extra Lectures CS 61AS Structure & Interpretation of Computer Programs [Racket] UC Berkeley A self-paced version of the CS61 Course but in Racket / Scheme. 61AS is a great introductory course that will ease you into all the amazing concepts that future CS courses will cover, so remember to keep an open mind, have fun, and always respect the data abstraction Lecture Videos Assignments and Notes CS 101 Computer Science 101 Stanford University CS101 teaches the essential ideas of Computer Science for a zero-prior-experience audience. Participants play and experiment with short bits of \"computer code\" to bring to life to the power and limitations of computers. Lectures videos will available for free after registration. CS 106A Programming Methodology Stanford University This course is the largest of the introductory programming courses and is one of the largest courses at Stanford. Topics focus on the introduction to the engineering of computer applications emphasizing modern software engineering principles: object-oriented design, decomposition, encapsulation, abstraction, and testing. Programming Methodology teaches the widely-used Java programming language along with good software engineering principles. Lecture Videos Assignments All materials in a zip file CS 106B Programming Abstractions Stanford University This course is the natural successor to Programming Methodology and covers such advanced programming topics as recursion, algorithmic analysis, and data abstraction using the C++ programming language, which is similar to both C and Java. Lectures Assignments All materials in a zip file CS 107 Programming Paradigms Stanford University Topics: Advanced memory management features of C and C++; the differences between imperative and object-oriented paradigms. The functional paradigm (using LISP) and concurrent programming (using C and C++) Lectures Assignments CS 109 Programming Practice Using Scala KAIST This course introduces basic concepts of programming and computer science, such as dynamic and static typing, dynamic memory allocation, objects and methods, binary representation of numbers, using an editor and compiler from the command line, running programs with arguments from the command line, using libraries, and the use of basic data structures such as arrays, lists, sets, and maps. We will use Scala for this course. [Lectures] (http://otfried.org/courses/cs109/index.html) [Assignments] (http://otfried.org/courses/cs109/index.html) CS 1109 Fundamental Programming Concepts Cornell University This course provides an introduction to programming and problem solving using a high-level programming language. It is designed to increase your knowledge level to comfortably continue to courses CS111x. Our focus will be on generic programming concepts: variables, expressions, control structures, loops, arrays, functions, pseudocode and algorithms. You will learn how to analyze problems and convert your ideas into solutions interpretable by computers. We will use MATLAB; because it provides a productive environment, and it is widely used by all engineering communities. Syllabus Lectures Assignments CS 1110 Introduction to Computing Using Python Cornell University Programming and problem solving using Python. Emphasizes principles of software development, style, and testing. Topics include procedures and functions, iteration, recursion, arrays and vectors, strings, an operational model of procedure and function calls, algorithms, exceptions, object-oriented programming, and GUIs (graphical user interfaces). Weekly labs provide guided practice on the computer, with staff present to help. Assignments use graphics and GUIs to help develop fluency and understanding. Syllabus Lectures Assignments CS 1112 Introduction to Computing Using Matlab Cornell University Programming and problem solving using MATLAB. Emphasizes the systematic development of algorithms and programs. Topics include iteration, functions, arrays and vectors, strings, recursion, algorithms, object-oriented programming, and MATLAB graphics. Assignments are designed to build an appreciation for complexity, dimension, fuzzy data, inexact arithmetic, randomness, simulation, and the role of approximation. NO programming experience is necessary; some knowledge of Calculus is required. Syllabus Lectures Assignments Projects CS 1115 Introduction to Computational Science and Engineering Using Matlab Graphical User Interfaces Cornell University Programming and problem solving using MATLAB. Emphasizes the systematic development of algorithms and programs. Topics include iteration, functions, arrays and vectors, strings, recursion, algorithms, object-oriented programming, and MATLAB graphics. Assignments are designed to build an appreciation for complexity, dimension, fuzzy data, inexact arithmetic, randomness, simulation, and the role of approximation. NO programming experience is necessary; some knowledge of Calculus is required. Syllabus Lectures Projects CS 1130 Transition to OO Programming Cornell University Introduction to object-oriented concepts using Java. Assumes programming knowledge in a language like MATLAB, C, C++, or Fortran. Students who have learned Java but were not exposed heavily to OO programming are welcome. Syllabus Lectures Assignments CS 1133 Transition to Python Cornell University Introduction to the Python programming language. Covers the basic programming constructs of Python, including assignment, conditionals, iteration, functions, object-oriented design, arrays, and vectorized computation. Assumes programming knowledge in a language like Java, Matlab, C, C++, or Fortran. Syllabus Lectures Assignments CS 1410-2 and CS2420-20 Computer Science I and II for Hackers University of Utah An intro course in the spirit of SICP designed by Professor Matthew Flatt (one of the lead designers of Racket and author of HtDP). Mostly Racket and C, and a bit of Java, with explanations on how high level functional programming concepts relate to the design of OOP programs. Do this one before SICP if SICP is a bit too much... Lectures and Assignments 1 Lectures and Assignments 2 Textbook Racket Language CS 2110 Object-Oriented Programming and Data Structures Cornell University CS 2110 is an intermediate-level programming course and an introduction to computer science. Topics include program design and development, debugging and testing, object-oriented programming, proofs of correctness, complexity analysis, recursion, commonly used data structures, graph algorithms, and abstract data types. Java is the principal programming language. The course syllabus can easily be extracted by looking at the link to lectures . Syllabus Lectures Assignments CS 4302 Web Information Systems Cornell University This course will introduce you to technologies for building data-centric information systems on the World Wide Web, show the practical applications of such systems, and discuss their design and their social and policy context by examining cross-cutting issues such as citizen science, data journalism and open government. Course work involves lectures and readings as well as weekly homework assignments, and a semester-long project in which the students demonstrate their expertise in building data-centric Web information systems. Syllabus Lectures Assignments CSCE 2004 Programming Foundations I University of Arkansas (Fayetteville) Introductory course for students majoring in computer science or computer engineering. Software development process: problem specification, program design, implementation, testing and documentation. Programming topics: data representation, conditional and iterative statements, functions, arrays, strings, file I/O, and classes. Using C++ in a UNIX environment. Syllabus Notes Assignments Practice Exams CSCI E-1 Understanding Computers and the Internet Harvard University Extension College This course is all about understanding: understanding what's going on inside your computer when you flip on the switch, why tech support has you constantly rebooting your computer, how everything you do on the Internet can be watched by others, and how your computer can become infected with a worm just by being turned on. Designed for students who use computers and the Internet every day but don't fully understand how it all works, this course fills in the gaps. Through lectures on hardware, software, the Internet, multimedia, security, privacy, website development, programming, and more, this course \"takes the hood off\" of computers and the Internet so that students understand how it all works and why. Through discussions of current events, students are exposed also to the latest technologies. Lecture Videos Syllabus Notes / Recaps Assignments CS-for-all CS for All Harvey Mudd College This book (and course) takes a unique approach to \u201cIntro CS.\u201d In a nutshell, our objective is to provide an introduction to computer science as an intellectually rich and vibrant field rather than focusing exclusively on computer programming. While programming is certainly an important and pervasive element of our approach, we emphasize concepts and problem-solving over syntax and programming language features. Lectures and Other resources 6.001 Structure and Interpretation of Computer Programs MIT Teaches big-picture computing concepts using the Scheme programming language. Students will implement programs in a variety of different programming paradigms (functional, object-oriented, logical). Heavy emphasis on function composition, code-as-data, control abstraction with continuations, and syntactic abstraction through macros. An excellent course if you are looking to build a mental framework on which to hang your programming knowledge. Lectures Textbook ( epub , pdf ) IDE 6.005 Software Construction, Fall 2016 MIT This course introduces fundamental principles and techniques of software development. Students learn how to write software that is safe from bugs, easy to understand, and ready for change. Topics include specifications and invariants; testing, test-case generation, and coverage; state machines; abstract data types and representation independence; design patterns for object-oriented programming; concurrent programming, including message passing and shared concurrency, and defending against races and deadlock; and functional programming with immutable data and higher-order functions. Lectures Notes/Assignments","title":"Introduction to CS"},{"location":"awesome/awesome-courses/#machine-learning","text":"DEEPNLP Deep Learning for Natural Language Processing University of Oxford This is an applied course focussing on recent advances in analysing and generating speech and text using recurrent neural networks. We introduce the mathematical definitions of the relevant machine learning models and derive their associated optimisation algorithms. The course covers a range of applications of neural networks in NLP including analysing latent dimensions in text, transcribing speech to text, translating between languages, and answering questions. This course is organised by Phil Blunsom and delivered in partnership with the DeepMind Natural Language Research Group . Lectures Assignments are available on the organisation page titled as \"practicals\" CS20si Tensorflow for Deep Learning Research Stanford University This course will cover the fundamentals and contemporary usage of the Tensorflow library for deep learning research. We aim to help students understand the graphical computational model of Tensorflow, explore the functions it has to offer, and learn how to build and structure models best suited for a deep learning project. Through the course, students will use Tensorflow to build models of different complexity, from simple linear/logistic regression to convolutional neural network and recurrent neural networks with LSTM to solve tasks such as word embeddings, translation, optical character recognition. Students will also learn best practices to structure a model and manage research experiments. Assignments available on Github. COMS 4771 Machine Learning Columbia University Course taught by Tony Jebara introduces topics in Machine Learning for both generative and discriminative estimation. Material will include least squares methods, Gaussian distributions, linear classification, linear regression, maximum likelihood, exponential family distributions, Bayesian networks, Bayesian inference, mixture models, the EM algorithm, graphical models, hidden Markov models, support vector machines, and kernel methods. Lectures and Assignments CS 109 Data Science Harvard University Learning from data in order to gain useful predictions and insights. This course introduces methods for five key facets of an investigation: data wrangling, cleaning, and sampling to get a suitable data set; data management to be able to access big data quickly and reliably; exploratory data analysis to generate hypotheses and intuition; prediction based on statistical methods such as regression and classification; and communication of results through visualization, stories, and interpretable summaries. Lectures Slides Labs and Assignments 2014 Lectures 2013 Lectures (slightly better) CS 156 Learning from Data Caltech This is an introductory course in machine learning (ML) that covers the basic theory, algorithms, and applications. ML is a key technology in Big Data, and in many financial, medical, commercial, and scientific applications. It enables computational systems to adaptively improve their performance with experience accumulated from the observed data. ML has become one of the hottest fields of study today, taken up by undergraduate and graduate students from 15 different majors at Caltech. This course balances theory and practice, and covers the mathematical as well as the heuristic aspects. Lectures Homework Textbook CS 189 Introduction To Machine Learning UC Berkeley Introductory ML course covering a wide range of topics: ranging from least squares to convolutional neural networks Notes Homework CS 224d Deep Learning for Natural Language Processing Stanford University Natural language processing (NLP) is one of the most important technologies of the information age. Understanding complex language utterances is also a crucial part of artificial intelligence. Applications of NLP are everywhere because people communicate most everything in language: web search, advertisement, emails, customer service, language translation, radiology reports, etc. There are a large variety of underlying tasks and machine learning models powering NLP applications. Recently, deep learning approaches have obtained very high performance across many different NLP tasks. These models can often be trained with a single end-to-end model and do not require traditional, task-specific feature engineering. In this spring quarter course students will learn to implement, train, debug, visualize and invent their own neural network models. The course provides a deep excursion into cutting-edge research in deep learning applied to NLP. Syllabus Lectures and Assignments CS 229r Algorithms for Big Data Harvard University Big data is data so large that it does not fit in the main memory of a single machine, and the need to process big data by efficient algorithms arises in Internet search, network traffic monitoring, machine learning, scientific computing, signal processing, and several other areas. This course will cover mathematically rigorous models for developing such algorithms, as well as some provable limitations of algorithms operating in those models. Lectures ( Youtube ) Assignments CS 231n Convolutional Neural Networks for Visual Recognition Stanford University Computer Vision has become ubiquitous in our society, with applications in search, image understanding, apps, mapping, medicine, drones, and self-driving cars. This course is a deep dive into details of the deep learning architectures with a focus on learning end-to-end models for these tasks, particularly image classification. During the 10-week course, students will learn to implement, train and debug their own neural networks and gain a detailed understanding of cutting-edge research in computer vision. Lecture Notes Lecture Videos Github Page CS 287 Advanced Robotics UC Berkeley The course introduces the math and algorithms underneath state-of-the-art robotic systems. The majority of these techniques are heavily based on probabilistic reasoning and optimization---two areas with wide applicability in modern Artificial Intelligence. An intended side-effect of the course is to generally strengthen your expertise in these two areas. Lectures Notes Assignments CS 395T Statistical and Discrete Methods for Scientific Computing University of Texas Practical course in applying modern statistical techniques to real data, particularly bioinformatic data and large data sets. The emphasis is on efficient computation and concise coding, mostly in MATLAB and C++. Topics covered include probability theory and Bayesian inference; univariate distributions; Central Limit Theorem; generation of random deviates; tail (p-value) tests; multiple hypothesis correction; empirical distributions; model fitting; error estimation; contingency tables; multivariate normal distributions; phylogenetic clustering; Gaussian mixture models; EM methods; maximum likelihood estimation; Markov Chain Monte Carlo; principal component analysis; dynamic programming; hidden Markov models; performance measures for classifiers; support vector machines; Wiener filtering; wavelets; multidimensional interpolation; information theory. Lectures and Assignments CS 4780 Machine Learning Cornell University This course will introduce you to technologies for building data-centric information systems on the World Wide Web, show the practical applications of such systems, and discuss their design and their social and policy context by examining cross-cutting issues such as citizen science, data journalism and open government. Course work involves lectures and readings as well as weekly homework assignments, and a semester-long project in which the students demonstrate their expertise in building data-centric Web information systems. Syllabus Lectures CS 4786 Machine Learning for Data Science Cornell University An introductory course in machine learning, with a focus on data modeling and related methods and learning algorithms for data sciences. Tentative topic list: Dimensionality reduction, such as principal component analysis (PCA) and the singular value decomposition (SVD), canonical correlation analysis (CCA), independent component analysis (ICA), compressed sensing, random projection, the information bottleneck. (We expect to cover some, but probably not all, of these topics). Clustering, such as k-means, Gaussian mixture models, the expectation-maximization (EM) algorithm, link-based clustering. (We do not expect to cover hierarchical or spectral clustering.). Probabilistic-modeling topics such as graphical models, latent-variable models, inference (e.g., belief propagation), parameter learning. Regression will be covered if time permits. Assignments Lectures CVX 101 Convex Optimization Stanford University The course concentrates on recognizing and solving convex optimization problems that arise in applications. Topics addressed include the following. Convex sets, functions, and optimization problems. Basics of convex analysis. Least-squares, linear and quadratic programs, semidefinite programming, minimax, extremal volume, and other problems. Optimality conditions, duality theory, theorems of alternative, and applications. Interior-point methods. Applications to signal processing, statistics and machine learning, control and mechanical engineering, digital and analog circuit design, and finance. Textbook Lectures and Assignments DS-GA 1008 Deep Learning New York University This increasingly popular course is taught through the Data Science Center at NYU. Originally introduced by Yann Lecun , it is now led by Zaid Harchaoui , although Prof. Lecun is rumored to still stop by from time to time. It covers the theory, technique, and tricks that are used to achieve very high accuracy for machine learning tasks in computer vision and natural language processing. The assignments are in Lua and hosted on Kaggle. Course Page Recorded Lectures EECS E6893 & EECS E6895 Big Data Analytics & Advanced Big Data Analytics Columbia University Students will gain knowledge on analyzing Big Data. It serves as an introductory course for graduate students who are expecting to face Big Data storage, processing, analysis, visualization, and application issues on both workplaces and research environments. Taught by Dr. Ching-Yung Lin Course Site Assignments - Assignments are present in the Course Slides EECS E6894 Deep Learning for Computer Vision and Natural Language Processing Columbia University This graduate level research class focuses on deep learning techniques for vision and natural language processing problems. It gives an overview of the various deep learning models and techniques, and surveys recent advances in the related fields. This course uses Theano as the main programming tool. GPU programming experiences are preferred although not required. Frequent paper presentations and a heavy programming workload are expected. Readings Assignments Lecture Notes EE103 Introduction to Matrix Methods Stanford University The course covers the basics of matrices and vectors, solving linear equations, least-squares methods, and many applications. It'll cover the mathematics, but the focus will be on using matrix methods in applications such as tomography, image processing, data fitting, time series prediction, finance, and many others. EE103 is based on a book that Stephen Boyd and Lieven Vandenberghe are currently writing. Students will use a new language called Julia to do computations with matrices and vectors. Lectures Book Assignments Code Fast.ai Introduction to Machine Learning for Coders Fast.ai / University of San Francisco There are around 24 hours of lessons, and you should plan to spend around 8 hours a week for 12 weeks to complete the material. The course is based on lessons recorded at the University of San Francisco for the Masters of Science in Data Science program. We assume that you have at least one year of coding experience, and either remember what you learned in high school math, or are prepared to do some independent study to refresh your knowledge. Lecture Videos Lecture Notes Jupyter Notebooks Info 290 Analyzing Big Data with Twitter UC Berkeley school of information In this course, UC Berkeley professors and Twitter engineers provide lectures on the most cutting-edge algorithms and software tools for data analytics as applied to Twitter's data. Topics include applied natural language processing algorithms such as sentiment analysis, large scale anomaly detection, real-time search, information diffusion and outbreak detection, trend detection in social streams, recommendation algorithms, and advanced frameworks for distributed computing. Lecture Videos Previous Years coursepage Machine Learning: 2014-2015 University of Oxford The course focusses on neural networks and uses the Torch deep learning library (implemented in Lua) for exercises and assignments. Topics include: logistic regression, back-propagation, convolutional neural networks, max-margin learning, siamese networks, recurrent neural networks, LSTMs, hand-writing with recurrent neural networks, variational autoencoders and image generation and reinforcement learning Lectures and Assignments Source code StatLearning Intro to Statistical Learning Stanford University This is an introductory-level course in supervised learning, with a focus on regression and classification methods. The syllabus includes: linear and polynomial regression, logistic regression and linear discriminant analysis; cross-validation and the bootstrap, model selection and regularization methods (ridge and lasso); nonlinear models, splines and generalized additive models; tree-based methods, random forests and boosting; support-vector machines. The lectures cover all the material in An Introduction to Statistical Learning, with Applications in R which is a more approachable version of the Elements of Statistical Learning (or ESL) book. 10-601 Machine Learning Carnegie Mellon University This course covers the theory and practical algorithms for machine learning from a variety of perspectives. It covers topics such as Bayesian networks, decision tree learning, Support Vector Machines, statistical learning methods, unsupervised learning and reinforcement learning. The course covers theoretical concepts such as inductive bias, the PAC learning framework, Bayesian learning methods, margin-based learning, and Occam's Razor. Short programming assignments include hands-on experiments with various learning algorithms. This course is designed to give a graduate-level student a thorough grounding in the methodologies, technologies, mathematics and algorithms currently needed by people who do research in machine learning. Taught by one of the leading experts on Machine Learning - Tom Mitchell Lectures Project Ideas and Datasets 10-708 Probabilistic Graphical Models Carnegie Mellon University Many of the problems in artificial intelligence, statistics, computer systems, computer vision, natural language processing, and computational biology, among many other fields, can be viewed as the search for a coherent global conclusion from local information. The probabilistic graphical models framework provides a unified view for this wide range of problems, enabling efficient inference, decision-making and learning in problems with a very large number of attributes and huge datasets. This graduate-level course will provide you with a strong foundation for both applying graphical models to complex problems and for addressing core research topics in graphical models. Lecture Videos Assignments Lecture notes Readings 11-785 Deep Learning Carnegie Mellon University The course presents the subject through a series of seminars and labs, which will explore it from its early beginnings, and work themselves to some of the state of the art. The seminars will cover the basics of deep learning and the underlying theory, as well as the breadth of application areas to which it has been applied, as well as the latest issues on learning from very large amounts of data. We will concentrate largely, although not entirely, on the connectionist architectures that are most commonly associated with it. Lectures and Reading Notes are available on the page. CS246 Mining Massive Data Sets Stanford University The course will discuss data mining and machine learning algorithms for analyzing very large amounts of data. The emphasis will be on Map Reduce as a tool for creating parallel algorithms that can process very large amounts of data. Lecture Videos Assignments Lecture notes Readings CS276 Information Retrieval and Web Search Stanford University Basic and advanced techniques for text-based information systems: efficient text indexing; Boolean and vector space retrieval models; evaluation and interface issues; Web search including crawling, link-based algorithms, and Web metadata; text/Web clustering, classification; text mining. Lecture notes Readings Practical_RL Reinforcement Learning in the Wild Yandex SDA A course on reinforcement learning in the wild. Taught on-campus in HSE and Yandex SDA (russian) and maintained to be friendly to online students (both english and russian). Syllabus UvA DEEP LEARNING UvA Deep Learning Course University of Amsterdam This course is taught in the MSc program in Artificial Intelligence of the University of Amsterdam. In this course we study the theory of deep learning, namely of modern, multi-layered neural networks trained on big data. The course focuses particularly on computer vision and language modelling, which are perhaps two of the most recognizable and impressive applications of the deep learning theory. Lecture Videos & Notes Practicals Readings","title":"Machine Learning"},{"location":"awesome/awesome-courses/#security","text":"CIS 4930 / CIS 5930 Offensive Computer Security Florida State University Course taught by W. Owen Redwood and Xiuwen Liu . It covers a wide range of computer security topics, starting from Secure C Coding and Reverse Engineering to Penetration Testing, Exploitation and Web Application Hacking, both from the defensive and the offensive point of view. Lectures and Videos Assignments CS 155 Computer and Network Security Stanford Principles of computer systems security. Attack techniques and how to defend against them. Topics include: network attacks and defenses, operating system holes, application security (web, email, databases), viruses, social engineering attacks, privacy, and digital rights management. Course projects focus on building reliable code. Recommended: Basic Unix. Primarily intended for seniors and first-year graduate students. CS 161 Computer Security UC Berkeley Introduction to computer security. Cryptography, including encryption, authentication, hash functions, cryptographic protocols, and applications. Operating system security, access control. Network security, firewalls, viruses, and worms. Software security, defensive programming, and language-based security. Case studies from real-world systems. CS 259 Security Modeling and Analysis Stanford The course will cover a variety of contemporary network protocols and other systems with security properties. The course goal is to give students hands-on experience in using automated tools and related techniques to analyze and evaluate security mechanisms. To understand security properties and requirements, we will look at several network protocols and their properties, including secrecy, authentication, key establishment, and fairness. In parallel, the course will look at several models and tools used in security analysis and examine their advantages and limitations. In addition to fully automated finite-state model checking techniques, we will also study other approaches, such as constraint solving, process algebras, protocol logics, probabilistic model checking, game theory, and executable models based on logic programming. CS 261 Internet/Network Security UC Berkeley This class aims to provide a thorough grounding in network security suitable for those interested in conducting research in the area, as well as students more generally interested in either security or networking. We will also look at broader issues relating to Internet security for which networking plays a role. Topics include: denial-of-service; capabilities; network intrusion detection; worms; forensics; scanning; traffic analysis / inferring activity; architecture; protocol issues; legality and ethics; web attacks; anonymity; honeypots; botnets; spam; the underground economy; research pitfalls. The course is taught with an emphasis on seminal papers rather than bleeding-edge for a given topic. CS 5430 System Security Cornell University This course discusses security for computers and networked information systems. We focus on abstractions, principles, and defenses for implementing military as well as commercial-grade secure systems. Syllabus Lectures Assignments CSCI 4968 Modern Binary Exploitation Rensselaer Polytechnic Institute This repository contains the materials as developed and used by RPISEC to teach Modern Binary Exploitation at Rensselaer Polytechnic Institute in Spring 2015. This was a university course developed and run solely by students to teach skills in vulnerability research, reverse engineering, and binary exploitation. Lectures Notes Labs Projects CSCI 4976 Malware Analysis Rensselaer Polytechnic Institute This repository contains the materials as developed and used by RPISEC to teach Malware Analysis at Rensselaer Polytechnic Institute in Fall 2015. This was a university course developed and run solely by students, primarily using the EECS 588 Computer & Network Security University of Michigan Taught by J. Alex Halderman who has analyzed the security of Electronic Voting Machines in the US and over seas . This intensive research seminar covers foundational work and current topics in computer systems security. Readings Practical Malware Analysis book by Michael Sikorski and Andrew Honig, to teach skills in reverse engineering, malicious behaviour, malware, and anti-analysis techniques. Lectures Notes Labs Projects 6.857 Computer and Network Security MIT Emphasis on applied cryptography and may include: basic notion of systems security, cryptographic hash functions, symmetric cryptography (one-time pad, stream ciphers, block ciphers), cryptanalysis, secret-sharing, authentication codes, public-key cryptography (encryption, digital signatures), public-key attacks, web browser security, biometrics, electronic cash, viruses, electronic voting, Assignments include a group final project. Topics may vary year to year. Lecture Notes References 6.858 Computer Systems Security MIT Design and implementation of secure computer systems. Lectures cover threat models, attacks that compromise security, and techniques for achieving security, based on recent research papers. Topics include operating system (OS) security, capabilities, information flow control, language security, network protocols, hardware security, and security in web applications. Taught by James Mickens and Nickolai Zeldovich Video Lectures and Labs Quizzes Readings Final Projects 18-636 Browser Security Stanford The Web continues to grow in popularity as platform for retail transactions, financial services, and rapidly evolving forms of communication. It is becoming an increasingly attractive target for attackers who wish to compromise users' systems or steal data from other sites. Browser vendors must stay ahead of these attacks by providing features that support secure web applications. This course will study vulnerabilities in existing web browsers and the applications they render, as well as new technologies that enable web applications that were never before possible. The material will be largely based on current research problems, and students will be expected to criticize and improve existing defenses. Topics of study include (but are not limited to) browser encryption, JavaScript security, plug-in security, sandboxing, web mashups, and authentication.","title":"Security"},{"location":"awesome/awesome-courses/#artificial-intelligence","text":"CS 188 Introduction to Artificial Intelligence UC Berkeley This course will introduce the basic ideas and techniques underlying the design of intelligent computer systems. A specific emphasis will be on the statistical and decision-theoretic modeling paradigm. By the end of this course, you will have built autonomous agents that efficiently make decisions in fully informed, partially observable and adversarial settings. Your agents will draw inferences in uncertain environments and optimize actions for arbitrary reward structures. Your machine learning algorithms will classify handwritten digits and photographs. The techniques you learn in this course apply to a wide variety of artificial intelligence problems and will serve as the foundation for further study in any application area you choose to pursue. Lectures Projects Exams CS 4700 Foundations of Artificial Intelligence Cornell University This course will provide an introduction to computer vision, with topics including image formation, feature detection, motion estimation, image mosaics, 3D shape reconstruction, and object and face detection and recognition. Applications of these techniques include building 3D maps, creating virtual characters, organizing photo and video databases, human computer interaction, video surveillance, automatic vehicle navigation, and mobile computer vision. This is a project-based course, in which you will implement several computer vision algorithms throughout the semester. Assignments Lectures CS 6700 Advanced Artificial Intelligence Cornell University The design of systems that are among top 10 performers in the world (human, computer, or hybrid human-computer). Syllabus Lectures Readings 6.868J The Society of Mind MIT This course is an introduction, by Prof. Marvin Minsky , to the theory that tries to explain how minds are made from collections of simpler processes. It treats such aspects of thinking as vision, language, learning, reasoning, memory, consciousness, ideals, emotions, and personality. It incorporates ideas from psychology, artificial intelligence, and computer science to resolve theoretical issues such as wholes vs. parts, structural vs. functional descriptions, declarative vs. procedural representations, symbolic vs. connectionist models, and logical vs. common-sense theories of learning. Lectures Assignments Readings","title":"Artificial Intelligence"},{"location":"awesome/awesome-courses/#computer-graphics","text":"CAP 5415 Computer Vision University of Central Florida An introductory level course covering the basic topics of computer vision, and introducing some fundamental approaches for computer vision research. Lectures and Videos Assignments CIS 581 Computer Vision and Computational Photography University of Pennsylvania An introductory course in computer vision and computational photography focusing on four topics: image features, image morphing, shape matching, and image search. Lectures Assignments CMU 462 Computer Graphics Carnegie Mellon University This course provides a comprehensive introduction to computer graphics. Focuses on fundamental concepts and techniques, and their cross-cutting relationship to multiple problem domains in graphics (rendering, animation, geometry, imaging). Topics include: sampling, aliasing, interpolation, rasterization, geometric transformations, parameterization, visibility, compositing, filtering, convolution, curves & surfaces, geometric data structures, subdivision, meshing, spatial hierarchies, ray tracing, radiometry, reflectance, light fields, geometric optics, Monte Carlo rendering, importance sampling, camera models, high-performance ray tracing, differential equations, time integration, numerical differentiation, physically-based animation, optimization, numerical linear algebra, inverse kinematics, Fourier methods, data fitting, example-based synthesis. Lectures and Readings Assignments and Quizes CS 378 3D Reconstruction with Computer Vision UTexas In this lab-based class, we'll dive into practical applications of 3D reconstruction, combining hardware and software to build our own 3D environments from scratch. We'll use open-source frameworks like OpenCV to do the heavy lifting, with the focus on understanding and applying state-of-the art approaches to geometric computer vision Lectures CS 4620 Introduction to Computer Graphics Cornell University The study of creating, manipulating, and using visual images in the computer. Assignments Exams CS 4670 Introduction to Computer Vision Cornell University This course will provide an introduction to computer vision, with topics including image formation, feature detection, motion estimation, image mosaics, 3D shape reconstruction, and object and face detection and recognition. Applications of these techniques include building 3D maps, creating virtual characters, organizing photo and video databases, human computer interaction, video surveillance, automatic vehicle navigation, and mobile computer vision. This is a project-based course, in which you will implement several computer vision algorithms throughout the semester. Assignments Lectures CS 6670 Computer Vision Cornell University Introduction to computer vision. Topics include edge detection, image segmentation, stereopsis, motion and optical flow, image mosaics, 3D shape reconstruction, and object recognition. Students are required to implement several of the algorithms covered in the course and complete a final project. Syllabus Lectures Assignments CSCI 1230 Introduction to Computer Graphics Brown University This course offers an in-depth exploration of fundamental concepts in 2D and 3D computer graphics. It introduces 2D raster graphics techniques, including scan conversion, simple image processing, interaction techniques and user interface design. The bulk of the course is devoted to 3D modeling, geometric transformations, and 3D viewing and rendering. Lectures Labs Demos CSCI-GA.2270-001 Graduate Computer Graphics New York University Step-by-step study computer graphics, with reading and homework at each lecture (Fall2015) Lectures","title":"Computer Graphics"},{"location":"awesome/awesome-courses/#misc","text":"AM 207 Monte Carlo Methods and Stochastic Optimization Harvard University This course introduces important principles of Monte Carlo techniques and demonstrates the power of these techniques with simple (but very useful) applications. All of this in Python! Lecture Videos Assignments Lecture Notes CS 75 Introduction to Game Development Tufts University The course taught by Ming Y. Chow teaches game development initially in PyGame through Python, before moving on to addressing all facets of game development. Topics addressed include game physics, sprites, animation, game development methodology, sound, testing, MMORPGs and online games, and addressing mobile development in Android, HTML5, and iOS. Most to all of the development is focused on PyGame for learning principles Text Lectures Assignments Labs CS 50 Intro to Game Developement Harvard University This course picks up where Harvard College\u2019s CS50 leaves off, focusing on the development of 2D and 3D interactive games. Students explore the design of such childhood games as Super Mario Bros., Legend of Zelda, and Portal in a quest to understand how video games themselves are implemented. Via lectures and hands-on projects, the course explores principles of 2D and 3D graphics, animation, sound, and collision detection using frameworks like Unity and L\u00d6VE 2D , as well as languages like Lua and C#. By class\u2019s end, students will have programmed several of their own games and gained a thorough understanding of the basics of game design and development. Assignments Lecture Videos CS 100 Open Source Software Construction UC Riverside This is a course on how to be a hacker. Your first four homework assignments walk you through the process of building your own unix shell. You'll be developing it as an open source project, and you will collaborate with each other at various points. Github Page Assignments CS 108 Object Oriented System Design Stanford Software design and construction in the context of large OOP libraries. Taught in Java. Topics: OOP design, design patterns, testing, graphical user interface (GUI) OOP libraries, software engineering strategies, approaches to programming in teams. CS 168 Computer Networks UC Berkeley This is an undergraduate level course covering the fundamental concepts of networking as embodied in the Internet. The course will cover a wide range of topics; see the lecture schedule for more details. While the class has a textbook, we will not follow its order of presentation but will instead use the text as a reference when covering each individual topic. The course will also have several projects that involve programming (in Python). You should know programming, data structures, and software engineering. In terms of mathematics, your algebra should be very solid, you need to know basic probability, and you should be comfortable with thinking abstractly. The TAs will spend very little time reviewing material that is not specific to networking. We assume that you either know the material covered in those courses, or are willing to learn the material as necessary. We won't cover any of this material in lecture. CS 193a Android App Development, Spring 2016 Stanford University Course Description: This course provides an introduction to developing applications for the Android mobile platform. Prerequisite: CS 106B or equivalent. Java experience highly recommended. OOP highly recommmended. Devices: Access to an Android phone and/or tablet recommended but not required. Videos: Videos list can be found here Other materials: Some codes, handsout, homework ..... and lecture notes are not downloadable on the site due to login requirement. Please head to my Github repo here to download them. CS 193p Developing Applications for iOS Stanford University Updated for iOS 7. Tools and APIs required to build applications for the iPhone and iPad platform using the iOS SDK. User interface designs for mobile devices and unique user interactions using multi-touch technologies. Object-oriented design using model-view-controller paradigm, memory management, Objective-C programming language. Other topics include: object-oriented database API, animation, multi-threading and performance considerations. Prerequisites: C language and object-oriented programming experience Recommended: Programming Abstractions Updated courses for iOS8 - Swift Updated courses for iOS9 - Swift CS 223A Introduction to Robotics Stanford University The purpose of this course is to introduce you to basics of modeling, design, planning, and control of robot systems. In essence, the material treated in this course is a brief survey of relevant results from geometry, kinematics, statics, dynamics, and control. CS 262a Advanced Topics in Computer Systems UC Berkeley CS262a is the first semester of a year-long sequence on computer systems research, including operating systems, database systems, and Internet infrastructure systems. The goal of the course is to cover a broad array of research topics in computer systems, and to engage you in top-flight systems research. The first semester is devoted to basic thematic issues and underlying techniques in computer systems, while the second semester goes deeper into topics related to scalable, parallel and distributed systems. The class is based on a discussion of important research papers and a research project. Parts : Some Classics, Persistent Storage, Concurrency, Higher-Level Models, Virtual Machines, Cloud Computing, Parallel and Distributed Computing, Potpourri. Prerequisites: The historical prerequisite was to pass an entrance exam in class, which covered undergraduate operating systems material (similar to UCB's CS162 ). There is no longer an exam. However, if you have not already taken a decent undergrad OS class, you should talk with me before taking this class. The exam had the benefit of \"paging in\" the undergrad material, which may have been its primary value (since the pass rate was high). Readings & Lectures CS 294 Cutting-edge Web Technologies Berkeley Want to learn what makes future web technologies tick? Join us for the class where we will dive into the internals of many of the newest web technologies, analyze and dissect them. We will conduct survey lectures to provide the background and overview of the area as well as invite guest lecturers from various leading projects to present their technologies. CS 411 Software Architecture Design Bilkent University This course teaches the basic concepts, methods and techniques for designing software architectures. The topics include: rationale for software architecture design, modeling software architecture design, architectural styles/patterns, architectural requirements analysis, comparison and evaluation of architecture design methods, synthesis-based software architecture design, software product-line architectures, domain modeling, domain engineering and application engineering, software architecture implementation, evaluating software architecture designs. CS 3152 Introduction to Computer Game Development Cornell University A project-based course in which programmers and designers collaborate to make a computer game. This course investigates the theory and practice of developing computer games from a blend of technical, aesthetic, and cultural perspectives. Technical aspects of game architecture include software engineering, artificial intelligence, game physics, computer graphics, and networking. Aesthetic and cultural include art and modeling, sound and music, game balance, and player experience. Syllabus Lectures Assignments CS 4152 Advanced Topics in Computer Game Development Cornell University Project-based follow-up course to CS/INFO 3152. Students work in a multidisciplinary team to develop a game that incorporates innovative game technology. Advanced topics include 3D game development, mobile platforms, multiplayer gaming, and nontraditional input devices. There is a special emphasis on developing games that can be submitted to festivals and competitions, or that can be commercialized. Syllabus Lectures Assignments CS 4154 Analytics-driven Game Design Cornell University A project-based course in which programmers and designers collaborate to design, implement, and release a video game online through popular game portals. In this course, students will use the internet to gather data anonymously from players. Students will analyze this data in order to improve their game over multiple iterations. Technical aspects of this course include programming, database architecture, and statistical analysis. Syllabus Lectures Assignments CS 4812 Quantum Information Processing Cornell University Hardware that exploits quantum phenomena can dramatically alter the nature of computation. Though constructing a working quantum computer is a formidable technological challenge, there has been much recent experimental progress. In addition, the theory of quantum computation is of interest in itself, offering strikingly different perspectives on the nature of computation and information, as well as providing novel insights into the conceptual puzzles posed by the quantum theory. The course is intended both for physicists, unfamiliar with computational complexity theory or cryptography, and also for computer scientists and mathematicians, unfamiliar with quantum mechanics. The prerequisites are familiarity (and comfort) with finite dimensional vector spaces over the complex numbers, some standard group theory, and ability to count in binary. Syllabus Lectures CS 4860 Applied Logic Cornell University In addition to basic first-order logic, when taught by Computer Science this course involves elements of Formal Methods and Automated Reasoning. Formal Methods is concerned with proving properties of algorithms, specifying programming tasks and synthesizing programs from proofs. We will use formal methods tools such as interactive proof assistants (see www.nuprl.org ). We will also spend two weeks on constructive type theory, the language used by the Coq and Nuprl proof assistants. Syllabus Lectures Assignments CS 5150 Software Engineering Cornell University Introduction to the practical problems of specifying, designing, building, testing, and delivering reliable software systems Lectures Assignments CS 5220 Applications of Parallel Computers Cornell University How do we solve the large-scale problems of science quickly on modern computers? How do we measure the performance of new or existing simulation codes, and what things can we do to make them run faster? How can we best take advantage of features like multicore processors, vector units, and graphics co-processors? These are the types of questions we will address in CS 5220, Applications of Parallel Computers. Topics include: Single-processor architecture, caches, and serial performance tuning Basics of parallel machine organization Distributed memory programming with MPI Shared memory programming with OpenMP Parallel patterns: data partitioning, synchronization, and load balancing Examples of parallel numerical algorithms Applications from science and engineering Lectures Assignments CS 5540 Computational Techniques for Analyzing Clinical Data Cornell University CS5540 is a masters-level course that covers a wide range of clinical problems and their associated computational challenges. The practice of medicine is filled with digitally accessible information about patients, ranging from EKG readings to MRI images to electronic health records. This poses a huge opportunity for computer tools that make sense out of this data. Computation tools can be used to answer seemingly straightforward questions about a single patient's test results (\u201cDoes this patient have a normal heart rhythm?\u201d), or to address vital questions about large populations (\u201cIs there any clinical condition that affects the risks of Alzheimer\u201d). In CS5540 we will look at many of the most important sources of clinical data and discuss the basic computational techniques used for their analysis, ranging in sophistication from current clinical practice to state-of-the-art research projects. Syllabus Lectures Assignments CS 5724 Evolutionary Computation Cornell University This course will cover advanced topics in evolutionary algorithms and their application to open-ended computational design. The field of evolutionary computation tries to address large-scale optimization and planning problems through stochastic population-based methods. It draws inspiration from evolutionary processes in nature and in engineering, and also serves as abstract models for these phenomena. Evolutionary processes are generally weak methods that require little information about the problem domain and hence can be applied across a wide variety of applications. They are especially useful for open-ended problem domains for which little formal knowledge exists and the number of parameters is undefined, such as for the general engineering design process. This course will provide insight to a variety of evolutionary computation paradigms, such as genetic algorithms, genetic programming, and evolutionary strategies, as well as governing dynamics of co-evolution, arms races and mediocre stable states. New methods involving symbiosis models and pattern recognition will also be presented. The material will be intertwined with discussions of representations and results for design problems in a variety of problem domains including software, electronics, and mechanics. Syllabus Lectures Assignments CS 6452 Datacenter Networks and Services Cornell University CS6452 focuses on datacenter networks and services. The emerging demand for web services and cloud computing have created need for large scale data centers. The hardware and software infrastructure for datacenters critically determines the functionality, performance, cost and failure tolerance of applications running on that datacenter. This course will examine design alternatives for both the hardware (networking) infrastructure, and the software infrastructure for datacenters. Syllabus Lectures CS 6630 Realistic Image Synthesis Cornell University CS6630 is an introduction to physics-based rendering at the graduate level. Starting from the fundamentals of light transport we will look at formulations of the Rendering Equation, and a series of Monte Carlo methods, from sequential sampling to multiple importance sampling to Markov Chains, for solving the equation to make pictures. We'll look at light reflection from surfaces and scattering in volumes, illumination from luminaries and environments, and diffusion models for translucent materials. We will build working implementations of many of the algorithms we study, and learn how to make sure they are actually working correctly. It's fun to watch integrals and probability distributions transform into photographs of a slightly too perfect synthetic world. Syllabus Lectures Assignments Readings CS 6640 Computational Photography Cornell University A course on the emerging applications of computation in photography. Likely topics include digital photography, unconventional cameras and optics, light field cameras, image processing for photography, techniques for combining multiple images, advanced image editing algorithms, and projector-camera systems.cornell.edu/courses/CS6630/2012sp/about.stm) Lectures Assignments CS 6650 Computational Motion Cornell University Covers computational aspects of motion, broadly construed. Topics include the computer representation, modeling, analysis, and simulation of motion, and its relationship to various areas, including computational geometry, mesh generation, physical simulation, computer animation, robotics, biology, computer vision, acoustics, and spatio-temporal databases. Students implement several of the algorithms covered in the course and complete a final project. This offering will also explore the special role of motion processing in physically based sound rendering. CS 6840 Algorithmic Game Theory Cornell University Algorithmic Game Theory combines algorithmic thinking with game-theoretic, or, more generally, economic concepts. The course will study a range of topics at this interface Syllabus Lectures Assignments Readings CSE 154 Web Programming University of Washington This course is an introduction to programming for the World Wide Web. Covers use of HTML, CSS, PHP, JavaScript, AJAX, and SQL. Lectures Assignments ESM 296-4F GIS & Spatial Analysis UC Santa Barbara Taught by James Frew , Ben Best , and Lisa Wedding Focuses on specific computational languages (e.g., Python, R, shell) and tools (e.g., GDAL/OGR, InVEST, MGET, ModelBuilder) applied to the spatial analysis of environmental problems GitHub (includes lecture materials and labs) ICS 314 Software Engineering University of Hawaii Taught by Philip Johnson Introduction to software engineering using the \"Athletic Software Engineering\" pedagogy Readings Experiences Assessments IGME 582 Humanitarian Free & Open Source Software Development Rochester Institute of Technology This course provides students with exposure to the design, creation and production of Open Source Software projects. Students will be introduced to the historic intersections of technology and intellectual property rights and will become familiar with Open Source development processes, tools and practices. I485 / H400 Biologically Inspired Computation Indiana University Course taught by Luis Rocha about the multi-disciplinary field algorithms inspired by naturally occurring phenomenon. This course provides introduces the following areas: L-systems, Cellular Automata, Emergence, Genetic Algorithms, Swarm Intelligence and Artificial Immune Systems. It's aim is to cover the fundamentals and enable readers to build up a proficiency in applying various algorithms to real-world problems. Lectures Assignments Open Sourced Elective: Database and Rails Intro to Ruby on Rails University of Texas An introductory course in Ruby on Rails open sourced by University of Texas' CS Adjunct Professor, Richard Schneeman. Lectures Assignments Videos SCICOMP An Introduction to Efficient Scientific Computation Universit\u00e4t Bremen This is a graduate course in scientific computing created and taught by Oliver Serang in 2014, which covers topics in computer science and statistics with applications from biology. The course is designed top-down, starting with a problem and then deriving a variety of solutions from scratch. Topics include memoization, recurrence closed forms, string matching (sorting, hash tables, radix tries, and suffix tries), dynamic programming (e.g. Smith-Waterman and Needleman-Wunsch), Bayesian statistics (e.g. the envelope paradox), graphical models (HMMs, Viterbi, junction tree, belief propagation), FFT, and the probabilistic convolution tree. Lecture videos on Youtube and for direct download 14-740 Fundamentals of Computer Networks CMU This is an introductory course on Networking for graduate students. It follows a top-down approach to teaching Computer Networks, so it starts with the Application layer which most of the students are familiar with and as the course unravels we learn more about transport, network and link layers of the protocol stack. As far as prerequisites are concerned - basic computer, programming and probability theory background is required. The course site contains links to the lecture videos, reading material and assignments.","title":"Misc"},{"location":"awesome/awesome-main/readme/","text":"awesome My open source work is supported by the community Special thanks to: All your environment variables, in one place Stop struggling with scattered API keys, hacking together home-brewed tools, and avoiding access controls. Keep your team and servers in sync with Doppler. Your app, enterprise-ready. Start selling to enterprise customers with just a few lines of code. Add Single Sign-On (and more) in minutes instead of months. Strapi is the leading open-source headless CMS. It\u2019s 100% JavaScript, fully customizable, and developer-first. Founded in 2018, OSS Capital is the first and only venture capital platform focused exclusively on supporting early-stage COSS (commercial open source) startup founders. Instant, shareable cloud PostgreSQL database Import any dataset in seconds, share with anyone with a click, try without signing up Dev environments built for the cloud Natively integrated with GitLab, GitHub, and Bitbucket, Gitpod automatically and continuously prebuilds dev environments for all your branches. As a result team members can instantly start coding with fresh dev environments for each new task - no matter if you are building a new feature, want to fix a bug, or work on a code review. A dead-simple software licensing and distribution API built for developers Build Scalable Feeds & Chat Applications with Powerful APIs and Front End Components Build Scalable Feeds & Chat Applications with Powerful APIs and Front End Components What is an awesome list? Contribution guide Creating a list Twitter Stickers & t-shirts Follow the Awesome Twitter account for updates on new list additions. Just type awesome.re to go here. Check out my blog and follow me on Twitter . Contents Platforms Programming Languages Front-End Development Back-End Development Computer Science Big Data Theory Books Editors Gaming Development Environment Entertainment Databases Media Learn Security Content Management Systems Hardware Business Work Networking Decentralized Systems Higher Education Events Testing Miscellaneous Related Platforms Node.js - Async non-blocking event-driven JavaScript runtime built on Chrome's V8 JavaScript engine. Cross-Platform - Writing cross-platform code on Node.js. Frontend Development iOS - Mobile operating system for Apple phones and tablets. Android - Mobile operating system developed by Google. IoT & Hybrid Apps Electron - Cross-platform native desktop apps using JavaScript/HTML/CSS. Cordova - JavaScript API for hybrid apps. React Native - JavaScript framework for writing natively rendering mobile apps for iOS and Android. Xamarin - Mobile app development IDE, testing, and distribution. Linux Containers eBPF - Virtual machine that allows you to write more efficient and powerful tracing and monitoring for Linux systems. Arch-based Projects - Linux distributions and projects based on Arch Linux. AppImage - Package apps in a single file that works on various mainstream Linux distributions. macOS - Operating system for Apple's Mac computers. Screensavers Apps Open Source Apps watchOS - Operating system for the Apple Watch. JVM Salesforce Amazon Web Services Windows IPFS - P2P hypermedia protocol. Fuse - Mobile development tools. Heroku - Cloud platform as a service. Raspberry Pi - Credit card-sized computer aimed at teaching kids programming, but capable of a lot more. Qt - Cross-platform GUI app framework. WebExtensions - Cross-browser extension system. Smart TV - Create apps for different TV platforms. GNOME - Simple and distraction-free desktop environment for Linux. KDE - A free software community dedicated to creating an open and user-friendly computing experience. .NET Core Roslyn - Open-source compilers and code analysis APIs for C# and VB.NET languages. Amazon Alexa - Virtual home assistant. DigitalOcean - Cloud computing platform designed for developers. Flutter - Google's mobile SDK for building native iOS and Android apps from a single codebase written in Dart. Home Assistant - Open source home automation that puts local control and privacy first. IBM Cloud - Cloud platform for developers and companies. Firebase - App development platform built on Google Cloud Platform. Robot Operating System 2.0 - Set of software libraries and tools that help you build robot apps. Adafruit IO - Visualize and store data from any device. Cloudflare - CDN, DNS, DDoS protection, and security for your site. Actions on Google - Developer platform for Google Assistant. ESP - Low-cost microcontrollers with WiFi and broad IoT applications. Deno - A secure runtime for JavaScript and TypeScript that uses V8 and is built in Rust. DOS - Operating system for x86-based personal computers that was popular during the 1980s and early 1990s. Nix - Package manager for Linux and other Unix systems that makes package management reliable and reproducible. Integration - Linking together different IT systems (components) to functionally cooperate as a whole. Node-RED - A programming tool for wiring together hardware devices, APIs, and online services. Low Code - Allowing business professionals to address their needs on their own with little to no coding skills. Programming Languages JavaScript Promises Standard Style - Style guide and linter. Must Watch Talks Tips Network Layer Micro npm Packages Mad Science npm Packages - Impossible sounding projects that exist. Maintenance Modules - For npm packages. npm - Package manager. AVA - Test runner. ESLint - Linter. Functional Programming Observables npm scripts - Task runner. 30 Seconds of Code - Code snippets you can understand in 30 seconds. Ponyfills - Like polyfills but without overriding native APIs. Swift - Apple's compiled programming language that is secure, modern, programmer-friendly, and fast. Education Playgrounds Python - General-purpose programming language designed for readability. Asyncio - Asynchronous I/O in Python 3. Scientific Audio - Scientific research in audio/music. CircuitPython - A version of Python for microcontrollers. Data Science - Data analysis and machine learning. Typing - Optional static typing for Python. MicroPython - A lean and efficient implementation of Python 3 for microcontrollers. Rust Haskell PureScript Go Scala Scala Native - Optimizing ahead-of-time compiler for Scala based on LLVM. Ruby Clojure ClojureScript Elixir Elm Erlang Julia - High-level dynamic programming language designed to address the needs of high-performance numerical analysis and computational science. Lua C C/C++ - General-purpose language with a bias toward system programming and embedded, resource-constrained software. R - Functional programming language and environment for statistical computing and graphics. Learning D Common Lisp - Powerful dynamic multiparadigm language that facilitates iterative and interactive development. Learning Perl Groovy Dart Java - Popular secure object-oriented language designed for flexibility to \"write once, run anywhere\". RxJava Kotlin OCaml ColdFusion Fortran PHP - Server-side scripting language. Composer - Package manager. Pascal AutoHotkey AutoIt Crystal Frege - Haskell for the JVM. CMake - Build, test, and package software. ActionScript 3 - Object-oriented language targeting Adobe AIR. Eta - Functional programming language for the JVM. Idris - General purpose pure functional programming language with dependent types influenced by Haskell and ML. Ada/SPARK - Modern programming language designed for large, long-lived apps where reliability and efficiency are essential. Q# - Domain-specific programming language used for expressing quantum algorithms. Imba - Programming language inspired by Ruby and Python and compiles to performant JavaScript. Vala - Programming language designed to take full advantage of the GLib and GNOME ecosystems, while preserving the speed of C code. Coq - Formal language and environment for programming and specification which facilitates interactive development of machine-checked proofs. V - Simple, fast, safe, compiled language for developing maintainable software. Front-End Development ES6 Tools Web Performance Optimization Web Tools CSS - Style sheet language that specifies how HTML elements are displayed on screen. Critical-Path Tools Scalability Must-Watch Talks Protips Frameworks React - App framework. Relay - Framework for building data-driven React apps. React Hooks - A new feature that lets you use state and other React features without writing a class. Web Components Polymer - JavaScript library to develop Web Components. Angular - App framework. Backbone - App framework. HTML5 - Markup language used for websites & web apps. SVG - XML-based vector image format. Canvas KnockoutJS - JavaScript library. Dojo Toolkit - JavaScript toolkit. Inspiration Ember - App framework. Android UI iOS UI Meteor BEM Flexbox Web Typography Web Accessibility Material Design D3 - Library for producing dynamic, interactive data visualizations. Emails jQuery - Easy to use JavaScript library for DOM manipulation. Tips Web Audio Offline-First Static Website Services Cycle.js - Functional and reactive JavaScript framework. Text Editing Motion UI Design Vue.js - App framework. Marionette.js - App framework. Aurelia - App framework. Charting Ionic Framework 2 Chrome DevTools PostCSS - CSS tool. Draft.js - Rich text editor framework for React. Service Workers Progressive Web Apps choo - App framework. Redux - State container for JavaScript apps. Browserify - Module bundler. Sass - CSS preprocessor. Ant Design - Enterprise-class UI design language. Less - CSS preprocessor. WebGL - JavaScript API for rendering 3D graphics. Preact - App framework. Progressive Enhancement Next.js - Framework for server-rendered React apps. lit - Library for building web components with a declarative template system. JAMstack - Modern web development architecture based on client-side JavaScript, reusable APIs, and prebuilt markup. WordPress-Gatsby - Web development technology stack with WordPress as a back end and Gatsby as a front end. Mobile Web Development - Creating a great mobile web experience. Storybook - Development environment for UI components. Blazor - .NET web framework using C#/Razor and HTML that runs in the browser with WebAssembly. PageSpeed Metrics - Metrics to help understand page speed and user experience. Tailwind CSS - Utility-first CSS framework for rapid UI development. Seed - Rust framework for creating web apps running in WebAssembly. Web Performance Budget - Techniques to ensure certain performance metrics for a website. Web Animation - Animations in the browser with JavaScript, CSS, SVG, etc. Yew - Rust framework inspired by Elm and React for creating multi-threaded frontend web apps with WebAssembly. Material-UI - Material Design React components for faster and easier web development. Building Blocks for Web Apps - Standalone features to be integrated into web apps. Svelte - App framework. Design systems - Collection of reusable components, guided by rules that ensure consistency and speed. Inertia.js - Make single-page apps without building an API. MDBootstrap - Templates, layouts, components, and widgets to rapidly build websites. Back-End Development Flask - Python framework. Docker Vagrant - Automation virtual machine environment. Pyramid - Python framework. Play1 Framework CakePHP - PHP framework. Symfony - PHP framework. Education Laravel - PHP framework. Education TALL Stack - Full-stack development solution featuring libraries built by the Laravel community. Rails - Web app framework for Ruby. Gems - Packages. Phalcon - PHP framework. Useful .htaccess Snippets nginx - Web server. Dropwizard - Java framework. Kubernetes - Open-source platform that automates Linux container operations. Lumen - PHP micro-framework. Serverless Framework - Serverless computing and serverless architectures. Apache Wicket - Java web app framework. Vert.x - Toolkit for building reactive apps on the JVM. Terraform - Tool for building, changing, and versioning infrastructure. Vapor - Server-side development in Swift. Dash - Python web app framework. FastAPI - Python web app framework. CDK - Open-source software development framework for defining cloud infrastructure in code. IAM - User accounts, authentication and authorization. Computer Science University Courses Data Science Tutorials Machine Learning Tutorials ML with Ruby - Learning, implementing, and applying Machine Learning using Ruby. Core ML Models - Models for Apple's machine learning framework. H2O - Open source distributed machine learning platform written in Java with APIs in R, Python, and Scala. Software Engineering for Machine Learning - From experiment to production-level machine learning. AI in Finance - Solving problems in finance with machine learning. JAX - Automatic differentiation and XLA compilation brought together for high-performance machine learning research. XAI - Providing insight, explanations, and interpretability to machine learning methods. Speech and Natural Language Processing Spanish NLP with Ruby Question Answering - The science of asking and answering in natural language with a machine. Natural Language Generation - Generation of text used in data to text, conversational agents, and narrative generation applications. Linguistics Cryptography Papers - Theory basics for using cryptography by non-cryptographers. Computer Vision Deep Learning - Neural networks. TensorFlow - Library for machine intelligence. TensorFlow.js - WebGL-accelerated machine learning JavaScript library for training and deploying models. TensorFlow Lite - Framework that optimizes TensorFlow models for on-device machine learning. Papers - The most cited deep learning papers. Education Deep Vision Open Source Society University Functional Programming Empirical Software Engineering - Evidence-based research on software systems. Static Analysis & Code Quality Information Retrieval - Learn to develop your own search engine. Quantum Computing - Computing which utilizes quantum mechanics and qubits on quantum computers. Theoretical Computer Science - The interplay of computer science and pure mathematics, distinguished by its emphasis on mathematical rigour and technique. Big Data Big Data Public Datasets Hadoop - Framework for distributed storage and processing of very large data sets. Data Engineering Streaming Apache Spark - Unified engine for large-scale data processing. Qlik - Business intelligence platform for data visualization, analytics, and reporting apps. Splunk - Platform for searching, monitoring, and analyzing structured and unstructured machine-generated big data in real-time. Theory Papers We Love Talks Algorithms Education - Learning and practicing. Algorithm Visualizations Artificial Intelligence Search Engine Optimization Competitive Programming Math Recursion Schemes - Traversing nested data structures. Books Free Programming Books Go Books R Books Mind Expanding Books Book Authoring Elixir Books Editors Sublime Text Vim Neovim - Vim-fork focused on extensibility and usability. Emacs Atom - Open-source and hackable text editor. Visual Studio Code - Cross-platform open-source text editor. Gaming Game Development Game Talks Godot - Game engine. Open Source Games Unity - Game engine. Chess L\u00d6VE - Game engine. PICO-8 - Fantasy console. Game Boy Development Construct 2 - Game engine. Gideros - Game engine. Minecraft - Sandbox video game. Game Datasets - Materials and datasets for Artificial Intelligence in games. Haxe Game Development - A high-level strongly typed programming language used to produce cross-platform native code. libGDX - Java game framework. PlayCanvas - Game engine. Game Remakes - Actively maintained open-source game remakes. Flame - Game engine for Flutter. Discord Communities - Chat with friends and communities. CHIP-8 - Virtual computer game machine from the 70s. Games of Coding - Learn a programming language by making games. Esports - Video games played as a sport. Development Environment Quick Look Plugins - For macOS. Dev Env Dotfiles Shell Fish - User-friendly shell. Command-Line Apps ZSH Plugins GitHub - Hosting service for Git repositories. Browser Extensions Cheat Sheet Pinned Gists - Dynamic pinned gists for your GitHub profile. Git Cheat Sheet & Git Flow Git Tips Git Add-ons - Enhance the git CLI. Git Hooks - Scripts for automating tasks during git workflows. SSH FOSS for Developers Hyper - Cross-platform terminal app built on web technologies. PowerShell - Cross-platform object-oriented shell. Alfred Workflows - Productivity app for macOS. Terminals Are Sexy GitHub Actions - Create tasks to automate your workflow and share them with others on GitHub. Entertainment Science Fiction - Scifi. Fantasy Podcasts Email Newsletters IT Quotes Databases Database MySQL SQLAlchemy InfluxDB Neo4j MongoDB - NoSQL database. RethinkDB TinkerPop - Graph computing framework. PostgreSQL - Object-relational database. CouchDB - Document-oriented NoSQL database. HBase - Distributed, scalable, big data store. NoSQL Guides - Help on using non-relational, distributed, open-source, and horizontally scalable databases. Contexture - Abstracts queries/filters and results/aggregations from different backing data stores like ElasticSearch and MongoDB. Database Tools - Everything that makes working with databases easier. TypeDB - Logical database to organize large and complex networks of data as one body of knowledge. Cassandra - Open-source, distributed, wide column store, NoSQL database management system. Media Creative Commons Media Fonts Codeface - Text editor fonts. Stock Resources GIF - Image format known for animated images. Music Open Source Documents Audio Visualization Broadcasting Pixel Art - Pixel-level digital art. FFmpeg - Cross-platform solution to record, convert and stream audio and video. Icons - Downloadable SVG/PNG/font icon projects. Audiovisual - Lighting, audio and video in professional environments. VLC - Cross-platform media player software and streaming server. Learn CLI Workshoppers - Interactive tutorials. Learn to Program Speaking Tech Videos Dive into Machine Learning Computer History Programming for Kids Educational Games - Learn while playing. JavaScript Learning CSS Learning - Mainly about CSS \u2013 the language and the modules. Product Management - Learn how to be a better product manager. Roadmaps - Gives you a clear route to improve your knowledge and skills. YouTubers - Watch video tutorials from YouTubers that teach you about technology. Security Application Security Security CTF - Capture The Flag. Malware Analysis Android Security Hacking Honeypots - Deception trap, designed to entice an attacker into attempting to compromise the information systems in an organization. Incident Response Vehicle Security and Car Hacking Web Security - Security of web apps & services. Lockpicking - The art of unlocking a lock by manipulating its components without the key. Cybersecurity Blue Team - Groups of individuals who identify security flaws in information technology systems. Fuzzing - Automated software testing technique that involves feeding pseudo-randomly generated input data. Embedded and IoT Security GDPR - Regulation on data protection and privacy for all individuals within EU. DevSecOps - Integration of security practices into DevOps . Executable Packing - Packing and unpacking executable formats. Content Management Systems Umbraco Refinery CMS - Ruby on Rails CMS. Wagtail - Django CMS focused on flexibility and user experience. Textpattern - Lightweight PHP-based CMS. Drupal - Extensible PHP-based CMS. Craft CMS - Content-first CMS. Sitecore - .NET digital marketing platform that combines CMS with tools for managing multiple websites. Silverstripe CMS - PHP MVC framework that serves as a classic or headless CMS. Hardware Robotics Internet of Things Electronics - For electronic engineers and hobbyists. Bluetooth Beacons Electric Guitar Specifications - Checklist for building your own electric guitar. Plotters - Computer-controlled drawing machines and other visual art robots. Robotic Tooling - Free and open tools for professional robotic development. LIDAR - Sensor for measuring distances by illuminating the target with laser light. Business Open Companies Places to Post Your Startup OKR Methodology - Goal setting & communication best practices. Leading and Managing - Leading people and being a manager in a technology company/environment. Indie - Independent developer businesses. Tools of the Trade - Tools used by companies on Hacker News. Clean Tech - Fighting climate change with technology. Wardley Maps - Provides high situational awareness to help improve strategic planning and decision making. Social Enterprise - Building an organization primarily focused on social impact that is at least partially self-funded. Engineering Team Management - How to transition from software development to engineering management. Developer-First Products - Products that target developers as the user. Billing - Payments, invoicing, pricing, accounting, marketplace, fraud, and business intelligence. Work Slack - Team collaboration. Communities Remote Jobs Productivity Niche Job Boards Programming Interviews Code Review - Reviewing code. Creative Technology - Businesses & groups that specialize in combining computing, design, art, and user experience. Internships - CV writing guides and companies that hire interns. Networking Software-Defined Networking Network Analysis PCAPTools Real-Time Communications - Network protocols for near simultaneous exchange of media and data. Decentralized Systems Bitcoin - Bitcoin services and tools for software developers. Ripple - Open source distributed settlement network. Non-Financial Blockchain - Non-financial blockchain applications. Mastodon - Open source decentralized microblogging network. Ethereum - Distributed computing platform for smart contract development. Blockchain AI - Blockchain projects for artificial intelligence and machine learning. EOSIO - A decentralized operating system supporting industrial-scale apps. Corda - Open source blockchain platform designed for business. Waves - Open source blockchain platform and development toolset for Web 3.0 apps and decentralized solutions. Substrate - Framework for writing scalable, upgradeable blockchains in Rust. Golem - Open source peer-to-peer marketplace for computing resources. Stacks - A smart contract platform secured by Bitcoin. Algorand - An open-source, proof of stake blockchain and smart contract computing platform. Higher Education Computational Neuroscience - A multidisciplinary science which uses computational approaches to study the nervous system. Digital History - Computer-aided scientific investigation of history. Scientific Writing - Distraction-free scientific writing with Markdown, reStructuredText and Jupyter notebooks. Events Creative Tech Events - Events around the globe for creative coding, tech, design, music, arts and cool stuff. Events in Italy - Tech-related events in Italy. Events in the Netherlands - Tech-related events in the Netherlands. Testing Testing - Software testing. Visual Regression Testing - Ensures changes did not break the functionality or style. Selenium - Open-source browser automation framework and ecosystem. Appium - Test automation tool for apps. TAP - Test Anything Protocol. JMeter - Load testing and performance measurement tool. k6 - Open-source, developer-centric performance monitoring and load testing solution. Playwright - Node.js library to automate Chromium, Firefox and WebKit with a single API. Quality Assurance Roadmap - How to start & build a career in software testing. Gatling - Open-source load and performance testing framework based on Scala, Akka, and Netty. Miscellaneous JSON - Text based data interchange format. GeoJSON Datasets CSV - A text file format that stores tabular data and uses a comma to separate values. Discounts for Student Developers Radio Awesome - Recursion illustrated. Analytics REST Continuous Integration and Continuous Delivery Services Engineering Free for Developers Answers - Stack Overflow, Quora, etc. Sketch - Design app for macOS. Boilerplate Projects Readme Design and Development Guides Software Engineering Blogs Self Hosted FOSS Production Apps Gulp - Task runner. AMA - Ask Me Anything. Answers Open Source Photography OpenGL - Cross-platform API for rendering 2D and 3D graphics. GraphQL Urban & Regional Planning - Concerning the built environment and communities. Transit Research Tools Data Visualization Social Media Share Links Microservices Unicode - Unicode standards, quirks, packages and resources. Code Points Beginner-Friendly Projects Katas Tools for Activism Citizen Science - For community-based and non-institutional scientists. MQTT - \"Internet of Things\" connectivity protocol. Hacking Spots For Girls Vorpal - Node.js CLI framework. Vulkan - Low-overhead, cross-platform 3D graphics and compute API. LaTeX - Typesetting language. Economics - An economist's starter kit. Funny Markov Chains Bioinformatics Cheminformatics - Informatics techniques applied to problems in chemistry. Colorful - Choose your next color scheme. Steam - Digital distribution platform. Bots - Building bots. Site Reliability Engineering Empathy in Engineering - Building and promoting more compassionate engineering cultures. DTrace - Dynamic tracing framework. Userscripts - Enhance your browsing experience. Pok\u00e9mon - Pok\u00e9mon and Pok\u00e9mon GO. ChatOps - Managing technical and business operations through a chat. Falsehood - Falsehoods programmers believe in. Domain-Driven Design - Software development approach for complex needs by connecting the implementation to an evolving model. Quantified Self - Self-tracking through technology. SaltStack - Python-based config management system. Web Design - For digital designers. Creative Coding - Programming something expressive instead of something functional. No-Login Web Apps - Web apps that work without login. Free Software - Free as in freedom. Framer - Prototyping interactive UI designs. Markdown - Markup language. Dev Fun - Funny developer projects. Healthcare - Open source healthcare software for facilities, providers, developers, policy experts, and researchers. Magento 2 - Open Source eCommerce built with PHP. TikZ - Graph drawing packages for TeX/LaTeX/ConTeXt. Neuroscience - Study of the nervous system and brain. Ad-Free - Ad-free alternatives. Esolangs - Programming languages designed for experimentation or as jokes rather than actual use. Prometheus - Open-source monitoring system. Homematic - Smart home devices. Ledger - Double-entry accounting on the command-line. Web Monetization - A free open web standard service that allows you to send money directly in your browser. Uncopyright - Public domain works. Crypto Currency Tools & Algorithms - Digital currency where encryption is used to regulate the generation of units and verify transfers. Diversity - Creating a more inclusive and diverse tech community. Open Source Supporters - Companies that offer their tools and services for free to open source projects. Design Principles - Create better and more consistent designs and experiences. Theravada - Teachings from the Theravada Buddhist tradition. inspectIT - Open source Java app performance management tool. Open Source Maintainers - The experience of being an open source maintainer. Calculators - Calculators for every platform. Captcha - A type of challenge\u2013response test used in computing to determine whether or not the user is human. Jupyter - Create and share documents that contain code, equations, visualizations and narrative text. FIRST Robotics Competition - International high school robotics championship. Humane Technology - Open source projects that help improve society. Speakers - Conference and meetup speakers in the programming and design community. Board Games - Table-top gaming fun for all. Software Patreons - Fund individual programmers or the development of open source projects. Parasite - Parasites and host-pathogen interactions. Food - Food-related projects on GitHub. Mental Health - Mental health awareness and self-care in the software industry. Bitcoin Payment Processors - Start accepting Bitcoin. Scientific Computing - Solving complex scientific problems using computers. Amazon Sellers Agriculture - Open source technology for farming and gardening. Product Design - Design a product from the initial concept to production. Prisma - Turn your database into a GraphQL API. Software Architecture - The discipline of designing and building software. Connectivity Data and Reports - Better understand who has access to telecommunication and internet infrastructure and on what terms. Stacks - Tech stacks for building different apps and features. Cytodata - Image-based profiling of biological phenotypes for computational biologists. IRC - Open source messaging protocol. Advertising - Advertising and programmatic media for websites. Earth - Find ways to resolve the climate crisis. Naming - Naming things in computer science done right. Biomedical Information Extraction - How to extract information from unstructured biomedical data and text. Web Archiving - An effort to preserve the Web for future generations. WP-CLI - Command-line interface for WordPress. Credit Modeling - Methods for classifying credit applicants into risk classes. Ansible - A Python-based, open source IT configuration management and automation platform. Biological Visualizations - Interactive visualization of biological data on the web. QR Code - A type of matrix barcode that can be used to store and share a small amount of information. Veganism - Making the plant-based lifestyle easy and accessible. Translations - The transfer of the meaning of a text from one language to another. Scriptable - An iOS app for automations in JavaScript. WebXR - Enables immersive virtual reality and augmented reality content on the web. Related All Awesome Lists - All the Awesome lists on GitHub. Awesome Indexed - Search the Awesome dataset. Awesome Search - Quick search for Awesome lists. StumbleUponAwesome - Discover random pages from the Awesome dataset using a browser extension. Awesome CLI - A simple command-line tool to dive into Awesome lists. Awesome Viewer - A visualizer for all of the above Awesome lists. Track Awesome List - View the latest updates of Awesome lists.","title":"awesome"},{"location":"awesome/awesome-main/readme/#awesome","text":"My open source work is supported by the community Special thanks to: All your environment variables, in one place Stop struggling with scattered API keys, hacking together home-brewed tools, and avoiding access controls. Keep your team and servers in sync with Doppler. Your app, enterprise-ready. Start selling to enterprise customers with just a few lines of code. Add Single Sign-On (and more) in minutes instead of months. Strapi is the leading open-source headless CMS. It\u2019s 100% JavaScript, fully customizable, and developer-first. Founded in 2018, OSS Capital is the first and only venture capital platform focused exclusively on supporting early-stage COSS (commercial open source) startup founders. Instant, shareable cloud PostgreSQL database Import any dataset in seconds, share with anyone with a click, try without signing up Dev environments built for the cloud Natively integrated with GitLab, GitHub, and Bitbucket, Gitpod automatically and continuously prebuilds dev environments for all your branches. As a result team members can instantly start coding with fresh dev environments for each new task - no matter if you are building a new feature, want to fix a bug, or work on a code review. A dead-simple software licensing and distribution API built for developers Build Scalable Feeds & Chat Applications with Powerful APIs and Front End Components Build Scalable Feeds & Chat Applications with Powerful APIs and Front End Components What is an awesome list? Contribution guide Creating a list Twitter Stickers & t-shirts Follow the Awesome Twitter account for updates on new list additions. Just type awesome.re to go here. Check out my blog and follow me on Twitter .","title":"awesome"},{"location":"awesome/awesome-main/readme/#contents","text":"Platforms Programming Languages Front-End Development Back-End Development Computer Science Big Data Theory Books Editors Gaming Development Environment Entertainment Databases Media Learn Security Content Management Systems Hardware Business Work Networking Decentralized Systems Higher Education Events Testing Miscellaneous Related","title":"Contents"},{"location":"awesome/awesome-main/readme/#platforms","text":"Node.js - Async non-blocking event-driven JavaScript runtime built on Chrome's V8 JavaScript engine. Cross-Platform - Writing cross-platform code on Node.js. Frontend Development iOS - Mobile operating system for Apple phones and tablets. Android - Mobile operating system developed by Google. IoT & Hybrid Apps Electron - Cross-platform native desktop apps using JavaScript/HTML/CSS. Cordova - JavaScript API for hybrid apps. React Native - JavaScript framework for writing natively rendering mobile apps for iOS and Android. Xamarin - Mobile app development IDE, testing, and distribution. Linux Containers eBPF - Virtual machine that allows you to write more efficient and powerful tracing and monitoring for Linux systems. Arch-based Projects - Linux distributions and projects based on Arch Linux. AppImage - Package apps in a single file that works on various mainstream Linux distributions. macOS - Operating system for Apple's Mac computers. Screensavers Apps Open Source Apps watchOS - Operating system for the Apple Watch. JVM Salesforce Amazon Web Services Windows IPFS - P2P hypermedia protocol. Fuse - Mobile development tools. Heroku - Cloud platform as a service. Raspberry Pi - Credit card-sized computer aimed at teaching kids programming, but capable of a lot more. Qt - Cross-platform GUI app framework. WebExtensions - Cross-browser extension system. Smart TV - Create apps for different TV platforms. GNOME - Simple and distraction-free desktop environment for Linux. KDE - A free software community dedicated to creating an open and user-friendly computing experience. .NET Core Roslyn - Open-source compilers and code analysis APIs for C# and VB.NET languages. Amazon Alexa - Virtual home assistant. DigitalOcean - Cloud computing platform designed for developers. Flutter - Google's mobile SDK for building native iOS and Android apps from a single codebase written in Dart. Home Assistant - Open source home automation that puts local control and privacy first. IBM Cloud - Cloud platform for developers and companies. Firebase - App development platform built on Google Cloud Platform. Robot Operating System 2.0 - Set of software libraries and tools that help you build robot apps. Adafruit IO - Visualize and store data from any device. Cloudflare - CDN, DNS, DDoS protection, and security for your site. Actions on Google - Developer platform for Google Assistant. ESP - Low-cost microcontrollers with WiFi and broad IoT applications. Deno - A secure runtime for JavaScript and TypeScript that uses V8 and is built in Rust. DOS - Operating system for x86-based personal computers that was popular during the 1980s and early 1990s. Nix - Package manager for Linux and other Unix systems that makes package management reliable and reproducible. Integration - Linking together different IT systems (components) to functionally cooperate as a whole. Node-RED - A programming tool for wiring together hardware devices, APIs, and online services. Low Code - Allowing business professionals to address their needs on their own with little to no coding skills.","title":"Platforms"},{"location":"awesome/awesome-main/readme/#programming-languages","text":"JavaScript Promises Standard Style - Style guide and linter. Must Watch Talks Tips Network Layer Micro npm Packages Mad Science npm Packages - Impossible sounding projects that exist. Maintenance Modules - For npm packages. npm - Package manager. AVA - Test runner. ESLint - Linter. Functional Programming Observables npm scripts - Task runner. 30 Seconds of Code - Code snippets you can understand in 30 seconds. Ponyfills - Like polyfills but without overriding native APIs. Swift - Apple's compiled programming language that is secure, modern, programmer-friendly, and fast. Education Playgrounds Python - General-purpose programming language designed for readability. Asyncio - Asynchronous I/O in Python 3. Scientific Audio - Scientific research in audio/music. CircuitPython - A version of Python for microcontrollers. Data Science - Data analysis and machine learning. Typing - Optional static typing for Python. MicroPython - A lean and efficient implementation of Python 3 for microcontrollers. Rust Haskell PureScript Go Scala Scala Native - Optimizing ahead-of-time compiler for Scala based on LLVM. Ruby Clojure ClojureScript Elixir Elm Erlang Julia - High-level dynamic programming language designed to address the needs of high-performance numerical analysis and computational science. Lua C C/C++ - General-purpose language with a bias toward system programming and embedded, resource-constrained software. R - Functional programming language and environment for statistical computing and graphics. Learning D Common Lisp - Powerful dynamic multiparadigm language that facilitates iterative and interactive development. Learning Perl Groovy Dart Java - Popular secure object-oriented language designed for flexibility to \"write once, run anywhere\". RxJava Kotlin OCaml ColdFusion Fortran PHP - Server-side scripting language. Composer - Package manager. Pascal AutoHotkey AutoIt Crystal Frege - Haskell for the JVM. CMake - Build, test, and package software. ActionScript 3 - Object-oriented language targeting Adobe AIR. Eta - Functional programming language for the JVM. Idris - General purpose pure functional programming language with dependent types influenced by Haskell and ML. Ada/SPARK - Modern programming language designed for large, long-lived apps where reliability and efficiency are essential. Q# - Domain-specific programming language used for expressing quantum algorithms. Imba - Programming language inspired by Ruby and Python and compiles to performant JavaScript. Vala - Programming language designed to take full advantage of the GLib and GNOME ecosystems, while preserving the speed of C code. Coq - Formal language and environment for programming and specification which facilitates interactive development of machine-checked proofs. V - Simple, fast, safe, compiled language for developing maintainable software.","title":"Programming Languages"},{"location":"awesome/awesome-main/readme/#front-end-development","text":"ES6 Tools Web Performance Optimization Web Tools CSS - Style sheet language that specifies how HTML elements are displayed on screen. Critical-Path Tools Scalability Must-Watch Talks Protips Frameworks React - App framework. Relay - Framework for building data-driven React apps. React Hooks - A new feature that lets you use state and other React features without writing a class. Web Components Polymer - JavaScript library to develop Web Components. Angular - App framework. Backbone - App framework. HTML5 - Markup language used for websites & web apps. SVG - XML-based vector image format. Canvas KnockoutJS - JavaScript library. Dojo Toolkit - JavaScript toolkit. Inspiration Ember - App framework. Android UI iOS UI Meteor BEM Flexbox Web Typography Web Accessibility Material Design D3 - Library for producing dynamic, interactive data visualizations. Emails jQuery - Easy to use JavaScript library for DOM manipulation. Tips Web Audio Offline-First Static Website Services Cycle.js - Functional and reactive JavaScript framework. Text Editing Motion UI Design Vue.js - App framework. Marionette.js - App framework. Aurelia - App framework. Charting Ionic Framework 2 Chrome DevTools PostCSS - CSS tool. Draft.js - Rich text editor framework for React. Service Workers Progressive Web Apps choo - App framework. Redux - State container for JavaScript apps. Browserify - Module bundler. Sass - CSS preprocessor. Ant Design - Enterprise-class UI design language. Less - CSS preprocessor. WebGL - JavaScript API for rendering 3D graphics. Preact - App framework. Progressive Enhancement Next.js - Framework for server-rendered React apps. lit - Library for building web components with a declarative template system. JAMstack - Modern web development architecture based on client-side JavaScript, reusable APIs, and prebuilt markup. WordPress-Gatsby - Web development technology stack with WordPress as a back end and Gatsby as a front end. Mobile Web Development - Creating a great mobile web experience. Storybook - Development environment for UI components. Blazor - .NET web framework using C#/Razor and HTML that runs in the browser with WebAssembly. PageSpeed Metrics - Metrics to help understand page speed and user experience. Tailwind CSS - Utility-first CSS framework for rapid UI development. Seed - Rust framework for creating web apps running in WebAssembly. Web Performance Budget - Techniques to ensure certain performance metrics for a website. Web Animation - Animations in the browser with JavaScript, CSS, SVG, etc. Yew - Rust framework inspired by Elm and React for creating multi-threaded frontend web apps with WebAssembly. Material-UI - Material Design React components for faster and easier web development. Building Blocks for Web Apps - Standalone features to be integrated into web apps. Svelte - App framework. Design systems - Collection of reusable components, guided by rules that ensure consistency and speed. Inertia.js - Make single-page apps without building an API. MDBootstrap - Templates, layouts, components, and widgets to rapidly build websites.","title":"Front-End Development"},{"location":"awesome/awesome-main/readme/#back-end-development","text":"Flask - Python framework. Docker Vagrant - Automation virtual machine environment. Pyramid - Python framework. Play1 Framework CakePHP - PHP framework. Symfony - PHP framework. Education Laravel - PHP framework. Education TALL Stack - Full-stack development solution featuring libraries built by the Laravel community. Rails - Web app framework for Ruby. Gems - Packages. Phalcon - PHP framework. Useful .htaccess Snippets nginx - Web server. Dropwizard - Java framework. Kubernetes - Open-source platform that automates Linux container operations. Lumen - PHP micro-framework. Serverless Framework - Serverless computing and serverless architectures. Apache Wicket - Java web app framework. Vert.x - Toolkit for building reactive apps on the JVM. Terraform - Tool for building, changing, and versioning infrastructure. Vapor - Server-side development in Swift. Dash - Python web app framework. FastAPI - Python web app framework. CDK - Open-source software development framework for defining cloud infrastructure in code. IAM - User accounts, authentication and authorization.","title":"Back-End Development"},{"location":"awesome/awesome-main/readme/#computer-science","text":"University Courses Data Science Tutorials Machine Learning Tutorials ML with Ruby - Learning, implementing, and applying Machine Learning using Ruby. Core ML Models - Models for Apple's machine learning framework. H2O - Open source distributed machine learning platform written in Java with APIs in R, Python, and Scala. Software Engineering for Machine Learning - From experiment to production-level machine learning. AI in Finance - Solving problems in finance with machine learning. JAX - Automatic differentiation and XLA compilation brought together for high-performance machine learning research. XAI - Providing insight, explanations, and interpretability to machine learning methods. Speech and Natural Language Processing Spanish NLP with Ruby Question Answering - The science of asking and answering in natural language with a machine. Natural Language Generation - Generation of text used in data to text, conversational agents, and narrative generation applications. Linguistics Cryptography Papers - Theory basics for using cryptography by non-cryptographers. Computer Vision Deep Learning - Neural networks. TensorFlow - Library for machine intelligence. TensorFlow.js - WebGL-accelerated machine learning JavaScript library for training and deploying models. TensorFlow Lite - Framework that optimizes TensorFlow models for on-device machine learning. Papers - The most cited deep learning papers. Education Deep Vision Open Source Society University Functional Programming Empirical Software Engineering - Evidence-based research on software systems. Static Analysis & Code Quality Information Retrieval - Learn to develop your own search engine. Quantum Computing - Computing which utilizes quantum mechanics and qubits on quantum computers. Theoretical Computer Science - The interplay of computer science and pure mathematics, distinguished by its emphasis on mathematical rigour and technique.","title":"Computer Science"},{"location":"awesome/awesome-main/readme/#big-data","text":"Big Data Public Datasets Hadoop - Framework for distributed storage and processing of very large data sets. Data Engineering Streaming Apache Spark - Unified engine for large-scale data processing. Qlik - Business intelligence platform for data visualization, analytics, and reporting apps. Splunk - Platform for searching, monitoring, and analyzing structured and unstructured machine-generated big data in real-time.","title":"Big Data"},{"location":"awesome/awesome-main/readme/#theory","text":"Papers We Love Talks Algorithms Education - Learning and practicing. Algorithm Visualizations Artificial Intelligence Search Engine Optimization Competitive Programming Math Recursion Schemes - Traversing nested data structures.","title":"Theory"},{"location":"awesome/awesome-main/readme/#books","text":"Free Programming Books Go Books R Books Mind Expanding Books Book Authoring Elixir Books","title":"Books"},{"location":"awesome/awesome-main/readme/#editors","text":"Sublime Text Vim Neovim - Vim-fork focused on extensibility and usability. Emacs Atom - Open-source and hackable text editor. Visual Studio Code - Cross-platform open-source text editor.","title":"Editors"},{"location":"awesome/awesome-main/readme/#gaming","text":"Game Development Game Talks Godot - Game engine. Open Source Games Unity - Game engine. Chess L\u00d6VE - Game engine. PICO-8 - Fantasy console. Game Boy Development Construct 2 - Game engine. Gideros - Game engine. Minecraft - Sandbox video game. Game Datasets - Materials and datasets for Artificial Intelligence in games. Haxe Game Development - A high-level strongly typed programming language used to produce cross-platform native code. libGDX - Java game framework. PlayCanvas - Game engine. Game Remakes - Actively maintained open-source game remakes. Flame - Game engine for Flutter. Discord Communities - Chat with friends and communities. CHIP-8 - Virtual computer game machine from the 70s. Games of Coding - Learn a programming language by making games. Esports - Video games played as a sport.","title":"Gaming"},{"location":"awesome/awesome-main/readme/#development-environment","text":"Quick Look Plugins - For macOS. Dev Env Dotfiles Shell Fish - User-friendly shell. Command-Line Apps ZSH Plugins GitHub - Hosting service for Git repositories. Browser Extensions Cheat Sheet Pinned Gists - Dynamic pinned gists for your GitHub profile. Git Cheat Sheet & Git Flow Git Tips Git Add-ons - Enhance the git CLI. Git Hooks - Scripts for automating tasks during git workflows. SSH FOSS for Developers Hyper - Cross-platform terminal app built on web technologies. PowerShell - Cross-platform object-oriented shell. Alfred Workflows - Productivity app for macOS. Terminals Are Sexy GitHub Actions - Create tasks to automate your workflow and share them with others on GitHub.","title":"Development Environment"},{"location":"awesome/awesome-main/readme/#entertainment","text":"Science Fiction - Scifi. Fantasy Podcasts Email Newsletters IT Quotes","title":"Entertainment"},{"location":"awesome/awesome-main/readme/#databases","text":"Database MySQL SQLAlchemy InfluxDB Neo4j MongoDB - NoSQL database. RethinkDB TinkerPop - Graph computing framework. PostgreSQL - Object-relational database. CouchDB - Document-oriented NoSQL database. HBase - Distributed, scalable, big data store. NoSQL Guides - Help on using non-relational, distributed, open-source, and horizontally scalable databases. Contexture - Abstracts queries/filters and results/aggregations from different backing data stores like ElasticSearch and MongoDB. Database Tools - Everything that makes working with databases easier. TypeDB - Logical database to organize large and complex networks of data as one body of knowledge. Cassandra - Open-source, distributed, wide column store, NoSQL database management system.","title":"Databases"},{"location":"awesome/awesome-main/readme/#media","text":"Creative Commons Media Fonts Codeface - Text editor fonts. Stock Resources GIF - Image format known for animated images. Music Open Source Documents Audio Visualization Broadcasting Pixel Art - Pixel-level digital art. FFmpeg - Cross-platform solution to record, convert and stream audio and video. Icons - Downloadable SVG/PNG/font icon projects. Audiovisual - Lighting, audio and video in professional environments. VLC - Cross-platform media player software and streaming server.","title":"Media"},{"location":"awesome/awesome-main/readme/#learn","text":"CLI Workshoppers - Interactive tutorials. Learn to Program Speaking Tech Videos Dive into Machine Learning Computer History Programming for Kids Educational Games - Learn while playing. JavaScript Learning CSS Learning - Mainly about CSS \u2013 the language and the modules. Product Management - Learn how to be a better product manager. Roadmaps - Gives you a clear route to improve your knowledge and skills. YouTubers - Watch video tutorials from YouTubers that teach you about technology.","title":"Learn"},{"location":"awesome/awesome-main/readme/#security","text":"Application Security Security CTF - Capture The Flag. Malware Analysis Android Security Hacking Honeypots - Deception trap, designed to entice an attacker into attempting to compromise the information systems in an organization. Incident Response Vehicle Security and Car Hacking Web Security - Security of web apps & services. Lockpicking - The art of unlocking a lock by manipulating its components without the key. Cybersecurity Blue Team - Groups of individuals who identify security flaws in information technology systems. Fuzzing - Automated software testing technique that involves feeding pseudo-randomly generated input data. Embedded and IoT Security GDPR - Regulation on data protection and privacy for all individuals within EU. DevSecOps - Integration of security practices into DevOps . Executable Packing - Packing and unpacking executable formats.","title":"Security"},{"location":"awesome/awesome-main/readme/#content-management-systems","text":"Umbraco Refinery CMS - Ruby on Rails CMS. Wagtail - Django CMS focused on flexibility and user experience. Textpattern - Lightweight PHP-based CMS. Drupal - Extensible PHP-based CMS. Craft CMS - Content-first CMS. Sitecore - .NET digital marketing platform that combines CMS with tools for managing multiple websites. Silverstripe CMS - PHP MVC framework that serves as a classic or headless CMS.","title":"Content Management Systems"},{"location":"awesome/awesome-main/readme/#hardware","text":"Robotics Internet of Things Electronics - For electronic engineers and hobbyists. Bluetooth Beacons Electric Guitar Specifications - Checklist for building your own electric guitar. Plotters - Computer-controlled drawing machines and other visual art robots. Robotic Tooling - Free and open tools for professional robotic development. LIDAR - Sensor for measuring distances by illuminating the target with laser light.","title":"Hardware"},{"location":"awesome/awesome-main/readme/#business","text":"Open Companies Places to Post Your Startup OKR Methodology - Goal setting & communication best practices. Leading and Managing - Leading people and being a manager in a technology company/environment. Indie - Independent developer businesses. Tools of the Trade - Tools used by companies on Hacker News. Clean Tech - Fighting climate change with technology. Wardley Maps - Provides high situational awareness to help improve strategic planning and decision making. Social Enterprise - Building an organization primarily focused on social impact that is at least partially self-funded. Engineering Team Management - How to transition from software development to engineering management. Developer-First Products - Products that target developers as the user. Billing - Payments, invoicing, pricing, accounting, marketplace, fraud, and business intelligence.","title":"Business"},{"location":"awesome/awesome-main/readme/#work","text":"Slack - Team collaboration. Communities Remote Jobs Productivity Niche Job Boards Programming Interviews Code Review - Reviewing code. Creative Technology - Businesses & groups that specialize in combining computing, design, art, and user experience. Internships - CV writing guides and companies that hire interns.","title":"Work"},{"location":"awesome/awesome-main/readme/#networking","text":"Software-Defined Networking Network Analysis PCAPTools Real-Time Communications - Network protocols for near simultaneous exchange of media and data.","title":"Networking"},{"location":"awesome/awesome-main/readme/#decentralized-systems","text":"Bitcoin - Bitcoin services and tools for software developers. Ripple - Open source distributed settlement network. Non-Financial Blockchain - Non-financial blockchain applications. Mastodon - Open source decentralized microblogging network. Ethereum - Distributed computing platform for smart contract development. Blockchain AI - Blockchain projects for artificial intelligence and machine learning. EOSIO - A decentralized operating system supporting industrial-scale apps. Corda - Open source blockchain platform designed for business. Waves - Open source blockchain platform and development toolset for Web 3.0 apps and decentralized solutions. Substrate - Framework for writing scalable, upgradeable blockchains in Rust. Golem - Open source peer-to-peer marketplace for computing resources. Stacks - A smart contract platform secured by Bitcoin. Algorand - An open-source, proof of stake blockchain and smart contract computing platform.","title":"Decentralized Systems"},{"location":"awesome/awesome-main/readme/#higher-education","text":"Computational Neuroscience - A multidisciplinary science which uses computational approaches to study the nervous system. Digital History - Computer-aided scientific investigation of history. Scientific Writing - Distraction-free scientific writing with Markdown, reStructuredText and Jupyter notebooks.","title":"Higher Education"},{"location":"awesome/awesome-main/readme/#events","text":"Creative Tech Events - Events around the globe for creative coding, tech, design, music, arts and cool stuff. Events in Italy - Tech-related events in Italy. Events in the Netherlands - Tech-related events in the Netherlands.","title":"Events"},{"location":"awesome/awesome-main/readme/#testing","text":"Testing - Software testing. Visual Regression Testing - Ensures changes did not break the functionality or style. Selenium - Open-source browser automation framework and ecosystem. Appium - Test automation tool for apps. TAP - Test Anything Protocol. JMeter - Load testing and performance measurement tool. k6 - Open-source, developer-centric performance monitoring and load testing solution. Playwright - Node.js library to automate Chromium, Firefox and WebKit with a single API. Quality Assurance Roadmap - How to start & build a career in software testing. Gatling - Open-source load and performance testing framework based on Scala, Akka, and Netty.","title":"Testing"},{"location":"awesome/awesome-main/readme/#miscellaneous","text":"JSON - Text based data interchange format. GeoJSON Datasets CSV - A text file format that stores tabular data and uses a comma to separate values. Discounts for Student Developers Radio Awesome - Recursion illustrated. Analytics REST Continuous Integration and Continuous Delivery Services Engineering Free for Developers Answers - Stack Overflow, Quora, etc. Sketch - Design app for macOS. Boilerplate Projects Readme Design and Development Guides Software Engineering Blogs Self Hosted FOSS Production Apps Gulp - Task runner. AMA - Ask Me Anything. Answers Open Source Photography OpenGL - Cross-platform API for rendering 2D and 3D graphics. GraphQL Urban & Regional Planning - Concerning the built environment and communities. Transit Research Tools Data Visualization Social Media Share Links Microservices Unicode - Unicode standards, quirks, packages and resources. Code Points Beginner-Friendly Projects Katas Tools for Activism Citizen Science - For community-based and non-institutional scientists. MQTT - \"Internet of Things\" connectivity protocol. Hacking Spots For Girls Vorpal - Node.js CLI framework. Vulkan - Low-overhead, cross-platform 3D graphics and compute API. LaTeX - Typesetting language. Economics - An economist's starter kit. Funny Markov Chains Bioinformatics Cheminformatics - Informatics techniques applied to problems in chemistry. Colorful - Choose your next color scheme. Steam - Digital distribution platform. Bots - Building bots. Site Reliability Engineering Empathy in Engineering - Building and promoting more compassionate engineering cultures. DTrace - Dynamic tracing framework. Userscripts - Enhance your browsing experience. Pok\u00e9mon - Pok\u00e9mon and Pok\u00e9mon GO. ChatOps - Managing technical and business operations through a chat. Falsehood - Falsehoods programmers believe in. Domain-Driven Design - Software development approach for complex needs by connecting the implementation to an evolving model. Quantified Self - Self-tracking through technology. SaltStack - Python-based config management system. Web Design - For digital designers. Creative Coding - Programming something expressive instead of something functional. No-Login Web Apps - Web apps that work without login. Free Software - Free as in freedom. Framer - Prototyping interactive UI designs. Markdown - Markup language. Dev Fun - Funny developer projects. Healthcare - Open source healthcare software for facilities, providers, developers, policy experts, and researchers. Magento 2 - Open Source eCommerce built with PHP. TikZ - Graph drawing packages for TeX/LaTeX/ConTeXt. Neuroscience - Study of the nervous system and brain. Ad-Free - Ad-free alternatives. Esolangs - Programming languages designed for experimentation or as jokes rather than actual use. Prometheus - Open-source monitoring system. Homematic - Smart home devices. Ledger - Double-entry accounting on the command-line. Web Monetization - A free open web standard service that allows you to send money directly in your browser. Uncopyright - Public domain works. Crypto Currency Tools & Algorithms - Digital currency where encryption is used to regulate the generation of units and verify transfers. Diversity - Creating a more inclusive and diverse tech community. Open Source Supporters - Companies that offer their tools and services for free to open source projects. Design Principles - Create better and more consistent designs and experiences. Theravada - Teachings from the Theravada Buddhist tradition. inspectIT - Open source Java app performance management tool. Open Source Maintainers - The experience of being an open source maintainer. Calculators - Calculators for every platform. Captcha - A type of challenge\u2013response test used in computing to determine whether or not the user is human. Jupyter - Create and share documents that contain code, equations, visualizations and narrative text. FIRST Robotics Competition - International high school robotics championship. Humane Technology - Open source projects that help improve society. Speakers - Conference and meetup speakers in the programming and design community. Board Games - Table-top gaming fun for all. Software Patreons - Fund individual programmers or the development of open source projects. Parasite - Parasites and host-pathogen interactions. Food - Food-related projects on GitHub. Mental Health - Mental health awareness and self-care in the software industry. Bitcoin Payment Processors - Start accepting Bitcoin. Scientific Computing - Solving complex scientific problems using computers. Amazon Sellers Agriculture - Open source technology for farming and gardening. Product Design - Design a product from the initial concept to production. Prisma - Turn your database into a GraphQL API. Software Architecture - The discipline of designing and building software. Connectivity Data and Reports - Better understand who has access to telecommunication and internet infrastructure and on what terms. Stacks - Tech stacks for building different apps and features. Cytodata - Image-based profiling of biological phenotypes for computational biologists. IRC - Open source messaging protocol. Advertising - Advertising and programmatic media for websites. Earth - Find ways to resolve the climate crisis. Naming - Naming things in computer science done right. Biomedical Information Extraction - How to extract information from unstructured biomedical data and text. Web Archiving - An effort to preserve the Web for future generations. WP-CLI - Command-line interface for WordPress. Credit Modeling - Methods for classifying credit applicants into risk classes. Ansible - A Python-based, open source IT configuration management and automation platform. Biological Visualizations - Interactive visualization of biological data on the web. QR Code - A type of matrix barcode that can be used to store and share a small amount of information. Veganism - Making the plant-based lifestyle easy and accessible. Translations - The transfer of the meaning of a text from one language to another. Scriptable - An iOS app for automations in JavaScript. WebXR - Enables immersive virtual reality and augmented reality content on the web.","title":"Miscellaneous"},{"location":"awesome/awesome-main/readme/#related","text":"All Awesome Lists - All the Awesome lists on GitHub. Awesome Indexed - Search the Awesome dataset. Awesome Search - Quick search for Awesome lists. StumbleUponAwesome - Discover random pages from the Awesome dataset using a browser extension. Awesome CLI - A simple command-line tool to dive into Awesome lists. Awesome Viewer - A visualizer for all of the above Awesome lists. Track Awesome List - View the latest updates of Awesome lists.","title":"Related"},{"location":"awesome/computer-science-opportunities/","text":"awesome-computer-science-opportunities An awesome list of events and fellowship opportunities for computer science students Contents Learning Platform Competitive Programming Web Development Mobile Development DevOps Data Science Artificial Intelligence Computer Science Open Source Infosec MOOCs Fellowships Programming Events Hackathons General Opportunities Projects Learning Platform Back to Top ### Competitive Programming HackerRank - Solve code challenges to prepare for programming interviews. HackerEarth - Solve code challenges to help companies find innovative solutions for their businesses. CodeChef - Non-profit competitive programming platform. TopCoder - Participate in code challenges and help solve real world problems. CodeForces - Russian website dedicated to competitive programming. ProjectEuler - Solve computational and mathematical problems using your programming skills. Spoj - Programming contests with online judging system. InterviewBit - A platform to learn and practice coding interview questions. VisuAlgo - Visualizing data structures and algorithms through animation. LeetCode - Develop programming skills for your next interview. FireCode - An online coding interview preparation. CodeWars - Code challenges platform to level up your skills. CodinGame - Learn to code by playing games. CodeForces - Online platform that hosts competitions and problem sets DailyProgrammer - Solutions to programming challenges, peer reviewed with community feedback. CodeFights - Practice programming and land a job. UVa - Programming contests with online judging system. Stanford ACM ICPC - Stanford Notebook provides printable templates usable during online/on-site contests. Exercism - Solve programming challenges from your terminal. DailyCodingProblem - Get exceptionally good at coding interviews by solving one problem every day. acmp.ru - Russian programming contests Timus Online Judge - Programming contests with online judging system. DMOJ: Modern Online Judge - contest platform and archive of programming problems Rose Code - Programming challenges with leaderboards and blog posts Coderbyte - Programming challenges and specific routes to help learn specific skills Code Golf - Programming challenges with individual leaderboards for problems Daily Coding Problem - Get emailed a new coding problem every day Halite - Create AI to face off against other people's AI. More specialized on AI Advent of Code - A yearly set of coding challenges that published with leaderboards StopStalk - A tool to analyse and improve your Competitive Programming Progress ### Web Development Learn Enough to Be Dangerous - Free online coding tutorials on JavaScript, Ruby, Rails, CSS and more. FreeCodeCamp - Coding tutorials and challenges. Thimble - Free online code editor, web server, web browser & developer tools. NodeSchool - Open source workshops that teach web software skills. The Odin Project - A full free open source coding curriculum. Egghead - Video tutorials on popular JavaScript frameworks. Codecademy - Free and premium interactive tutorials for various languages. CodeSchool - Combination of video and interactive tutorials. MDN web docs - Web development articles by Mozilla. W3Schools - Tutorials on HTML, CSS, JavaScript and more. Eloquent JavaScript - An online book about JavaScript. Coder-Coder - Tutorials on Web Development from basics including HTML, CSS, JavaScript and more. CodeCraft - Provide Web Development Courses on JavaScript, AngularJS, Angular 5 for free. Scrimba - Provides Web Development Courses with a unique feature of live interaction with the instructor's code. FrontendMasters - In-depth and advanced video tutorials on Frontend Devlopment from experts in the industry. MiguelGrinberg - In-depth and beginner friendly tutorial on using Flask with an interesting sample project. ### Mobile Development Udacity Android Nanodegree - Students can also apply for scholarship given by Google. Android Developer Training - Range of courses to help you build Android apps. Vogella - Tutorials about Android development. Android Hive - Android tutorials blog. iOS development - Build your first iOS app with an Udacity course. ### DevOps DevOps Bootcamp - Course dedicated to teach core software development and systems operation skills. Google IT Support Course - Google course to prepare you for a job in IT support. ### Data Science Kaggle - Data science competitive platform. DataQuest - Learn data science with your browser. DataCamp - Learn data science online. DrivenData - Participate in data science competitions and help organizations. Analytics Vidhya - Training and Q&A platform based around data science. fast.ai - Deep Learning with only prerequisite being general coding skills. TunedIT - Data Mining competitions. Data Science Central - the online resource for big data practitioners. KPMG Data Science Virtual Internship - learn data science from a Big 4 accounting firm and how it's used in industry. ### Artificial Intelligence Siraj Raval - YouTube channel with tutorials about AI. Sentdex - YouTube channel with programming tutorials. Two Minute Papers - Learn AI with 5 mins videos. Andrej Karpathy - Old blog about AI, now posting on Medium . iamtrask - Machine Learning blog. colah's blog - Blog about neural networks. Google Machine Learning Course - A crash course of machine learning taught by Google Engineers Google AI - Learn from ML experts at Google ### Computer Science * BaseCS - Explains computer science basics in easy-to-digest articles. Also in podcast format. * Tutorials Point - tutorials for technologies like web, mobile and many more. * Introduction to Computer Science - CS101 - introduction to computer science in python language. ### Open Source Up For Grabs - Start exploring open source projects and get involved in them. 24 Pull Requests - Yearly initiative to encourage developers to send 24 pull requests during December. HacktoberFest - Similar to 24PullRequests, gives swag for 4 accepted pull requests. OpenHatch - Non-profit providing tools for new open source contributors. First Timers Only - Beginners-friendly open source projects. Your First PR - Helps you make a contribution by showcasing great starter issues on Github. Awesome For Beginners - A list of awesome beginners-friendly projects. CodeTriage - Pick your favorite projects to receive a different issue in your inbox every day. Open Source Friday - Helps you find a project to contribute to. Infosec How to start? - blogs * Beginner Bug Bounty Hunters resources - Collection of resources to build up the basics of Web Application Security * Getting Started in Bug Bounty Hunting - What You Should Know Before Starting to learn about Bug Bounty Hunting? * Getting started in Bug Bounty - How to get started in Bug Bounties * How to get started with bug Bounty? - What you need to learn before getting started with bug bounty * METHODOLOGY , TOOLKIT , TIPS & TRICKS - A complete bug bounty blog for beginners Recon * Recon - by Sahil Ahamad - Blog post on reconnaissance processes for web applications security testing * Recon - by Adrien - What tools I use for my recon during Bug Bounty MOOCs Back to Top Udacity - Free and paid online classes. Coursera - Courses from schools and universities like Stanford and Yale. Udemy - Online learning and teaching platform. edX - Free online courses from institutions like Harvard, MIT, Microsoft and more. Codecademy - Online learning platform for coding. MIT OPENCOURSEWARE - Browse and learn with free MIT courses' material. Microsoft Virtual Academy - Free courses on IT basic concepts and Microsoft products and services. Awesome Courses - List of awesome university courses for learning Computer Science. Lynda - Online learning platform. Stanford Online - Stanford's courses platform. Pluralsight - Paid learning platform made to help you build your career or land a job. Khan Academy - Free online learning platform. Sololearn - Learn coding from the ground up for free!! (also available on android) Y Combinator - Learn how engineering works at a Y Combinator startup MOOC.fi - Free courses from the University of Helsinki's Department of Computer Science. Fellowships/Scholarships Back to Top Developer Scholarship from Google - Link for Indian students (Others click here ). Scholarship Opportunities at Google - Google's scholarship opportunities. Microsoft Scholarship Program - For students at US/Canada/Mexico only. Fellowships at Microsoft Research Asia - For students in mainland China, Hong Kong, Japan, Korea, Singapore, or Taiwan. IBM PhD Fellowship - For students who want to make their mark in promising and disruptive technologies. Thiel Fellowship for young innovators - Intended for students under 23yo and offers a total of $100,000 and guidance to drop out of school and pursue other work. The Facebook Fellowship Program - Designed to encourage promising doctoral students who are engaged in areas related to computer science. NVIDIA Graduate Fellowships - Fellowship for AI,ML students. S.N. Bose Scholars Program - For Indian Students. Richard E. Merwin Student Scholarship - For IEEE members. The Data Science for Social Good Fellowship - It is a University of Chicago summer program to train aspiring data scientists to work on data mining, machine learning, big data, and data science projects with social impact. The Data Incubator - The Data Incubator is an 8-week educational fellowship preparing students with Master's degrees and PhDs for careers in big data and data science. Kleiner Perkins Fellow - Engineering - Kleiner Perkins Fellows program matches accepted fellows up with their partnering Silicon Valley startups over the summer. Cern Openlab Summer Student Programme - CERN openlab is a 2 month long student program where students complete assigned projects with CERN members during the summer. HackNY Fellow - Fellowship that matches students with New York City Startups Adobe India Women-in-Technology Scholarship - Adobe Scholarship for encouraging women to showcase their excellence in computing and technology. Grace Hopper Scholarship - A Scholarship by USC Girls in Tech. WeTech Qualcomm Global Scholarship - A scholarship for women in technology by Qualcomm and IIE. Emeritus fellowship - For the superannuated teachers. Junior research fellowship in science, humanities and social science - It is for qualifiers of UGC and UGC-CSIR tests. UGC research fellowships in science for meritorious students - It is to promote quality research in University/Departments. Junior research fellowship in engineering and technology - It is for those who wish to pursue Ph.D. degree in engineering and technology. Swarnajayanti fellowships scheme - For providing special assistance and support to talented young scientist. MLH Fellowship - The MLH Fellowship helps software engineers level up Programming Events Back to Top Google Summer of Code - A global program focused on bringing more student developers into open source software development. Google CodeJam - Google\u2019s largest coding competition. Google Kickstart - Many online rounds to give students the opportunity to develop their coding skills and pursue a career at Google. Google HashCode - Programming competition organized by Google for students and industry professionals across Europe, the Middle East and Africa. Google Code-in - A competition for pre-university students(13 to 17 years old) to introduce themselves to the world of open source by doing small tasks for various open source projects. ACM-ICPC - The International Collegiate Programming Contest is an algorithmic programming contest for college students. Facebook HackerCup - Annual programming contest organized by Facebook. List of Open Source Internship Programs - Includes Rails Girls Summer of Code and Outreachy . Hactoberfest - Organized by Digital Ocean in October. IEEEXtreme - Annual 24 hour long team contest for IEEE members. Hackathons Back to Top Devpost - Online or in-person hackathons browsing platform. hackathon.io - Browse in-person hackathons. Hackalist - List of upcoming hackathons. AngelHack - Hackathon planning organization. Hackevents - Hackathons search engine. Yelp Dataset Challenge - The challenge is a chance for students to conduct research or analysis on our data and share their discoveries with Yelp. hack.summit() - Virtual conference where you can learn from the world's most renowned programmers. Major League Hacking Event Page - A list of a ton of events that are sponsored by the official hackathon league Microsoft Imagine Cup -Bring your tech idea to life with the Imagine Cup and make a difference through creativity, collaboration, and competition. General Opportunities Back to Top Github Student Pack - Get free access to the best developer tools in one place. Visual Studio Dev Essentials - Free learning resources and programming tools. Projects Back to Top Community Driven Demo Projects - Find interesting mini projects for CSE and get started with an execution plan","title":"awesome-computer-science-opportunities"},{"location":"awesome/computer-science-opportunities/#awesome-computer-science-opportunities","text":"An awesome list of events and fellowship opportunities for computer science students","title":"awesome-computer-science-opportunities"},{"location":"awesome/computer-science-opportunities/#contents","text":"Learning Platform Competitive Programming Web Development Mobile Development DevOps Data Science Artificial Intelligence Computer Science Open Source Infosec MOOCs Fellowships Programming Events Hackathons General Opportunities Projects","title":"Contents"},{"location":"awesome/computer-science-opportunities/#learning-platform","text":"Back to Top ### Competitive Programming HackerRank - Solve code challenges to prepare for programming interviews. HackerEarth - Solve code challenges to help companies find innovative solutions for their businesses. CodeChef - Non-profit competitive programming platform. TopCoder - Participate in code challenges and help solve real world problems. CodeForces - Russian website dedicated to competitive programming. ProjectEuler - Solve computational and mathematical problems using your programming skills. Spoj - Programming contests with online judging system. InterviewBit - A platform to learn and practice coding interview questions. VisuAlgo - Visualizing data structures and algorithms through animation. LeetCode - Develop programming skills for your next interview. FireCode - An online coding interview preparation. CodeWars - Code challenges platform to level up your skills. CodinGame - Learn to code by playing games. CodeForces - Online platform that hosts competitions and problem sets DailyProgrammer - Solutions to programming challenges, peer reviewed with community feedback. CodeFights - Practice programming and land a job. UVa - Programming contests with online judging system. Stanford ACM ICPC - Stanford Notebook provides printable templates usable during online/on-site contests. Exercism - Solve programming challenges from your terminal. DailyCodingProblem - Get exceptionally good at coding interviews by solving one problem every day. acmp.ru - Russian programming contests Timus Online Judge - Programming contests with online judging system. DMOJ: Modern Online Judge - contest platform and archive of programming problems Rose Code - Programming challenges with leaderboards and blog posts Coderbyte - Programming challenges and specific routes to help learn specific skills Code Golf - Programming challenges with individual leaderboards for problems Daily Coding Problem - Get emailed a new coding problem every day Halite - Create AI to face off against other people's AI. More specialized on AI Advent of Code - A yearly set of coding challenges that published with leaderboards StopStalk - A tool to analyse and improve your Competitive Programming Progress ### Web Development Learn Enough to Be Dangerous - Free online coding tutorials on JavaScript, Ruby, Rails, CSS and more. FreeCodeCamp - Coding tutorials and challenges. Thimble - Free online code editor, web server, web browser & developer tools. NodeSchool - Open source workshops that teach web software skills. The Odin Project - A full free open source coding curriculum. Egghead - Video tutorials on popular JavaScript frameworks. Codecademy - Free and premium interactive tutorials for various languages. CodeSchool - Combination of video and interactive tutorials. MDN web docs - Web development articles by Mozilla. W3Schools - Tutorials on HTML, CSS, JavaScript and more. Eloquent JavaScript - An online book about JavaScript. Coder-Coder - Tutorials on Web Development from basics including HTML, CSS, JavaScript and more. CodeCraft - Provide Web Development Courses on JavaScript, AngularJS, Angular 5 for free. Scrimba - Provides Web Development Courses with a unique feature of live interaction with the instructor's code. FrontendMasters - In-depth and advanced video tutorials on Frontend Devlopment from experts in the industry. MiguelGrinberg - In-depth and beginner friendly tutorial on using Flask with an interesting sample project. ### Mobile Development Udacity Android Nanodegree - Students can also apply for scholarship given by Google. Android Developer Training - Range of courses to help you build Android apps. Vogella - Tutorials about Android development. Android Hive - Android tutorials blog. iOS development - Build your first iOS app with an Udacity course. ### DevOps DevOps Bootcamp - Course dedicated to teach core software development and systems operation skills. Google IT Support Course - Google course to prepare you for a job in IT support. ### Data Science Kaggle - Data science competitive platform. DataQuest - Learn data science with your browser. DataCamp - Learn data science online. DrivenData - Participate in data science competitions and help organizations. Analytics Vidhya - Training and Q&A platform based around data science. fast.ai - Deep Learning with only prerequisite being general coding skills. TunedIT - Data Mining competitions. Data Science Central - the online resource for big data practitioners. KPMG Data Science Virtual Internship - learn data science from a Big 4 accounting firm and how it's used in industry. ### Artificial Intelligence Siraj Raval - YouTube channel with tutorials about AI. Sentdex - YouTube channel with programming tutorials. Two Minute Papers - Learn AI with 5 mins videos. Andrej Karpathy - Old blog about AI, now posting on Medium . iamtrask - Machine Learning blog. colah's blog - Blog about neural networks. Google Machine Learning Course - A crash course of machine learning taught by Google Engineers Google AI - Learn from ML experts at Google ### Computer Science * BaseCS - Explains computer science basics in easy-to-digest articles. Also in podcast format. * Tutorials Point - tutorials for technologies like web, mobile and many more. * Introduction to Computer Science - CS101 - introduction to computer science in python language. ### Open Source Up For Grabs - Start exploring open source projects and get involved in them. 24 Pull Requests - Yearly initiative to encourage developers to send 24 pull requests during December. HacktoberFest - Similar to 24PullRequests, gives swag for 4 accepted pull requests. OpenHatch - Non-profit providing tools for new open source contributors. First Timers Only - Beginners-friendly open source projects. Your First PR - Helps you make a contribution by showcasing great starter issues on Github. Awesome For Beginners - A list of awesome beginners-friendly projects. CodeTriage - Pick your favorite projects to receive a different issue in your inbox every day. Open Source Friday - Helps you find a project to contribute to.","title":"Learning Platform"},{"location":"awesome/computer-science-opportunities/#infosec","text":"How to start? - blogs * Beginner Bug Bounty Hunters resources - Collection of resources to build up the basics of Web Application Security * Getting Started in Bug Bounty Hunting - What You Should Know Before Starting to learn about Bug Bounty Hunting? * Getting started in Bug Bounty - How to get started in Bug Bounties * How to get started with bug Bounty? - What you need to learn before getting started with bug bounty * METHODOLOGY , TOOLKIT , TIPS & TRICKS - A complete bug bounty blog for beginners Recon * Recon - by Sahil Ahamad - Blog post on reconnaissance processes for web applications security testing * Recon - by Adrien - What tools I use for my recon during Bug Bounty","title":"Infosec"},{"location":"awesome/computer-science-opportunities/#moocs","text":"Back to Top Udacity - Free and paid online classes. Coursera - Courses from schools and universities like Stanford and Yale. Udemy - Online learning and teaching platform. edX - Free online courses from institutions like Harvard, MIT, Microsoft and more. Codecademy - Online learning platform for coding. MIT OPENCOURSEWARE - Browse and learn with free MIT courses' material. Microsoft Virtual Academy - Free courses on IT basic concepts and Microsoft products and services. Awesome Courses - List of awesome university courses for learning Computer Science. Lynda - Online learning platform. Stanford Online - Stanford's courses platform. Pluralsight - Paid learning platform made to help you build your career or land a job. Khan Academy - Free online learning platform. Sololearn - Learn coding from the ground up for free!! (also available on android) Y Combinator - Learn how engineering works at a Y Combinator startup MOOC.fi - Free courses from the University of Helsinki's Department of Computer Science.","title":"MOOCs"},{"location":"awesome/computer-science-opportunities/#fellowshipsscholarships","text":"Back to Top Developer Scholarship from Google - Link for Indian students (Others click here ). Scholarship Opportunities at Google - Google's scholarship opportunities. Microsoft Scholarship Program - For students at US/Canada/Mexico only. Fellowships at Microsoft Research Asia - For students in mainland China, Hong Kong, Japan, Korea, Singapore, or Taiwan. IBM PhD Fellowship - For students who want to make their mark in promising and disruptive technologies. Thiel Fellowship for young innovators - Intended for students under 23yo and offers a total of $100,000 and guidance to drop out of school and pursue other work. The Facebook Fellowship Program - Designed to encourage promising doctoral students who are engaged in areas related to computer science. NVIDIA Graduate Fellowships - Fellowship for AI,ML students. S.N. Bose Scholars Program - For Indian Students. Richard E. Merwin Student Scholarship - For IEEE members. The Data Science for Social Good Fellowship - It is a University of Chicago summer program to train aspiring data scientists to work on data mining, machine learning, big data, and data science projects with social impact. The Data Incubator - The Data Incubator is an 8-week educational fellowship preparing students with Master's degrees and PhDs for careers in big data and data science. Kleiner Perkins Fellow - Engineering - Kleiner Perkins Fellows program matches accepted fellows up with their partnering Silicon Valley startups over the summer. Cern Openlab Summer Student Programme - CERN openlab is a 2 month long student program where students complete assigned projects with CERN members during the summer. HackNY Fellow - Fellowship that matches students with New York City Startups Adobe India Women-in-Technology Scholarship - Adobe Scholarship for encouraging women to showcase their excellence in computing and technology. Grace Hopper Scholarship - A Scholarship by USC Girls in Tech. WeTech Qualcomm Global Scholarship - A scholarship for women in technology by Qualcomm and IIE. Emeritus fellowship - For the superannuated teachers. Junior research fellowship in science, humanities and social science - It is for qualifiers of UGC and UGC-CSIR tests. UGC research fellowships in science for meritorious students - It is to promote quality research in University/Departments. Junior research fellowship in engineering and technology - It is for those who wish to pursue Ph.D. degree in engineering and technology. Swarnajayanti fellowships scheme - For providing special assistance and support to talented young scientist. MLH Fellowship - The MLH Fellowship helps software engineers level up","title":"Fellowships/Scholarships"},{"location":"awesome/computer-science-opportunities/#programming-events","text":"Back to Top Google Summer of Code - A global program focused on bringing more student developers into open source software development. Google CodeJam - Google\u2019s largest coding competition. Google Kickstart - Many online rounds to give students the opportunity to develop their coding skills and pursue a career at Google. Google HashCode - Programming competition organized by Google for students and industry professionals across Europe, the Middle East and Africa. Google Code-in - A competition for pre-university students(13 to 17 years old) to introduce themselves to the world of open source by doing small tasks for various open source projects. ACM-ICPC - The International Collegiate Programming Contest is an algorithmic programming contest for college students. Facebook HackerCup - Annual programming contest organized by Facebook. List of Open Source Internship Programs - Includes Rails Girls Summer of Code and Outreachy . Hactoberfest - Organized by Digital Ocean in October. IEEEXtreme - Annual 24 hour long team contest for IEEE members.","title":"Programming Events"},{"location":"awesome/computer-science-opportunities/#hackathons","text":"Back to Top Devpost - Online or in-person hackathons browsing platform. hackathon.io - Browse in-person hackathons. Hackalist - List of upcoming hackathons. AngelHack - Hackathon planning organization. Hackevents - Hackathons search engine. Yelp Dataset Challenge - The challenge is a chance for students to conduct research or analysis on our data and share their discoveries with Yelp. hack.summit() - Virtual conference where you can learn from the world's most renowned programmers. Major League Hacking Event Page - A list of a ton of events that are sponsored by the official hackathon league Microsoft Imagine Cup -Bring your tech idea to life with the Imagine Cup and make a difference through creativity, collaboration, and competition.","title":"Hackathons"},{"location":"awesome/computer-science-opportunities/#general-opportunities","text":"Back to Top Github Student Pack - Get free access to the best developer tools in one place. Visual Studio Dev Essentials - Free learning resources and programming tools.","title":"General Opportunities"},{"location":"awesome/computer-science-opportunities/#projects","text":"Back to Top Community Driven Demo Projects - Find interesting mini projects for CSE and get started with an execution plan","title":"Projects"},{"location":"awesome/cs-video-courses/","text":"Computer Science courses with video lectures Introduction Please check NOTES for general information about this list. Please refer CONTRIBUTING.md for contribution guidelines. Table of Contents Introduction to Computer Science Data Structures and Algorithms Systems Programming Database Systems Software Engineering Artificial Intelligence Machine Learning Web Programming and Internet Technologies Computer Networks Math for Computer Scientist Theoretical CS and Programming Languages Embedded Systems Real time system evaluation Computer Organization and Architecture Security Computer Graphics Image Processing and Computer Vision Computational Biology Quantum Computing Robotics Computational Finance Blockchain Development Misc Courses Introduction to Computer Science CS 10 - The Beauty and Joy of Computing - Spring 2015 - Dan Garcia - UC Berkeley InfoCoBuild 6.0001 - Introduction to Computer Science and Programming in Python - MIT OCW 6.001 - Structure and Interpretation of Computer Programs, MIT CS 50 - Introduction to Computer Science, Harvard University ( cs50.tv ) CS 61A - Structure and Interpretation of Computer Programs [Python], UC Berkeley CPSC 110 - Systematic Program Design [Racket], University of British Columbia CS50's Understanding Technology CSE 142 Computer Programming I (Java Programming), Spring 2016 - University of Washington CS 1301 Intro to computing - Gatech CS 106A - Programming Methodology, Stanford University ( Lecture Videos ) CS 106B - Programming Abstractions, Stanford University ( Lecture Videos ) CS 106X - Programming Abstractions in C++ ( Lecture Videos ) CS 107 - Programming Paradigms, Stanford University CmSc 150 - Introduction to Programming with Arcade Games, Simpson College LINFO 1104 - Paradigms of computer programming, Peter Van Roy, Universit\u00e9 catholique de Louvain, Belgium - EdX FP 101x - Introduction to Functional Programming, TU Delft Introduction to Problem Solving and Programming - IIT Kanpur Introduction to programming in C - IIT Kanpur Programming in C++ - IIT Kharagpur Python Boot Camp Fall 2016 - Berkeley Institute for Data Science (BIDS) CS 101 - Introduction to Computer Science - Udacity 6.00SC - Introduction to Computer Science and Programming (Spring 2011) - MIT OCW 6.00 - Introduction to Computer Science and Programming (Fall 2008) - MIT OCW 6.01SC - Introduction to Electrical Engineering and Computer Science I - MIT OCW Modern C++ Course (2018) - Bonn University Modern C++ (Lecture & Tutorials, 2020, Vizzo & Stachniss) - University of Bonn Data Structures and Algorithms 6.006 - Introduction to Algorithms, MIT OCW Algorithms: Design and Analysis 1 - Stanford University Algorithms: Design and Analysis 2 - Stanford University COS 226 Algorithms, Youtube, Princeton - by Robert Sedgewick and Kevin Wayne CSE 331 Introduction to Algorithm Design and Analysis, SUNY University at Buffalo, NY - Fall 2017 ( Lectures ) ( Homework Walkthroughs ) CSE 373 - Analysis of Algorithms, Stony Brook - Prof Skiena COP 3530 Data Structures and Algorithms, Prof Sahni, UFL ( Videos ) CS225 - Data Structures - University of Illinois at Urbana-Champaign ( Video lectures ) CS2 - Data Structures and Algorithms - Richard Buckland - UNSW Data Structures - Pepperdine University CS 161 - Design and Analysis of Algorithms, Prof. Tim Roughgarden, Stanford University 6.046J - Introduction to Algorithms - Fall 2005, MIT OCW Introduction to Algorithms (Spring 2020), MIT OCW 6.046 - Design and Analysis of Algorithms, Spring 2015 - MIT OCW CS 473 - Algorithms - University of Illinois at Urbana-Champaign ( Notes - Jeff Erickson ) ( YouTube ) COMP300E - Programming Challenges, Prof Skiena, Hong Kong University of Science and Technology - 2009 16s-4102 - Algorithms, University of Virginia ( Youtube ) CS 170 Algorithms - UCBerkeley Fall 2018, Youtube Fall 2018,Bilibili 2013 Bilibili ECS 122A - Algorithm Design and Analysis, UC Davis CSEP 521 - Applied Algorithms, Winter 2013 - University of Washington ( Videos ) Data Structures And Algorithms - IIT Delhi Design and Analysis of Algorithms - IIT Bombay Programming, Data Structures and Algorithms - IIT Madras Design and Analysis of Algorithms - IIT Madras Fundamental Algorithms:Design and Analysis - IIT Kharagpur Programming and Data Structure - IIT Kharagpur Programming, Data structures and Algorithms - IIT Madras Programming, Data Structures and Algorithms in Python - IIT Madras Programming and Data structures (PDS) - IIT Madras COP 5536 Advanced Data Structures, Prof Sahni - UFL ( Videos ) CS 261 - A Second Course in Algorithms, Stanford University ( Youtube ) Informatics 2B - Algorithms, Data Structures and Learning- University of Edinburgh CS 224 - Advanced Algorithms, Harvard University ( Lecture Videos ) ( Youtube ) CS 6150 - Advanced Algorithms (Fall 2016), University of Utah CS 6150 - Advanced Algorithms (Fall 2017), University of Utah ECS 222A - Graduate Level Algorithm Design and Analysis, UC Davis 6.851 - Advanced Data Structures, MIT ( MIT OCW ) 6.854 - Advanced Algorithms, MIT ( Prof. Karger lectures ) CS264 Beyond Worst-Case Analysis, Fall 2014 - Tim Roughgarden Lecture ( Youtube ) CS364A Algorithmic Game Theory, Fall 2013 - Tim Roughgarden Lectures CS364B Advanced Mechanism Design, Winter 2014 - Tim Roughgarden Lectures Algorithms - Aduni 6.889 - Algorithms for Planar Graphs and Beyond (Fall 2011) MIT 6.890 Algorithmic Lower Bounds: Fun with Hardness Proofs - MIT OCW Computer Algorithms - 2 - IIT Kanpur Parallel Algorithm - IIT Kanpur Graph Theory - IISC Bangalore Data Structures - mycodeschool Systems Programming 15-213 Introduction to Computer Systems, Fall 2015 - CMU CS361 - COMPUTER SYSTEMS - UIC CS 3650 - Computer Systems - Fall 2020 - Nat Tuck - NEU ( Lectures - YouTube ) CS 4400 \u2013 Computer Systems Fall 2016 - UoUtah Systems - Aduni CS110: Principles of Computer Systems - Stanford Operating Systems CS124 Operating Systems - California Institute of Technology, Fall 2018 - Youtube CS 162 Operating Systems and Systems Programming, Spring 2015 - University of California, Berkeley CS 4414 - Operating Systems, University of Virginia (rust-class) CS 4414 Operating Systems, Fall 2018 - University of Virginia CSE 421/521 - Introduction to Operating Systems, SUNY University at Buffalo, NY - Spring 2016 ( Lectures - YouTube ) ( Recitations 2016 ) ( Assignment walkthroughs ) CS 377 - Operating Systems, Fall 16 - Umass OS 6.828 - Operating System Engineering [Fall 2014] 6.S081 - Operating System Engineering [Fall 2020] CSE 30341 - Operating Systems, Spr 2008 CSEP 551 Operating Systems Autumn 2014 - University of Washington Introduction to Operating Systems - IIT Madras CS194 Advanced Operating Systems Structures and Implementation, Spring 2013 InfoCoBuild, UC Berkeley CSE 60641 - Graduate Operating Systems, Fall 08 Distributed Systems CS 677 - Distributed Operating Systems, Spring 16 - Umass OS CS 436 - Distributed Computer Systems - U Waterloo 6.824 - Distributed Systems, Spring 2015 - MIT 6.824 Distributed Systems - Spring 2020 - MIT ( Youtube ) Distributed Algorithms, https://canvas.instructure.com/courses/902299 CSEP 552 - PMP Distributed Systems, Spring 2013 - University of Washington ( Videos ) CSE 490H - Scalable Systems: Design, Implementation and Use of Large Scale Clusters, Autumn 2008 - University of Washington ( Videos ) MOOC - Cloud Computing Concepts - UIUC Distributed Systems (Prof. Pallab Dasgupta) EdX KTHx ID2203 Reliable Distributed Algorithms Distributed Data Management - Technische Universit\u00e4t Braunschweig, Germany Information Retrieval and Web Search Engines - Technische Universit\u00e4t Braunschweig, Germany Middleware and Distributed Systems (WS 2009/10) - Dr. Martin von L\u00f6wis - HPI Real-Time Systems CPCS 663 - Real-Time Systems: Video Material - TAMU Real Time Systems - IIT Kharagpur 6.172 Performance Engineering of Software Systems - MIT OCW Performance Evaluation of Computer Systems - IIT Madras Storage Systems - IISC Bangalore MAP6264 - Queueing Theory - FAU ( Video Lectures ) EE 380 Colloquim on Computer Systems - Stanford University ( Lecture videos ) Database Systems CMPSC 431W Database Management Systems, Fall 2015 - Penn State University Lectures - YouTube CS121 - Introduction to Relational Database Systems, Fall 2016 - Caltech CS 5530 - Database Systems, Spring 2016 - University of Utah Distributed Data Management (WT 2018/19) - HPI University of Potsdam MOOC - Database Stanford Dbclass CSEP 544, Database Management Systems, Au 2015 - University of Washington Database Design - IIT Madras Fundamentals of Database Systems - IIT Kanpur Principles of Database Management, Bart Baesens FIT9003 Database Systems Design - Monash University 15-445 - Introduction to Database Systems, CMU ( YouTube-2018 , YouTube-2017 , YouTube-2019 ) 15-721 - Database Systems, CMU ( YouTube-2017 , YouTube-2016 ) 15-721 Advanced Database Systems (Spring 2019) - CMU CS122 - Relational Database System Implementation, Winter 2014-2015 - Caltech CS 186 - Database Systems, UC Berkeley, Spring 2015 ( Lectures- InfoCoBuild ) CS 6530 - Graduate-level Database Systems, Fall 2016, University of Utah ( Lectures - YouTube ) 6.830/6.814 - Database Systems [Fall 2014] Informatics 1 - Data & Analysis 2014/15- University of Edinburgh Database Management Systems, Aduni D4M - Signal Processing on Databases In-Memory Data Management (2013)Prof. Hasso Plattner - HPI Distributed Data Management (WT 2019/20) - Dr. Thorsten Papenbrock - HPI Software Engineering Object Oriented Design ECE 462 Object-Oriented Programming using C++ and Java - Purdue Object-oriented Program Design and Software Engineering - Aduni OOSE - Object-Oriented Software Engineering, Dr. Tim Lethbridge Object Oriented Systems Analysis and Design (Systems Analysis and Design in a Changing World) CS 251 - Intermediate Software Design (C++ version) - Vanderbilt University OOSE - Software Dev Using UML and Java Object-Oriented Analysis and Design - IIT Kharagpur CS3 - Design in Computing - Richard Buckland UNSW Informatics 1 - Object-Oriented Programming 2014/15- University of Edinburgh Software Engineering with Objects and Components 2015/16- University of Edinburgh Software Engineering Computer Science 169- Software Engineering - Spring 2015 - UCBerkeley Computer Science 169- Software Engineering - Fall 2019 - UCBerkeley CS 5150 - Software Engineering, Fall 2014 - Cornell University Introduction to Service Design and Engineering - University of Trento, Italy CS 164 Software Engineering - Harvard System Analysis and Design - IISC Bangalore Software Engineering - IIT Bombay Dependable Systems (SS 2014)- HPI University of Potsdam Software Testing - IIT Kharagpur Software Testing - Udacity, course-cs258 | 2015 Software Debugging - Udacity, course-cs259 | 2015 Software Engineering - Bauhaus-Uni Weimar Software Architecture CS 411 - Software Architecture Design - Bilkent University MOOC - Software Architecture & Design - Udacity Concurrency CS176 - Multiprocessor Synchronization - Brown University ( Videos from 2012 ) CS 282 (2014): Concurrent Java Network Programming in Android CSE P 506 \u2013 Concurrency, Spring 2011 - University of Washington ( Videos ) CSEP 524 - Parallel Computation - University of Washington ( Videos ) Parallel Programming Concepts (WT 2013/14) - HPI University of Potsdam Parallel Programming Concepts (WT 2012/13) - HPI University of Potsdam Mobile Application Development MOOC Programming Mobile Applications for Android Handheld Systems - University of Maryland CS 193p - Developing Applications for iOS, Stanford University CS S-76 Building Mobile Applications - Harvard CS 251 (2015): Intermediate Software Design Android App Development for Beginners Playlist - thenewboston Android Application Development Tutorials - thenewboston MOOC - Developing Android Apps - Udacity MOOC - Advanced Android App Development - Udacity CSSE490 Android Development Rose-Hulman Winter 2010-2011, Dave Fisher iOS Course, Dave Fisher Developing iPad Applications for Visualization and Insight - Carnegie Mellon University Mobile Computing - IIT Madras Mobile Information Systems - Bauhaus-Uni Weimar Artificial Intelligence CS50 - Introduction to Artificial Intelligence with Python (and Machine Learning), Harvard OCW CS 188 - Introduction to Artificial Intelligence, UC Berkeley - Spring 2015 6.034 Artificial Intelligence, MIT OCW CS221: Artificial Intelligence: Principles and Techniques - Autumn 2019 - Stanford University 15-780 - Graduate Artificial Intelligence, Spring 14, CMU CSE 592 Applications of Artificial Intelligence, Winter 2003 - University of Washington CS322 - Introduction to Artificial Intelligence, Winter 2012-13 - UBC ( YouTube ) CS 4804: Introduction to Artificial Intelligence, Fall 2016 CS 5804: Introduction to Artificial Intelligence, Spring 2015 Artificial Intelligence - IIT Kharagpur Artificial Intelligence - IIT Madras Artificial Intelligence(Prof.P.Dasgupta) - IIT Kharagpur MOOC - Intro to Artificial Intelligence - Udacity MOOC - Artificial Intelligence for Robotics - Udacity Graduate Course in Artificial Intelligence, Autumn 2012 - University of Washington Agent-Based Systems 2015/16- University of Edinburgh Informatics 2D - Reasoning and Agents 2014/15- University of Edinburgh Artificial Intelligence - Hochschule Ravensburg-Weingarten Deductive Databases and Knowledge-Based Systems - Technische Universit\u00e4t Braunschweig, Germany Artificial Intelligence: Knowledge Representation and Reasoning - IIT Madras Semantic Web Technologies by Dr. Harald Sack - HPI Knowledge Engineering with Semantic Web Technologies by Dr. Harald Sack - HPI Machine Learning Introduction to Machine Learning MOOC Machine Learning Andrew Ng - Coursera/Stanford ( Notes ) Introduction to Machine Learning for Coders MOOC - Statistical Learning, Stanford University Foundations of Machine Learning Boot Camp, Berkeley Simons Institute CS155 - Machine Learning & Data Mining, 2017 - Caltech ( Notes ) ( 2016 ) CS 156 - Learning from Data, Caltech 10-601 - Introduction to Machine Learning (MS) - Tom Mitchell - 2015, CMU ( YouTube ) 10-601 Machine Learning | CMU | Fall 2017 10-701 - Introduction to Machine Learning (PhD) - Tom Mitchell, Spring 2011, CMU ( Fall 2014 ) ( Spring 2015 by Alex Smola ) 10 - 301/601 - Introduction to Machine Learning - Spring 2020 - CMU CMS 165 Foundations of Machine Learning and Statistical Inference - 2020 - Caltech Microsoft Research - Machine Learning Course CS 446 - Machine Learning, Spring 2019, UIUC ( Fall 2016 Lectures ) undergraduate machine learning at UBC 2012, Nando de Freitas CS 229 - Machine Learning - Stanford University ( Autumn 2018 ) CS 189/289A Introduction to Machine Learning, Prof Jonathan Shewchuk - UCBerkeley CPSC 340: Machine Learning and Data Mining (2018) - UBC CS4780/5780 Machine Learning, Fall 2013 - Cornell University CS4780/5780 Machine Learning, Fall 2018 - Cornell University ( Youtube ) CSE474/574 Introduction to Machine Learning - SUNY University at Buffalo CS 5350/6350 - Machine Learning, Fall 2016, University of Utah ECE 5984 Introduction to Machine Learning, Spring 2015 - Virginia Tech CSx824/ECEx242 Machine Learning, Bert Huang, Fall 2015 - Virginia Tech STA 4273H - Large Scale Machine Learning, Winter 2015 - University of Toronto CS 485/685 Machine Learning, Shai Ben-David, University of Waterloo STAT 441/841 Classification Winter 2017 , Waterloo 10-605 - Machine Learning with Large Datasets, Fall 2016 - CMU Information Theory, Pattern Recognition, and Neural Networks - University of Cambridge Python and machine learning - Stanford Crowd Course Initiative MOOC - Machine Learning Part 1a - Udacity/Georgia Tech ( Part 1b Part 2 Part 3 ) Machine Learning and Pattern Recognition 2015/16- University of Edinburgh Introductory Applied Machine Learning 2015/16- University of Edinburgh Pattern Recognition Class (2012)- Universit\u00e4t Heidelberg Introduction to Machine Learning and Pattern Recognition - CBCSL OSU Introduction to Machine Learning - IIT Kharagpur Introduction to Machine Learning - IIT Madras Pattern Recognition - IISC Bangalore Pattern Recognition and Application - IIT Kharagpur Pattern Recognition - IIT Madras Machine Learning Summer School 2013 - Max Planck Institute for Intelligent Systems T\u00fcbingen Machine Learning - Professor Kogan (Spring 2016) - Rutgers CS273a: Introduction to Machine Learning ( YouTube ) Machine Learning Crash Course 2015 COM4509/COM6509 Machine Learning and Adaptive Intelligence 2015-16 10715 Advanced Introduction to Machine Learning Introduction to Machine Learning - Spring 2018 - ETH Zurich Machine Learning - Pedro Domingos- University of Washington Advanced Machine Learning - 2019 - ETH Z\u00fcrich Machine Learning (COMP09012) Probabilistic Machine Learning 2020 - University of T\u00fcbingen Statistical Machine Learning 2020 - Ulrike von Luxburg - University of T\u00fcbingen COMS W4995 - Applied Machine Learning - Spring 2020 - Columbia University Machine Learning for Engineers 2022 ( YouTube ) Data Mining CSEP 546, Data Mining - Pedro Domingos, Sp 2016 - University of Washington ( YouTube ) CS 5140/6140 - Data Mining, Spring 2016, University of Utah ( Youtube ) CS 5955/6955 - Data Mining, University of Utah ( YouTube ) Statistics 202 - Statistical Aspects of Data Mining, Summer 2007 - Google ( YouTube ) MOOC - Text Mining and Analytics by ChengXiang Zhai Information Retrieval SS 2014, iTunes - HPI MOOC - Data Mining with Weka CS 290 DataMining Lectures CS246 - Mining Massive Data Sets, Winter 2016, Stanford University ( YouTube ) Data Mining: Learning From Large Datasets - Fall 2017 - ETH Zurich Information Retrieval - Spring 2018 - ETH Zurich CAP6673 - Data Mining and Machine Learning - FAU ( Video lectures ) Data Warehousing and Data Mining Techniques - Technische Universit\u00e4t Braunschweig, Germany Data Science Data 8: The Foundations of Data Science - UC Berkeley ( Summer 17 ) CSE519 - Data Science Fall 2016 - Skiena, SBU CS 109 Data Science, Harvard University ( YouTube ) 6.0002 Introduction to Computational Thinking and Data Science - MIT OCW Data 100 - Summer 19- UC Berkeley Distributed Data Analytics (WT 2017/18) - HPI University of Potsdam Statistics 133 - Concepts in Computing with Data, Fall 2013 - UC Berkeley Data Profiling and Data Cleansing (WS 2014/15) - HPI University of Potsdam AM 207 - Stochastic Methods for Data Analysis, Inference and Optimization, Harvard University CS 229r - Algorithms for Big Data, Harvard University ( Youtube ) Algorithms for Big Data - IIT Madras Python Data Science with the TCLab ( YouTube ) Probabilistic Graphical Modeling MOOC - Probabilistic Graphical Models - Coursera CS 6190 - Probabilistic Modeling, Spring 2016, University of Utah 10-708 - Probabilistic Graphical Models, Carnegie Mellon University Probabilistic Graphical Models, Daphne Koller, Stanford University Probabilistic Models - UNIVERSITY OF HELSINKI Probabilistic Modelling and Reasoning 2015/16- University of Edinburgh Probabilistic Graphical Models, Spring 2018 - Notre Dame Deep Learning NYU Deep Learning Spring 2020 NYU Deep Learning Spring 2021 6.S191: Introduction to Deep Learning - MIT Deep Learning CMU Part 1: Practical Deep Learning for Coders, v3 - fast.ai Part 2: Deep Learning from the Foundations - fast.ai Deep learning at Oxford 2015 - Nando de Freitas 6.S094: Deep Learning for Self-Driving Cars - MIT CS294-129 Designing, Visualizing and Understanding Deep Neural Networks ( YouTube ) CS230: Deep Learning - Autumn 2018 - Stanford University STAT-157 Deep Learning 2019 - UC Berkeley Full Stack DL Bootcamp 2019 - UC Berkeley Deep Learning, Stanford University MOOC - Neural Networks for Machine Learning, Geoffrey Hinton 2016 - Coursera Deep Unsupervised Learning -- Berkeley Spring 2020 Stat 946 Deep Learning - University of Waterloo Neural networks class - Universit\u00e9 de Sherbrooke ( YouTube ) CS294-158 Deep Unsupervised Learning SP19 DLCV - Deep Learning for Computer Vision - UPC Barcelona DLAI - Deep Learning for Artificial Intelligence @ UPC Barcelona Neural Networks and Applications - IIT Kharagpur UVA DEEP LEARNING COURSE Nvidia Machine Learning Class Deep Learning - Winter 2020-21 - T\u00fcbingen Machine Learning Reinforcement Learning CS234: Reinforcement Learning - Winter 2019 - Stanford University Introduction to reinforcement learning - UCL Advanced Deep Learning & Reinforcement Learning - UCL Reinforcement Learning - IIT Madras CS885 Reinforcement Learning - Spring 2018 - University of Waterloo CS 285 - Deep Reinforcement Learning- UC Berkeley CS 294 112 - Reinforcement Learning NUS CS 6101 - Deep Reinforcement Learning ECE 8851: Reinforcement Learning CS294-112, Deep Reinforcement Learning Sp17 ( YouTube ) UCL Course 2015 on Reinforcement Learning by David Silver from DeepMind ( YouTube ) Deep RL Bootcamp - Berkeley Aug 2017 Reinforcement Learning - IIT Madras Advanced Machine Learning Machine Learning 2013 - Nando de Freitas, UBC Machine Learning, 2014-2015, University of Oxford 10-702/36-702 - Statistical Machine Learning - Larry Wasserman, Spring 2016, CMU ( Spring 2015 ) 10-715 Advanced Introduction to Machine Learning - CMU ( YouTube ) CS 281B - Scalable Machine Learning, Alex Smola, UC Berkeley 18.409 Algorithmic Aspects of Machine Learning Spring 2015 - MIT CS 330 - Deep Multi-Task and Meta Learning - Fall 2019 - Stanford University ( Youtube ) ML based Natural Language Processing and Computer Vision CS 224d - Deep Learning for Natural Language Processing, Stanford University ( Lectures - Youtube ) CS 224N - Natural Language Processing, Stanford University ( Lecture videos ) CS 124 - From Languages to Information - Stanford University MOOC - Natural Language Processing, Dan Jurafsky & Chris Manning - Coursera fast.ai Code-First Intro to Natural Language Processing ( Github ) MOOC - Natural Language Processing - Coursera, University of Michigan CS 231n - Convolutional Neural Networks for Visual Recognition, Stanford University CS224U: Natural Language Understanding - Spring 2019 - Stanford University Deep Learning for Natural Language Processing, 2017 - Oxford University Machine Learning for Robotics and Computer Vision, WS 2013/2014 - TU M\u00fcnchen ( YouTube ) Informatics 1 - Cognitive Science 2015/16- University of Edinburgh Informatics 2A - Processing Formal and Natural Languages 2016-17 - University of Edinburgh Computational Cognitive Science 2015/16- University of Edinburgh Accelerated Natural Language Processing 2015/16- University of Edinburgh Natural Language Processing - IIT Bombay NOC:Deep Learning For Visual Computing - IIT Kharagpur CS 11-747 - Neural Nets for NLP - 2019 - CMU Natural Language Processing - Michael Collins - Columbia University Deep Learning for Computer Vision - University of Michigan CMU CS11-737 - Multilingual Natural Language Processing Time Series Analysis 02417 Time Series Analysis Applied Time Series Analysis Misc Machine Learning Topics EE364a: Convex Optimization I - Stanford University CS 6955 - Clustering, Spring 2015, University of Utah Info 290 - Analyzing Big Data with Twitter, UC Berkeley school of information ( YouTube ) 10-725 Convex Optimization, Spring 2015 - CMU 10-725 Convex Optimization: Fall 2016 - CMU CAM 383M - Statistical and Discrete Methods for Scientific Computing, University of Texas CS224W Machine Learning with Graphs | Spring 2021 | Stanford University 9.520 - Statistical Learning Theory and Applications, Fall 2015 - MIT Reinforcement Learning - UCL Regularization Methods for Machine Learning 2016 ( YouTube ) Statistical Inference in Big Data - University of Toronto 10-725 Optimization Fall 2012 - CMU 10-801 Advanced Optimization and Randomized Methods - CMU ( YouTube ) Reinforcement Learning 2015/16- University of Edinburgh Reinforcement Learning - IIT Madras Statistical Rethinking Winter 2015 - Richard McElreath Music Information Retrieval - University of Victoria, 2014 PURDUE Machine Learning Summer School 2011 Foundations of Machine Learning - Blmmoberg Edu Introduction to reinforcement learning - UCL Advanced Deep Learning & Reinforcement Learning - UCL Web Information Retrieval (Proff. L. Becchetti - A. Vitaletti) Big Data Systems (WT 2019/20) - Prof. Dr. Tilmann Rabl - HPI Distributed Data Analytics (WT 2017/18) - Dr. Thorsten Papenbrock - HPI Computer Networks 14-740 - Fundamentals of Computer Networks - CMU CS 144 Introduction to Computer Networking - Stanford University, Fall 2013 ( Lecture videos ) Computer Communication Networks, Rensselaer Polytechnic Institute - Fall 2001 ( Videos ) ( Slides ) Audio/Video Recordings and Podcasts of Professor Raj Jain's Lectures - Washington University in St. Louis ( YouTube ) Computer Networks, Tanenbaum, Wetherall Computer Networks 5e - Video Lectures CSEP 561 - PMP Network Systems, Fall 2013 - University of Washington ( Videos ) CSEP 561 \u2013 Network Systems, Autumn 2008 - University of Washington ( Videos ) Computer Networks - IIT Kharagpur Introduction to Data Communications 2013, Steven Gordon - Thammasat University, Thailand Introduction to Complex Networks - RIT Structural Analysis and Visualization of Networks Data Communication - IIT Kharagpur Error Correcting Codes - IISC Bangalore Information Theory and Coding - IIT Bombay Complex Network : Theory and Application - IIT Kharagpur Advanced 3G and 4G Wireless Mobile Communications - IIT Kanpur Broadband Networks: Concepts and Technology - IIT Bombay Coding Theory - IIT Madras Digital Communication - IIT Bombay Digital Voice & Picture Communication - IIT Kharagpur Wireless Ad Hoc and Sensor Networks - IIT Kharagpur Internetworking with TCP/IP by Prof. Dr. Christoph Meinel - HPI CS798: Mathematical Foundations of Computer Networking - University of Waterloo Math for Computer Scientist Maths courses all topics covered Calculus 18.01 Single Variable Calculus, Fall 2006 - MIT OCW 18.02 Multivariable Calculus, Fall 2007 - MIT OCW 18.03 Differential Equations, Spring 2010 - MIT OCW Highlights of Calculus - Gilbert Strang, MIT OCW Discrete Math 6.042J - Mathematics for Computer Science, Fall 2010, MIT OCW ( Spring 15 ) Computer Science 70, 001 - Spring 2015 CSE 547 Discrete Mathematics, Prof Skiena, University of Stony Brook Discrete Structures (Summer 2011) - Rutgers, The State University of New Jersey Discrete Mathematics and Mathematical Reasoning 2015/16 - University of Edinburgh Discrete Mathematical Structures - IIT Madras Discrete Structures - Pepperdine University Probability & Statistics 6.041 Probabilistic Systems Analysis and Applied Probability - MIT OCW Statistics 110 - Probability - Harvard University STAT 2.1x: Descriptive Statistics | UC Berkeley STAT 2.2x: Probability | UC Berkeley MOOC - Statistics: Making Sense of Data, Coursera MOOC - Statistics One - Coursera Probability and Random Processes - IIT Kharagpur MOOC - Statistical Inference - Coursera 131B - Introduction to Probability and Statistics, UCI STATS 250 - Introduction to Statistics and Data Analysis, UMichigan Sets, Counting and Probability - Harvard Opinionated Lessons in Statistics ( Youtube ) Statistics - Brandon Foltz Statistical Rethinking: A Bayesian Course Using R and Stan ( Lectures - Aalto University ) ( Book ) 02402 Introduction to Statistics E12 - Technical University of Denmark ( F17 ) Linear Algebra 18.06 - Linear Algebra, Prof. Gilbert Strang, MIT OCW 18.065 Matrix Methods in Data Analysis, Signal Processing, and Machine Learning - MIT OCW Linear Algebra (Princeton University) MOOC: Coding the Matrix: Linear Algebra through Computer Science Applications - Coursera CS 053 - Coding the Matrix - Brown University ( Fall 14 videos ) Linear Algebra Review - CMU A first course in Linear Algebra - N J Wildberger - UNSW INTRODUCTION TO MATRIX ALGEBRA Computational Linear Algebra - fast.ai ( Github ) 10-600 Math Background for ML - CMU MIT 18.065 Matrix Methods in Data Analysis, Signal Processing, and Machine Learning 36-705 - Intermediate Statistics - Larry Wasserman, CMU ( YouTube ) Combinatorics - IISC Bangalore Advanced Engineering Mathematics - Notre Dame Statistical Computing for Scientists and Engineers - Notre Dame Statistical Computing, Fall 2017 - Notre Dame Mathematics for Machine Learning, Lectures by Ulrike von Luxburg - T\u00fcbingen Machine Learning Web Programming and Internet Technologies CS50's Web Programming with Python and JavaScript Web Design Decal - HTML/CSS/JavaScript Course, University of California, Berkeley CS 75 Building Dynamic Websites - Harvard University Internet Technology - IIT Kharagpur Introduction to Modern Application Development - IIT Madras CSE 199 - How the Internet Works, Fall 2016 - University of Buffalo Open Sourced Elective: Database and Rails - Intro to Ruby on Rails, University of Texas ( Lectures - Youtube ) CSEP545 - Transaction Processing for E-Commerce, Winter 2012 - University of Washington ( Videos ) CT 310 Web Development - Colorado State University Internet Technologies and Applications 2012, Steven Gordon - Thammasat University, Thailand CSCI 3110 Advanced Topics in Web Development, Fall 2011 - ETSU iTunes CSCI 5710 e-Commerce Implementation, Fall 2015 - ETSU iTunes MOOC - Web Development - Udacity Web Technologies Prof. Dr. Christoph Meinel - HPI Theoretical CS and Programming Languages MOOC - Compilers - Stanford University CS 164 Hack your language, UC Berkeley ( Lectures - Youtube ) Theory of computation - Shai Simonson CS 173 Programming Languages, Brown University ( Book ) CS 421 - Programming Languages and Compilers, UIUC CSC 253 - CPython internals: A ten-hour codewalk through the Python interpreter source code, University of Rochester CSE341 - Programming Languages, Dan Grossman, Spring 2013 - University of Washington CSEP 501 - Compiler Construction, University of Washington ( Lectures - Youtube ) CSEP 505 Programming Languages, Winter 2015 - University of Washington DMFP - Discrete Mathematics and Functional Programming, Wheaton College CS 374 - Algorithms & Models of Computation (Fall 2014), UIUC ( Lecture videos ) 6.045 Automata, Computability, and Complexity, MIT ( Lecture Videos ) MOOC - Automata - Jeffrey Ullman - Coursera CS581 Theory of Computation - Portland State University ( Lectures - Youtube ) Theory of Computation - Fall 2011 UC Davis TDA555 Introduction to Functional Programming - Chalmers University of Technology ( Lectures - YouTube ) Philip Wadler Haskell lecture recordings Functional Programming - University of Edinburgh - 2016-17 MOOC - Functional Programming Principles in Scala by Martin Odersky CS294 - Program Synthesis for Everyone MOOC - Principles of Reactive Programming, Scala - Coursera Category Theory for Programmers, 2014 - Bartosz Milewski ( YouTube ) Oregon Programming Languages Summer School (Proof theory, type theory, category theory, verification) 2012 Lectures 2013 Lectures 2014 Lectures 2015 Lectures 2016 Lectures Inf1 - Computation and Logic 2015 - University of Edinburgh INFORMATICS 1 - FUNCTIONAL PROGRAMMING - University of Edinburgh ( Videos ) Compiler Design - IISC Bangalore Compiler Design - IIT Kanpur Principles of Programming Languages - IIT Delhi Principles of Compiler Design - IISC Bangalore Functional Programming in Haskell - IIT Madras Theory of Computation - IIT Kanpur Theory of Automata, Formal Languages and Computation - IIT Madras Theory of Computation - IIT Kanpur Logic for CS - IIT Delhi Principles of Compiler Design - Swarthmore College Undergrad Complexity Theory at CMU Graduate Complexity Theory at CMU Great Ideas in Theoretical Computer Science at CMU Analysis of Boolean Functions at CMU Theoretical Computer Science (Bridging Course)(Tutorial) - SS 2015 Languages & Translators - UCLouvain LINFO2132 Embedded Systems EE319K Embedded Systems - UT Austin EE445L Embedded Systems Design Lab, Fall 2015, UTexas CS149 Embedded Systems - Fall 2014 - UCBerkeley ECE 4760 Designing with Microcontrollers Fall 2016, Cornell University ( Lectures - Youtube ) ECE 5760 - Advanced Microcontroller Design and system-on-chip, Spring 2016 - Cornell University CSE 438/598 Embedded Systems Programming ASU Summer Short Course on Embedded Systems Programming Internet of Things by Prof. Dr.-Ing. Dietmar P. F. M\u00f6ller CSE 351 - The Hardware/Software Interface, Spring 16 - University of Washington ( Coursera ) ECE 5030 - Electronic Bioinstrumentation, Spring 2014 - Cornell University ECE/CS 5780/6780 - Embedded Systems Design, Spring 14 - University of Utah Embedded Systems Class - Version 1 - 2011 - UNCC Embedded Systems using the Renesas RX63N Processor - Version 3 - UNCC ELEC2142 - Embedded Systems Design - UNSW Software Engineering for Embedded Systems (WS 2011/12) - HPI University of Potsdam Embedded Software Testing - IIT Madras Embedded Systems - IIT Delhi Embedded Systems Design - IIT Kharagpur ARM Based Development - IIT Madras Software Engineering for Self Adaptive Systems - iTunes - HPI University of Potsdam EE260 Embedded Systems by Robert Paz IoT Summer School ECSE 421 - Embedded Systems - McGill EE402 - Object-oriented Programming with Embedded Systems NOC:Advanced IOT Applications - IISc Bangalore NOC:Design for internet of things - IISc Bangalore Real time system evaluation Performance evaluation of Computer systems - IIT Madras Real Time systems - IIT Karaghpur EE 380 Colloquim on Computer Systems - Stanford University System storages - IISc Bangalore Computer Organization and Architecture Computer Organization How Computers Work - Aduni CS 61C - Machine Structures, UC Berkeley ( Lectures - InfoCoBuild ) 6.004 - Computation Structures Spring 2013, MIT CS/ECE 3810 Computer Organization, Fall 2015, , University of Utah ( YouTube ) Digital Computer Organization - IIT Kharagpur Computer Organization - IIT Madras CS-224 - Computer Organization, 2009-2010 Spring, Bilkent University ( YouTube playlist ) INFORMATICS 2C - INTRODUCTION TO COMPUTER SYSTEMS (AUTUMN 2016) - University of Edinburgh Computer Architecture 18-447 - Introduction to Computer Architecture, CMU ( Lectures - YouTube - Fall 15 ) CS 152 Computer Architecture and Engineering, UC Berkeley CSEP 548 - Computer Architecture Autumn 2012 - University of Washington CS/ECE 6810 Computer Architecture, Spring 2016, University of Utah ( YouTube ) MOOC - Computer Architecture, David Wentzlaff - Princeton University/Coursera Computer Architecture - ETH Z\u00fcrich - Fall 2019 Digital Circuits and Computer Architecture - ETH Zurich - Spring 2017 Computer Architecture - IIT Delhi Computer Architecture - IIT Kanpur Computer Architecture - IIT Madras High Performance Computer Architecture - IIT Kharagpur Parallel Computer Architecture 15-418 - Parallel Computer Architecture and Programming, CMU ( Lecture Videos ) CS 267 Applications of Parallel Computers, Spring 16 - UC Berkeley ( YouTube ) MOOC - Heterogeneous Parallel Programming - Coursera ECE 498AL - Programming Massively Parallel Processors Parallel Computing - IIT Delhi Parallel Architectures 2012/13- University of Edinburgh Digital Systems Design ELEC2141 Digital Circuit Design, UNSW Digital Systems Design - IIT Kharagpur Digital Design Course - 2015 - UNCC CS1 - Higher Computing - Richard Buckland UNSW MOOC - From NAND to Tetris - Building a Modern Computer From First Principles ( YouTube ) System Validation, TU Delft High Performance Computing - IISC Bangalore Introduction to ARM - Open SecurityTraining Intro x86 (32 bit) - Open SecurityTraining Intermediate x86 (32 bit) - Open SecurityTraining Design of Digital Circuits - ETH Z\u00fcrich - Spring 2019 Onur Mutlu @ TU Wien 2019 - Memory Systems Memory Systems Course - Technion, Summer 2018 Security Internet Security (WT 2018/19) - HPI University of Potsdam 6.858 Computer Systems Security - MIT OCW CS 161: Computer Security, UC Berkeley 6.875 - Cryptography - Spring 2018- MIT CSEP590A - Practical Aspects of Modern Cryptography, Winter 2011 - University of Washington ( Videos ) CS461/ECE422 - Computer Security - University of Illinois at Urbana-Champaign ( Videos ) Introduction to Cryptography, Christof Paar - Ruhr University Bochum, Germany ECS235B Foundations of Computer and Information Security - UC Davis CIS 4930/ CIS 5930 - Offensive Computer Security, Florida State University Introduction to Information Security I - IIT Madras Information Security - II - IIT Madras Introduction to Cryptology - IIT Roorkee Cryptography and Network Security - IIT Kharagpur 18-636 Browser Security, Stanford Internet Security - Weaknesses and Targets (WT 2015/16) ( WT 2012/13 ( YouTube )) IT Security, Steven Gordon - Thammasat University, Thailand Security and Cryptography, Steven Gordon - Thammasat University, Thailand MOOC - Cryptography - Coursera MOOC - Intro to Information Security - Udacity ICS 444 - Computer & Network Security Privacy and Security in Online Social Networks - IIT Madras Malware Dynamic Analysis - Open SecurityTraining ( YouTube ) CSN09112 - Network Security and Cryptography - Bill Buchanan - Edinburgh Napier CSN10107 - Security Testing and Network Forensics - Bill Buchanan - Edinburgh Napier CSN11123 - Advanced Cloud and Network Forensics - Bill Buchanan - Edinburgh Napier CSN11117 - e-Security - Bill Buchanan - Edinburgh Napier CSN08704 - Telecommunications - Bill Buchanan - Edinburgh Napier CSN11128 - Incident Response and Malware Analysis - Bill Buchanan - Edinburgh Napier Internet Security for Beginners by Dr. Christoph Meinel - HPI Computer Graphics CS184 - Computer Graphics, Fall 2012 - UC Berkeley ECS 175 - Computer Graphics, Fall 2009 - UC Davis 6.837 - Computer Graphics - Spring 2017 - MIT 6.838 - Shape Analysis - Spring 2017- MIT Introduction to Computer Graphics - IIT Delhi Computer Graphics - IIT Madras Computer Graphics 2012, Wolfgang Huerst, Utrecht University CS 5630/6630 - Visualization, Fall 2016, University of Utah ( Lectures - Youtube ) Advanced Visualization UC Davis CSCI E-234 - Introduction to Computer Graphics and GPU Programming, Harvard Extension School Computer Graphics Fall 2011, Barbara Hecker Introduction to Graphics Architecture Ray Tracing for Global Illumination, UCDavis Rendering / Ray Tracing Course, SS 2015 - TU Wien ECS 178 Introduction to Geometric Modeling, Fall 2012, UC Davis ( iTunes ) Computational Geometry - IIT Delhi CS 468 - Differential Geometry for Computer Science - Stanford University ( Lecture videos ) CMU 15-462/662: Computer Graphics Image Processing and Computer Vision MOOC - Digital Image processing - Duke/Coursera Computer Vision 2011 - EPFL, Switzerland Digital Image Processing - IIT Kharagpur Image Processing and Analysis - UC Davis CS 543 - Computer Vision \u2013 Spring 2017 ( Recordings ) CAP 5415 - Computer Vision - University of Central Florida ( Video Lectures ) EE225B - Digital Image Processing, Spring 2014 - UC Berkeley ( Videos - Spring 2006 ) EE637 - Digital Image Processing I - Purdue University ( Videos - Sp 2011 , Videos - Sp 2007 ) Computer Vision I: Variational Methods - TU M\u00fcnchen ( YouTube ) Computer Vision II: Multiple View Geometry (IN2228), SS 2016 - TU M\u00fcnchen ( YouTube ) EGGN 510 - Image and Multidimensional Signal Processing - Colorado School of Mines EENG 512/CSCI 512 - Computer Vision - Colorado School of Mines Computer Vision for Visual Effects - RPI ( YouTube ) Introduction to Image Processing - RPI ( YouTube ) CAP 6412 - Advanced Computer Vision - University of Central Florida ( Video lectures ) ( Spring 2018 ) Digital Signal Processing - RPI Advanced Vision 2014 - University of Edinburgh Photogrammetry Course - 2015/16 - University of Bonn, Germany MOOC - Introduction to Computer Vision - Udacity ECSE-4540 - Intro to Digital Image Processing - Spring 2015 - RPI Machine Learning for Computer Vision - Winter 2017-2018 - UniHeidelberg High-Level Vision - CBCSL OSU Advanced Computer Vision - CBCSL OSU Introduction to Image Processing & Computer Vision - CBCSL OSU Machine Learning for Computer Vision - TU Munich Biometrics - IIT Kanpur Quantitative Big Imaging 2019 ETH Zurich Multiple View Geometry in Computer Vision 3D Coordinate Systems \u2013 Remote Course (GE, 2020) - University of Bonn ( 2013 lectures ) Modern C++ Course For CV (2020) - University of Bonn Photogrammetry 1 Course \u2013 2020 - University of Bonn Photogrammetry II Course 2020/21 - University of Bonn Computational Biology ECS 124 - Foundations of Algorithms for Bioinformatics - Dan Gusfield, UC Davis ( YouTube ) CSE549 - Computational Biology - Steven Skiena - 2010 SBU 7.32 Systems Biology, Fall 2014 - MIT OCW 6.802J/ 6.874J Foundations of Computational and Systems Biology - MIT OCW 6.047/6.878 Public Lectures on Computational Biology: Genomes, Networks, Evolution - MIT Bio 84 - Your Genes and Your Health, Stanford University BioMedical Informatics 231 Computational Molecular Biology, Stanford University BioMedical Informatics 258 Genomics, Bioinformatics & Medicine, Stanford University 03-251: Introduction to Computational Molecular Biology - Carnegie Mellon University 03-712: Biological Modeling and Simulation - Carnegie Mellon University MOOC - Bioinformatics Algorithms: An Active Learning Approach - UC San Diego/Coursera Neural Networks and Biological Modeling - Lecturer: Prof. Wulfram Gerstner - EPFL Video Lectures of Wulfram Gerstner: Computational Neuroscience - EPFL An Introduction To Systems Biology Introduction to Bioinformatics, METUOpenCourseWare MOOC - Algorithms for DNA Sequencing, Coursera Frontiers of Biomedical Engineering with W. Mark Saltzman - Yale NOC:Computational Systems Biology - IIT Madras NOC:BioInformatics:Algorithms and Applications - IIT Madras Quantum Computing 15-859BB: Quantum Computation and Quantum Information 2018 - CMU ( Youtube ) Quantum Mechanics for Scientists and Engineers Quantum Mechanics and Quantum Computation - Umesh Vazirani Quantum Information and Computing by Prof. D.K. Ghosh Quantum Computing by Prof. Debabrata Goswami The Building Blocks of a Quantum Computer: Part 1 - TU Delft The Building Blocks of a Quantum Computer: Part 2 - TU Delft Quantum Cryptography - TU Delft Robotics CS 223A - Introduction to Robotics, Stanford University 6.832 Underactuated Robotics - MIT OCW CS287 Advanced Robotics at UC Berkeley Fall 2019 -- Instructor: Pieter Abbeel CS 287 - Advanced Robotics, Fall 2011, UC Berkeley ( Videos ) CS235 - Applied Robot Design for Non-Robot-Designers - Stanford University Lecture: Visual Navigation for Flying Robots ( YouTube ) CS 205A: Mathematical Methods for Robotics, Vision, and Graphics (Fall 2013) Robotics 1, Prof. De Luca, Universit\u00e0 di Roma ( YouTube ) Robotics 2, Prof. De Luca, Universit\u00e0 di Roma ( YouTube ) Robot Mechanics and Control, SNU Introduction to Robotics Course - UNCC SLAM Lectures Introduction to Vision and Robotics 2015/16- University of Edinburgh ME 597 \u2013 Autonomous Mobile Robotics \u2013 Fall 2014 ME 780 \u2013 Perception For Autonomous Driving \u2013 Spring 2017 ME780 \u2013 Nonlinear State Estimation for Robotics and Computer Vision \u2013 Spring 2017 METR 4202/7202 -- Robotics & Automation - University of Queensland Robotics - IIT Bombay Introduction to Machine Vision 6.834J Cognitive Robotics - MIT OCW Hello (Real) World with ROS \u2013 Robot Operating System - TU Delft Programming for Robotics (ROS) - ETH Zurich Mechatronic System Design - TU Delft CS 206 Evolutionary Robotics Course Spring 2020 Foundations of Robotics - UTEC 2018-I Robotics - Youtube Robotics and Control: Theory and Practice IIT Roorkee Mechatronics ME142 - Mechatronics Spring 2020 - UC Merced Mobile Sensing and Robotics - Bonn University MSR2 - Sensors and State Estimation Course (2020) - Bonn University SLAM Course (2013) - Bonn University ENGR486 Robot Modeling and Control (2014W) Robotics by Prof. D K Pratihar - IIT Kharagpur Introduction to Mobile Robotics - SS 2019 - Universit\u00e4t Freiburg Robot Mapping - WS 2018/19 - Universit\u00e4t Freiburg Mechanism and Robot Kinematics - IIT Kharagpur Self-Driving Cars - Cyrill Stachniss - Winter 2020/21 - University of Bonn) Mobile Sensing and Robotics 1 \u2013 Part Stachniss (Jointly taught with PhoRS) - University of Bonn Mobile Sensing and Robotics 2 \u2013 Stachniss & Klingbeil/Holst - University of Bonn Aerial Robotics - University of Pennsylvania (UPenn) Modern Robotics - Northwestern University Computational Finance COMP510 - Computational Finance - Steven Skiena - 2007 HKUST MOOC - Mathematical Methods for Quantitative Finance, University of Washington/Coursera) 18.S096 Topics in Mathematics with Applications in Finance, MIT OCW Computational Finance - Universit\u00e4t Leipzig Machine Learning for Trading | Udacity ACT 460 / STA 2502 \u2013 Stochastic Methods for Actuarial Science - University of Toronto MMF1928H / STA 2503F \u2013 Pricing Theory I / Applied Probability for Mathematical Finance - University of Toronto STA 4505H \u2013 High Frequency & Algorithmic trading - University of Toronto Mathematical Finance - IIT Guwahati Quantitative Finance - IIT Kanpur Financial Derivatives & Risk Management - IIT Roorkee Financial Mathematics - IIT Roorkee Blockchain Development Blockchain and Cryptocurrencies Blockchain Fundamentals Decal 2018 - Berkeley DeCal Blockchain for Developers Decal - Spring 2018 - Berkeley DeCal Cryptocurrency Engineering and Design - Spring 2018 - MIT 15.S12 Blockchain and Money, Fall 2018 - MIT Blockchain - Foundations and Use Cases Become Blockchain Developer Solidity for Beginners - Dapp University Master Solidity - Dapp University IPFS Inter Planetary File System Dapp University Solidity, Blockchain, and Smart Contract Course \u2013 Beginner to Expert Python Tutorial - FreeCodingCamp Web 3.0 - Build Realtime Decentralized applications Misc HCI CS147 - Introduction to Human-Computer Interaction Design - Stanford CSEP 510 - Human Computer Interaction Programming for Designers - COMP1400-T2 (2010) - UNSW 08-763 Intro to HCI for Technology Executives - Fall 2015 - CMU 05-600 HCI Pro Seminar - Fall 2015 - CMU Game Development CS50's Introduction to Game Development MIT CMS.611J Creating Video Games, Fall 2014 MOOC - Beginning Game Programming with C# - Coursera Geospatial Introduction to Spatial Data Science, Autumn 2016, University of Chicago Spatial Regression Analysis, Spring 2017, University of Chicago Spatial Data Science, Autumn 2017, University of Chicago Introduction to Geographic Information Systems - IIT Roorkee SCICOMP - An Introduction to Efficient Scientific Computation, Universit\u00e4t Bremen CS E-259 XML with Java, Java Servlet, and JSP - Harvard CSE 40373 - Spr 2009: Multimedia Systems Exposing Digital Photography - Harvard Extension School MOOC - Matlab - Coursera Computing for Computer Scientists - University of Michigan Linux Implementation/Administration Practicum - Redhat by Tulio Llosa SIMS 141 - Search Engines - Fall 2005 UCBerkeley Innovative Computing - Harvard University Linux Programming & Scripting - IIT Madras Model Checking - IIT Madras Virtual Reality - IIT Madras CS 195 - Social Implications of Computing, Spring 2015 - UC Berkeley ( YouTube ) Spatial Databases and Geographic Information Systems - Technische Universit\u00e4t Braunschweig, Germany (in German) Dependable Systems (SS 2014) - HPI University of Potsdam Business Process Compliance (WT 2013/14) - HPI University of Potsdam Design Thinking for Digital Engineering (SS 2018) - Dr. Julia von Thienen - HPI CS224w \u2013 Social Network Analysis \u2013 Autumn 2017 - Stanford University","title":"Computer Science courses with video lectures"},{"location":"awesome/cs-video-courses/#computer-science-courses-with-video-lectures","text":"","title":"Computer Science courses with video lectures"},{"location":"awesome/cs-video-courses/#introduction","text":"Please check NOTES for general information about this list. Please refer CONTRIBUTING.md for contribution guidelines. Table of Contents Introduction to Computer Science Data Structures and Algorithms Systems Programming Database Systems Software Engineering Artificial Intelligence Machine Learning Web Programming and Internet Technologies Computer Networks Math for Computer Scientist Theoretical CS and Programming Languages Embedded Systems Real time system evaluation Computer Organization and Architecture Security Computer Graphics Image Processing and Computer Vision Computational Biology Quantum Computing Robotics Computational Finance Blockchain Development Misc","title":"Introduction"},{"location":"awesome/cs-video-courses/#courses","text":"","title":"Courses"},{"location":"awesome/cs-video-courses/#introduction-to-computer-science","text":"CS 10 - The Beauty and Joy of Computing - Spring 2015 - Dan Garcia - UC Berkeley InfoCoBuild 6.0001 - Introduction to Computer Science and Programming in Python - MIT OCW 6.001 - Structure and Interpretation of Computer Programs, MIT CS 50 - Introduction to Computer Science, Harvard University ( cs50.tv ) CS 61A - Structure and Interpretation of Computer Programs [Python], UC Berkeley CPSC 110 - Systematic Program Design [Racket], University of British Columbia CS50's Understanding Technology CSE 142 Computer Programming I (Java Programming), Spring 2016 - University of Washington CS 1301 Intro to computing - Gatech CS 106A - Programming Methodology, Stanford University ( Lecture Videos ) CS 106B - Programming Abstractions, Stanford University ( Lecture Videos ) CS 106X - Programming Abstractions in C++ ( Lecture Videos ) CS 107 - Programming Paradigms, Stanford University CmSc 150 - Introduction to Programming with Arcade Games, Simpson College LINFO 1104 - Paradigms of computer programming, Peter Van Roy, Universit\u00e9 catholique de Louvain, Belgium - EdX FP 101x - Introduction to Functional Programming, TU Delft Introduction to Problem Solving and Programming - IIT Kanpur Introduction to programming in C - IIT Kanpur Programming in C++ - IIT Kharagpur Python Boot Camp Fall 2016 - Berkeley Institute for Data Science (BIDS) CS 101 - Introduction to Computer Science - Udacity 6.00SC - Introduction to Computer Science and Programming (Spring 2011) - MIT OCW 6.00 - Introduction to Computer Science and Programming (Fall 2008) - MIT OCW 6.01SC - Introduction to Electrical Engineering and Computer Science I - MIT OCW Modern C++ Course (2018) - Bonn University Modern C++ (Lecture & Tutorials, 2020, Vizzo & Stachniss) - University of Bonn","title":"Introduction to Computer Science"},{"location":"awesome/cs-video-courses/#data-structures-and-algorithms","text":"6.006 - Introduction to Algorithms, MIT OCW Algorithms: Design and Analysis 1 - Stanford University Algorithms: Design and Analysis 2 - Stanford University COS 226 Algorithms, Youtube, Princeton - by Robert Sedgewick and Kevin Wayne CSE 331 Introduction to Algorithm Design and Analysis, SUNY University at Buffalo, NY - Fall 2017 ( Lectures ) ( Homework Walkthroughs ) CSE 373 - Analysis of Algorithms, Stony Brook - Prof Skiena COP 3530 Data Structures and Algorithms, Prof Sahni, UFL ( Videos ) CS225 - Data Structures - University of Illinois at Urbana-Champaign ( Video lectures ) CS2 - Data Structures and Algorithms - Richard Buckland - UNSW Data Structures - Pepperdine University CS 161 - Design and Analysis of Algorithms, Prof. Tim Roughgarden, Stanford University 6.046J - Introduction to Algorithms - Fall 2005, MIT OCW Introduction to Algorithms (Spring 2020), MIT OCW 6.046 - Design and Analysis of Algorithms, Spring 2015 - MIT OCW CS 473 - Algorithms - University of Illinois at Urbana-Champaign ( Notes - Jeff Erickson ) ( YouTube ) COMP300E - Programming Challenges, Prof Skiena, Hong Kong University of Science and Technology - 2009 16s-4102 - Algorithms, University of Virginia ( Youtube ) CS 170 Algorithms - UCBerkeley Fall 2018, Youtube Fall 2018,Bilibili 2013 Bilibili ECS 122A - Algorithm Design and Analysis, UC Davis CSEP 521 - Applied Algorithms, Winter 2013 - University of Washington ( Videos ) Data Structures And Algorithms - IIT Delhi Design and Analysis of Algorithms - IIT Bombay Programming, Data Structures and Algorithms - IIT Madras Design and Analysis of Algorithms - IIT Madras Fundamental Algorithms:Design and Analysis - IIT Kharagpur Programming and Data Structure - IIT Kharagpur Programming, Data structures and Algorithms - IIT Madras Programming, Data Structures and Algorithms in Python - IIT Madras Programming and Data structures (PDS) - IIT Madras COP 5536 Advanced Data Structures, Prof Sahni - UFL ( Videos ) CS 261 - A Second Course in Algorithms, Stanford University ( Youtube ) Informatics 2B - Algorithms, Data Structures and Learning- University of Edinburgh CS 224 - Advanced Algorithms, Harvard University ( Lecture Videos ) ( Youtube ) CS 6150 - Advanced Algorithms (Fall 2016), University of Utah CS 6150 - Advanced Algorithms (Fall 2017), University of Utah ECS 222A - Graduate Level Algorithm Design and Analysis, UC Davis 6.851 - Advanced Data Structures, MIT ( MIT OCW ) 6.854 - Advanced Algorithms, MIT ( Prof. Karger lectures ) CS264 Beyond Worst-Case Analysis, Fall 2014 - Tim Roughgarden Lecture ( Youtube ) CS364A Algorithmic Game Theory, Fall 2013 - Tim Roughgarden Lectures CS364B Advanced Mechanism Design, Winter 2014 - Tim Roughgarden Lectures Algorithms - Aduni 6.889 - Algorithms for Planar Graphs and Beyond (Fall 2011) MIT 6.890 Algorithmic Lower Bounds: Fun with Hardness Proofs - MIT OCW Computer Algorithms - 2 - IIT Kanpur Parallel Algorithm - IIT Kanpur Graph Theory - IISC Bangalore Data Structures - mycodeschool","title":"Data Structures and Algorithms"},{"location":"awesome/cs-video-courses/#systems-programming","text":"15-213 Introduction to Computer Systems, Fall 2015 - CMU CS361 - COMPUTER SYSTEMS - UIC CS 3650 - Computer Systems - Fall 2020 - Nat Tuck - NEU ( Lectures - YouTube ) CS 4400 \u2013 Computer Systems Fall 2016 - UoUtah Systems - Aduni CS110: Principles of Computer Systems - Stanford Operating Systems CS124 Operating Systems - California Institute of Technology, Fall 2018 - Youtube CS 162 Operating Systems and Systems Programming, Spring 2015 - University of California, Berkeley CS 4414 - Operating Systems, University of Virginia (rust-class) CS 4414 Operating Systems, Fall 2018 - University of Virginia CSE 421/521 - Introduction to Operating Systems, SUNY University at Buffalo, NY - Spring 2016 ( Lectures - YouTube ) ( Recitations 2016 ) ( Assignment walkthroughs ) CS 377 - Operating Systems, Fall 16 - Umass OS 6.828 - Operating System Engineering [Fall 2014] 6.S081 - Operating System Engineering [Fall 2020] CSE 30341 - Operating Systems, Spr 2008 CSEP 551 Operating Systems Autumn 2014 - University of Washington Introduction to Operating Systems - IIT Madras CS194 Advanced Operating Systems Structures and Implementation, Spring 2013 InfoCoBuild, UC Berkeley CSE 60641 - Graduate Operating Systems, Fall 08 Distributed Systems CS 677 - Distributed Operating Systems, Spring 16 - Umass OS CS 436 - Distributed Computer Systems - U Waterloo 6.824 - Distributed Systems, Spring 2015 - MIT 6.824 Distributed Systems - Spring 2020 - MIT ( Youtube ) Distributed Algorithms, https://canvas.instructure.com/courses/902299 CSEP 552 - PMP Distributed Systems, Spring 2013 - University of Washington ( Videos ) CSE 490H - Scalable Systems: Design, Implementation and Use of Large Scale Clusters, Autumn 2008 - University of Washington ( Videos ) MOOC - Cloud Computing Concepts - UIUC Distributed Systems (Prof. Pallab Dasgupta) EdX KTHx ID2203 Reliable Distributed Algorithms Distributed Data Management - Technische Universit\u00e4t Braunschweig, Germany Information Retrieval and Web Search Engines - Technische Universit\u00e4t Braunschweig, Germany Middleware and Distributed Systems (WS 2009/10) - Dr. Martin von L\u00f6wis - HPI Real-Time Systems CPCS 663 - Real-Time Systems: Video Material - TAMU Real Time Systems - IIT Kharagpur 6.172 Performance Engineering of Software Systems - MIT OCW Performance Evaluation of Computer Systems - IIT Madras Storage Systems - IISC Bangalore MAP6264 - Queueing Theory - FAU ( Video Lectures ) EE 380 Colloquim on Computer Systems - Stanford University ( Lecture videos )","title":"Systems Programming"},{"location":"awesome/cs-video-courses/#database-systems","text":"CMPSC 431W Database Management Systems, Fall 2015 - Penn State University Lectures - YouTube CS121 - Introduction to Relational Database Systems, Fall 2016 - Caltech CS 5530 - Database Systems, Spring 2016 - University of Utah Distributed Data Management (WT 2018/19) - HPI University of Potsdam MOOC - Database Stanford Dbclass CSEP 544, Database Management Systems, Au 2015 - University of Washington Database Design - IIT Madras Fundamentals of Database Systems - IIT Kanpur Principles of Database Management, Bart Baesens FIT9003 Database Systems Design - Monash University 15-445 - Introduction to Database Systems, CMU ( YouTube-2018 , YouTube-2017 , YouTube-2019 ) 15-721 - Database Systems, CMU ( YouTube-2017 , YouTube-2016 ) 15-721 Advanced Database Systems (Spring 2019) - CMU CS122 - Relational Database System Implementation, Winter 2014-2015 - Caltech CS 186 - Database Systems, UC Berkeley, Spring 2015 ( Lectures- InfoCoBuild ) CS 6530 - Graduate-level Database Systems, Fall 2016, University of Utah ( Lectures - YouTube ) 6.830/6.814 - Database Systems [Fall 2014] Informatics 1 - Data & Analysis 2014/15- University of Edinburgh Database Management Systems, Aduni D4M - Signal Processing on Databases In-Memory Data Management (2013)Prof. Hasso Plattner - HPI Distributed Data Management (WT 2019/20) - Dr. Thorsten Papenbrock - HPI","title":"Database Systems"},{"location":"awesome/cs-video-courses/#software-engineering","text":"Object Oriented Design ECE 462 Object-Oriented Programming using C++ and Java - Purdue Object-oriented Program Design and Software Engineering - Aduni OOSE - Object-Oriented Software Engineering, Dr. Tim Lethbridge Object Oriented Systems Analysis and Design (Systems Analysis and Design in a Changing World) CS 251 - Intermediate Software Design (C++ version) - Vanderbilt University OOSE - Software Dev Using UML and Java Object-Oriented Analysis and Design - IIT Kharagpur CS3 - Design in Computing - Richard Buckland UNSW Informatics 1 - Object-Oriented Programming 2014/15- University of Edinburgh Software Engineering with Objects and Components 2015/16- University of Edinburgh Software Engineering Computer Science 169- Software Engineering - Spring 2015 - UCBerkeley Computer Science 169- Software Engineering - Fall 2019 - UCBerkeley CS 5150 - Software Engineering, Fall 2014 - Cornell University Introduction to Service Design and Engineering - University of Trento, Italy CS 164 Software Engineering - Harvard System Analysis and Design - IISC Bangalore Software Engineering - IIT Bombay Dependable Systems (SS 2014)- HPI University of Potsdam Software Testing - IIT Kharagpur Software Testing - Udacity, course-cs258 | 2015 Software Debugging - Udacity, course-cs259 | 2015 Software Engineering - Bauhaus-Uni Weimar Software Architecture CS 411 - Software Architecture Design - Bilkent University MOOC - Software Architecture & Design - Udacity Concurrency CS176 - Multiprocessor Synchronization - Brown University ( Videos from 2012 ) CS 282 (2014): Concurrent Java Network Programming in Android CSE P 506 \u2013 Concurrency, Spring 2011 - University of Washington ( Videos ) CSEP 524 - Parallel Computation - University of Washington ( Videos ) Parallel Programming Concepts (WT 2013/14) - HPI University of Potsdam Parallel Programming Concepts (WT 2012/13) - HPI University of Potsdam Mobile Application Development MOOC Programming Mobile Applications for Android Handheld Systems - University of Maryland CS 193p - Developing Applications for iOS, Stanford University CS S-76 Building Mobile Applications - Harvard CS 251 (2015): Intermediate Software Design Android App Development for Beginners Playlist - thenewboston Android Application Development Tutorials - thenewboston MOOC - Developing Android Apps - Udacity MOOC - Advanced Android App Development - Udacity CSSE490 Android Development Rose-Hulman Winter 2010-2011, Dave Fisher iOS Course, Dave Fisher Developing iPad Applications for Visualization and Insight - Carnegie Mellon University Mobile Computing - IIT Madras Mobile Information Systems - Bauhaus-Uni Weimar","title":"Software Engineering"},{"location":"awesome/cs-video-courses/#artificial-intelligence","text":"CS50 - Introduction to Artificial Intelligence with Python (and Machine Learning), Harvard OCW CS 188 - Introduction to Artificial Intelligence, UC Berkeley - Spring 2015 6.034 Artificial Intelligence, MIT OCW CS221: Artificial Intelligence: Principles and Techniques - Autumn 2019 - Stanford University 15-780 - Graduate Artificial Intelligence, Spring 14, CMU CSE 592 Applications of Artificial Intelligence, Winter 2003 - University of Washington CS322 - Introduction to Artificial Intelligence, Winter 2012-13 - UBC ( YouTube ) CS 4804: Introduction to Artificial Intelligence, Fall 2016 CS 5804: Introduction to Artificial Intelligence, Spring 2015 Artificial Intelligence - IIT Kharagpur Artificial Intelligence - IIT Madras Artificial Intelligence(Prof.P.Dasgupta) - IIT Kharagpur MOOC - Intro to Artificial Intelligence - Udacity MOOC - Artificial Intelligence for Robotics - Udacity Graduate Course in Artificial Intelligence, Autumn 2012 - University of Washington Agent-Based Systems 2015/16- University of Edinburgh Informatics 2D - Reasoning and Agents 2014/15- University of Edinburgh Artificial Intelligence - Hochschule Ravensburg-Weingarten Deductive Databases and Knowledge-Based Systems - Technische Universit\u00e4t Braunschweig, Germany Artificial Intelligence: Knowledge Representation and Reasoning - IIT Madras Semantic Web Technologies by Dr. Harald Sack - HPI Knowledge Engineering with Semantic Web Technologies by Dr. Harald Sack - HPI","title":"Artificial Intelligence"},{"location":"awesome/cs-video-courses/#machine-learning","text":"Introduction to Machine Learning MOOC Machine Learning Andrew Ng - Coursera/Stanford ( Notes ) Introduction to Machine Learning for Coders MOOC - Statistical Learning, Stanford University Foundations of Machine Learning Boot Camp, Berkeley Simons Institute CS155 - Machine Learning & Data Mining, 2017 - Caltech ( Notes ) ( 2016 ) CS 156 - Learning from Data, Caltech 10-601 - Introduction to Machine Learning (MS) - Tom Mitchell - 2015, CMU ( YouTube ) 10-601 Machine Learning | CMU | Fall 2017 10-701 - Introduction to Machine Learning (PhD) - Tom Mitchell, Spring 2011, CMU ( Fall 2014 ) ( Spring 2015 by Alex Smola ) 10 - 301/601 - Introduction to Machine Learning - Spring 2020 - CMU CMS 165 Foundations of Machine Learning and Statistical Inference - 2020 - Caltech Microsoft Research - Machine Learning Course CS 446 - Machine Learning, Spring 2019, UIUC ( Fall 2016 Lectures ) undergraduate machine learning at UBC 2012, Nando de Freitas CS 229 - Machine Learning - Stanford University ( Autumn 2018 ) CS 189/289A Introduction to Machine Learning, Prof Jonathan Shewchuk - UCBerkeley CPSC 340: Machine Learning and Data Mining (2018) - UBC CS4780/5780 Machine Learning, Fall 2013 - Cornell University CS4780/5780 Machine Learning, Fall 2018 - Cornell University ( Youtube ) CSE474/574 Introduction to Machine Learning - SUNY University at Buffalo CS 5350/6350 - Machine Learning, Fall 2016, University of Utah ECE 5984 Introduction to Machine Learning, Spring 2015 - Virginia Tech CSx824/ECEx242 Machine Learning, Bert Huang, Fall 2015 - Virginia Tech STA 4273H - Large Scale Machine Learning, Winter 2015 - University of Toronto CS 485/685 Machine Learning, Shai Ben-David, University of Waterloo STAT 441/841 Classification Winter 2017 , Waterloo 10-605 - Machine Learning with Large Datasets, Fall 2016 - CMU Information Theory, Pattern Recognition, and Neural Networks - University of Cambridge Python and machine learning - Stanford Crowd Course Initiative MOOC - Machine Learning Part 1a - Udacity/Georgia Tech ( Part 1b Part 2 Part 3 ) Machine Learning and Pattern Recognition 2015/16- University of Edinburgh Introductory Applied Machine Learning 2015/16- University of Edinburgh Pattern Recognition Class (2012)- Universit\u00e4t Heidelberg Introduction to Machine Learning and Pattern Recognition - CBCSL OSU Introduction to Machine Learning - IIT Kharagpur Introduction to Machine Learning - IIT Madras Pattern Recognition - IISC Bangalore Pattern Recognition and Application - IIT Kharagpur Pattern Recognition - IIT Madras Machine Learning Summer School 2013 - Max Planck Institute for Intelligent Systems T\u00fcbingen Machine Learning - Professor Kogan (Spring 2016) - Rutgers CS273a: Introduction to Machine Learning ( YouTube ) Machine Learning Crash Course 2015 COM4509/COM6509 Machine Learning and Adaptive Intelligence 2015-16 10715 Advanced Introduction to Machine Learning Introduction to Machine Learning - Spring 2018 - ETH Zurich Machine Learning - Pedro Domingos- University of Washington Advanced Machine Learning - 2019 - ETH Z\u00fcrich Machine Learning (COMP09012) Probabilistic Machine Learning 2020 - University of T\u00fcbingen Statistical Machine Learning 2020 - Ulrike von Luxburg - University of T\u00fcbingen COMS W4995 - Applied Machine Learning - Spring 2020 - Columbia University Machine Learning for Engineers 2022 ( YouTube ) Data Mining CSEP 546, Data Mining - Pedro Domingos, Sp 2016 - University of Washington ( YouTube ) CS 5140/6140 - Data Mining, Spring 2016, University of Utah ( Youtube ) CS 5955/6955 - Data Mining, University of Utah ( YouTube ) Statistics 202 - Statistical Aspects of Data Mining, Summer 2007 - Google ( YouTube ) MOOC - Text Mining and Analytics by ChengXiang Zhai Information Retrieval SS 2014, iTunes - HPI MOOC - Data Mining with Weka CS 290 DataMining Lectures CS246 - Mining Massive Data Sets, Winter 2016, Stanford University ( YouTube ) Data Mining: Learning From Large Datasets - Fall 2017 - ETH Zurich Information Retrieval - Spring 2018 - ETH Zurich CAP6673 - Data Mining and Machine Learning - FAU ( Video lectures ) Data Warehousing and Data Mining Techniques - Technische Universit\u00e4t Braunschweig, Germany Data Science Data 8: The Foundations of Data Science - UC Berkeley ( Summer 17 ) CSE519 - Data Science Fall 2016 - Skiena, SBU CS 109 Data Science, Harvard University ( YouTube ) 6.0002 Introduction to Computational Thinking and Data Science - MIT OCW Data 100 - Summer 19- UC Berkeley Distributed Data Analytics (WT 2017/18) - HPI University of Potsdam Statistics 133 - Concepts in Computing with Data, Fall 2013 - UC Berkeley Data Profiling and Data Cleansing (WS 2014/15) - HPI University of Potsdam AM 207 - Stochastic Methods for Data Analysis, Inference and Optimization, Harvard University CS 229r - Algorithms for Big Data, Harvard University ( Youtube ) Algorithms for Big Data - IIT Madras Python Data Science with the TCLab ( YouTube ) Probabilistic Graphical Modeling MOOC - Probabilistic Graphical Models - Coursera CS 6190 - Probabilistic Modeling, Spring 2016, University of Utah 10-708 - Probabilistic Graphical Models, Carnegie Mellon University Probabilistic Graphical Models, Daphne Koller, Stanford University Probabilistic Models - UNIVERSITY OF HELSINKI Probabilistic Modelling and Reasoning 2015/16- University of Edinburgh Probabilistic Graphical Models, Spring 2018 - Notre Dame Deep Learning NYU Deep Learning Spring 2020 NYU Deep Learning Spring 2021 6.S191: Introduction to Deep Learning - MIT Deep Learning CMU Part 1: Practical Deep Learning for Coders, v3 - fast.ai Part 2: Deep Learning from the Foundations - fast.ai Deep learning at Oxford 2015 - Nando de Freitas 6.S094: Deep Learning for Self-Driving Cars - MIT CS294-129 Designing, Visualizing and Understanding Deep Neural Networks ( YouTube ) CS230: Deep Learning - Autumn 2018 - Stanford University STAT-157 Deep Learning 2019 - UC Berkeley Full Stack DL Bootcamp 2019 - UC Berkeley Deep Learning, Stanford University MOOC - Neural Networks for Machine Learning, Geoffrey Hinton 2016 - Coursera Deep Unsupervised Learning -- Berkeley Spring 2020 Stat 946 Deep Learning - University of Waterloo Neural networks class - Universit\u00e9 de Sherbrooke ( YouTube ) CS294-158 Deep Unsupervised Learning SP19 DLCV - Deep Learning for Computer Vision - UPC Barcelona DLAI - Deep Learning for Artificial Intelligence @ UPC Barcelona Neural Networks and Applications - IIT Kharagpur UVA DEEP LEARNING COURSE Nvidia Machine Learning Class Deep Learning - Winter 2020-21 - T\u00fcbingen Machine Learning Reinforcement Learning CS234: Reinforcement Learning - Winter 2019 - Stanford University Introduction to reinforcement learning - UCL Advanced Deep Learning & Reinforcement Learning - UCL Reinforcement Learning - IIT Madras CS885 Reinforcement Learning - Spring 2018 - University of Waterloo CS 285 - Deep Reinforcement Learning- UC Berkeley CS 294 112 - Reinforcement Learning NUS CS 6101 - Deep Reinforcement Learning ECE 8851: Reinforcement Learning CS294-112, Deep Reinforcement Learning Sp17 ( YouTube ) UCL Course 2015 on Reinforcement Learning by David Silver from DeepMind ( YouTube ) Deep RL Bootcamp - Berkeley Aug 2017 Reinforcement Learning - IIT Madras Advanced Machine Learning Machine Learning 2013 - Nando de Freitas, UBC Machine Learning, 2014-2015, University of Oxford 10-702/36-702 - Statistical Machine Learning - Larry Wasserman, Spring 2016, CMU ( Spring 2015 ) 10-715 Advanced Introduction to Machine Learning - CMU ( YouTube ) CS 281B - Scalable Machine Learning, Alex Smola, UC Berkeley 18.409 Algorithmic Aspects of Machine Learning Spring 2015 - MIT CS 330 - Deep Multi-Task and Meta Learning - Fall 2019 - Stanford University ( Youtube ) ML based Natural Language Processing and Computer Vision CS 224d - Deep Learning for Natural Language Processing, Stanford University ( Lectures - Youtube ) CS 224N - Natural Language Processing, Stanford University ( Lecture videos ) CS 124 - From Languages to Information - Stanford University MOOC - Natural Language Processing, Dan Jurafsky & Chris Manning - Coursera fast.ai Code-First Intro to Natural Language Processing ( Github ) MOOC - Natural Language Processing - Coursera, University of Michigan CS 231n - Convolutional Neural Networks for Visual Recognition, Stanford University CS224U: Natural Language Understanding - Spring 2019 - Stanford University Deep Learning for Natural Language Processing, 2017 - Oxford University Machine Learning for Robotics and Computer Vision, WS 2013/2014 - TU M\u00fcnchen ( YouTube ) Informatics 1 - Cognitive Science 2015/16- University of Edinburgh Informatics 2A - Processing Formal and Natural Languages 2016-17 - University of Edinburgh Computational Cognitive Science 2015/16- University of Edinburgh Accelerated Natural Language Processing 2015/16- University of Edinburgh Natural Language Processing - IIT Bombay NOC:Deep Learning For Visual Computing - IIT Kharagpur CS 11-747 - Neural Nets for NLP - 2019 - CMU Natural Language Processing - Michael Collins - Columbia University Deep Learning for Computer Vision - University of Michigan CMU CS11-737 - Multilingual Natural Language Processing Time Series Analysis 02417 Time Series Analysis Applied Time Series Analysis Misc Machine Learning Topics EE364a: Convex Optimization I - Stanford University CS 6955 - Clustering, Spring 2015, University of Utah Info 290 - Analyzing Big Data with Twitter, UC Berkeley school of information ( YouTube ) 10-725 Convex Optimization, Spring 2015 - CMU 10-725 Convex Optimization: Fall 2016 - CMU CAM 383M - Statistical and Discrete Methods for Scientific Computing, University of Texas CS224W Machine Learning with Graphs | Spring 2021 | Stanford University 9.520 - Statistical Learning Theory and Applications, Fall 2015 - MIT Reinforcement Learning - UCL Regularization Methods for Machine Learning 2016 ( YouTube ) Statistical Inference in Big Data - University of Toronto 10-725 Optimization Fall 2012 - CMU 10-801 Advanced Optimization and Randomized Methods - CMU ( YouTube ) Reinforcement Learning 2015/16- University of Edinburgh Reinforcement Learning - IIT Madras Statistical Rethinking Winter 2015 - Richard McElreath Music Information Retrieval - University of Victoria, 2014 PURDUE Machine Learning Summer School 2011 Foundations of Machine Learning - Blmmoberg Edu Introduction to reinforcement learning - UCL Advanced Deep Learning & Reinforcement Learning - UCL Web Information Retrieval (Proff. L. Becchetti - A. Vitaletti) Big Data Systems (WT 2019/20) - Prof. Dr. Tilmann Rabl - HPI Distributed Data Analytics (WT 2017/18) - Dr. Thorsten Papenbrock - HPI","title":"Machine Learning"},{"location":"awesome/cs-video-courses/#computer-networks","text":"14-740 - Fundamentals of Computer Networks - CMU CS 144 Introduction to Computer Networking - Stanford University, Fall 2013 ( Lecture videos ) Computer Communication Networks, Rensselaer Polytechnic Institute - Fall 2001 ( Videos ) ( Slides ) Audio/Video Recordings and Podcasts of Professor Raj Jain's Lectures - Washington University in St. Louis ( YouTube ) Computer Networks, Tanenbaum, Wetherall Computer Networks 5e - Video Lectures CSEP 561 - PMP Network Systems, Fall 2013 - University of Washington ( Videos ) CSEP 561 \u2013 Network Systems, Autumn 2008 - University of Washington ( Videos ) Computer Networks - IIT Kharagpur Introduction to Data Communications 2013, Steven Gordon - Thammasat University, Thailand Introduction to Complex Networks - RIT Structural Analysis and Visualization of Networks Data Communication - IIT Kharagpur Error Correcting Codes - IISC Bangalore Information Theory and Coding - IIT Bombay Complex Network : Theory and Application - IIT Kharagpur Advanced 3G and 4G Wireless Mobile Communications - IIT Kanpur Broadband Networks: Concepts and Technology - IIT Bombay Coding Theory - IIT Madras Digital Communication - IIT Bombay Digital Voice & Picture Communication - IIT Kharagpur Wireless Ad Hoc and Sensor Networks - IIT Kharagpur Internetworking with TCP/IP by Prof. Dr. Christoph Meinel - HPI CS798: Mathematical Foundations of Computer Networking - University of Waterloo","title":"Computer Networks"},{"location":"awesome/cs-video-courses/#math-for-computer-scientist","text":"Maths courses all topics covered Calculus 18.01 Single Variable Calculus, Fall 2006 - MIT OCW 18.02 Multivariable Calculus, Fall 2007 - MIT OCW 18.03 Differential Equations, Spring 2010 - MIT OCW Highlights of Calculus - Gilbert Strang, MIT OCW Discrete Math 6.042J - Mathematics for Computer Science, Fall 2010, MIT OCW ( Spring 15 ) Computer Science 70, 001 - Spring 2015 CSE 547 Discrete Mathematics, Prof Skiena, University of Stony Brook Discrete Structures (Summer 2011) - Rutgers, The State University of New Jersey Discrete Mathematics and Mathematical Reasoning 2015/16 - University of Edinburgh Discrete Mathematical Structures - IIT Madras Discrete Structures - Pepperdine University Probability & Statistics 6.041 Probabilistic Systems Analysis and Applied Probability - MIT OCW Statistics 110 - Probability - Harvard University STAT 2.1x: Descriptive Statistics | UC Berkeley STAT 2.2x: Probability | UC Berkeley MOOC - Statistics: Making Sense of Data, Coursera MOOC - Statistics One - Coursera Probability and Random Processes - IIT Kharagpur MOOC - Statistical Inference - Coursera 131B - Introduction to Probability and Statistics, UCI STATS 250 - Introduction to Statistics and Data Analysis, UMichigan Sets, Counting and Probability - Harvard Opinionated Lessons in Statistics ( Youtube ) Statistics - Brandon Foltz Statistical Rethinking: A Bayesian Course Using R and Stan ( Lectures - Aalto University ) ( Book ) 02402 Introduction to Statistics E12 - Technical University of Denmark ( F17 ) Linear Algebra 18.06 - Linear Algebra, Prof. Gilbert Strang, MIT OCW 18.065 Matrix Methods in Data Analysis, Signal Processing, and Machine Learning - MIT OCW Linear Algebra (Princeton University) MOOC: Coding the Matrix: Linear Algebra through Computer Science Applications - Coursera CS 053 - Coding the Matrix - Brown University ( Fall 14 videos ) Linear Algebra Review - CMU A first course in Linear Algebra - N J Wildberger - UNSW INTRODUCTION TO MATRIX ALGEBRA Computational Linear Algebra - fast.ai ( Github ) 10-600 Math Background for ML - CMU MIT 18.065 Matrix Methods in Data Analysis, Signal Processing, and Machine Learning 36-705 - Intermediate Statistics - Larry Wasserman, CMU ( YouTube ) Combinatorics - IISC Bangalore Advanced Engineering Mathematics - Notre Dame Statistical Computing for Scientists and Engineers - Notre Dame Statistical Computing, Fall 2017 - Notre Dame Mathematics for Machine Learning, Lectures by Ulrike von Luxburg - T\u00fcbingen Machine Learning","title":"Math for Computer Scientist"},{"location":"awesome/cs-video-courses/#web-programming-and-internet-technologies","text":"CS50's Web Programming with Python and JavaScript Web Design Decal - HTML/CSS/JavaScript Course, University of California, Berkeley CS 75 Building Dynamic Websites - Harvard University Internet Technology - IIT Kharagpur Introduction to Modern Application Development - IIT Madras CSE 199 - How the Internet Works, Fall 2016 - University of Buffalo Open Sourced Elective: Database and Rails - Intro to Ruby on Rails, University of Texas ( Lectures - Youtube ) CSEP545 - Transaction Processing for E-Commerce, Winter 2012 - University of Washington ( Videos ) CT 310 Web Development - Colorado State University Internet Technologies and Applications 2012, Steven Gordon - Thammasat University, Thailand CSCI 3110 Advanced Topics in Web Development, Fall 2011 - ETSU iTunes CSCI 5710 e-Commerce Implementation, Fall 2015 - ETSU iTunes MOOC - Web Development - Udacity Web Technologies Prof. Dr. Christoph Meinel - HPI","title":"Web Programming and Internet Technologies"},{"location":"awesome/cs-video-courses/#theoretical-cs-and-programming-languages","text":"MOOC - Compilers - Stanford University CS 164 Hack your language, UC Berkeley ( Lectures - Youtube ) Theory of computation - Shai Simonson CS 173 Programming Languages, Brown University ( Book ) CS 421 - Programming Languages and Compilers, UIUC CSC 253 - CPython internals: A ten-hour codewalk through the Python interpreter source code, University of Rochester CSE341 - Programming Languages, Dan Grossman, Spring 2013 - University of Washington CSEP 501 - Compiler Construction, University of Washington ( Lectures - Youtube ) CSEP 505 Programming Languages, Winter 2015 - University of Washington DMFP - Discrete Mathematics and Functional Programming, Wheaton College CS 374 - Algorithms & Models of Computation (Fall 2014), UIUC ( Lecture videos ) 6.045 Automata, Computability, and Complexity, MIT ( Lecture Videos ) MOOC - Automata - Jeffrey Ullman - Coursera CS581 Theory of Computation - Portland State University ( Lectures - Youtube ) Theory of Computation - Fall 2011 UC Davis TDA555 Introduction to Functional Programming - Chalmers University of Technology ( Lectures - YouTube ) Philip Wadler Haskell lecture recordings Functional Programming - University of Edinburgh - 2016-17 MOOC - Functional Programming Principles in Scala by Martin Odersky CS294 - Program Synthesis for Everyone MOOC - Principles of Reactive Programming, Scala - Coursera Category Theory for Programmers, 2014 - Bartosz Milewski ( YouTube ) Oregon Programming Languages Summer School (Proof theory, type theory, category theory, verification) 2012 Lectures 2013 Lectures 2014 Lectures 2015 Lectures 2016 Lectures Inf1 - Computation and Logic 2015 - University of Edinburgh INFORMATICS 1 - FUNCTIONAL PROGRAMMING - University of Edinburgh ( Videos ) Compiler Design - IISC Bangalore Compiler Design - IIT Kanpur Principles of Programming Languages - IIT Delhi Principles of Compiler Design - IISC Bangalore Functional Programming in Haskell - IIT Madras Theory of Computation - IIT Kanpur Theory of Automata, Formal Languages and Computation - IIT Madras Theory of Computation - IIT Kanpur Logic for CS - IIT Delhi Principles of Compiler Design - Swarthmore College Undergrad Complexity Theory at CMU Graduate Complexity Theory at CMU Great Ideas in Theoretical Computer Science at CMU Analysis of Boolean Functions at CMU Theoretical Computer Science (Bridging Course)(Tutorial) - SS 2015 Languages & Translators - UCLouvain LINFO2132","title":"Theoretical CS and Programming Languages"},{"location":"awesome/cs-video-courses/#embedded-systems","text":"EE319K Embedded Systems - UT Austin EE445L Embedded Systems Design Lab, Fall 2015, UTexas CS149 Embedded Systems - Fall 2014 - UCBerkeley ECE 4760 Designing with Microcontrollers Fall 2016, Cornell University ( Lectures - Youtube ) ECE 5760 - Advanced Microcontroller Design and system-on-chip, Spring 2016 - Cornell University CSE 438/598 Embedded Systems Programming ASU Summer Short Course on Embedded Systems Programming Internet of Things by Prof. Dr.-Ing. Dietmar P. F. M\u00f6ller CSE 351 - The Hardware/Software Interface, Spring 16 - University of Washington ( Coursera ) ECE 5030 - Electronic Bioinstrumentation, Spring 2014 - Cornell University ECE/CS 5780/6780 - Embedded Systems Design, Spring 14 - University of Utah Embedded Systems Class - Version 1 - 2011 - UNCC Embedded Systems using the Renesas RX63N Processor - Version 3 - UNCC ELEC2142 - Embedded Systems Design - UNSW Software Engineering for Embedded Systems (WS 2011/12) - HPI University of Potsdam Embedded Software Testing - IIT Madras Embedded Systems - IIT Delhi Embedded Systems Design - IIT Kharagpur ARM Based Development - IIT Madras Software Engineering for Self Adaptive Systems - iTunes - HPI University of Potsdam EE260 Embedded Systems by Robert Paz IoT Summer School ECSE 421 - Embedded Systems - McGill EE402 - Object-oriented Programming with Embedded Systems NOC:Advanced IOT Applications - IISc Bangalore NOC:Design for internet of things - IISc Bangalore","title":"Embedded Systems"},{"location":"awesome/cs-video-courses/#real-time-system-evaluation","text":"Performance evaluation of Computer systems - IIT Madras Real Time systems - IIT Karaghpur EE 380 Colloquim on Computer Systems - Stanford University System storages - IISc Bangalore","title":"Real time system evaluation"},{"location":"awesome/cs-video-courses/#computer-organization-and-architecture","text":"Computer Organization How Computers Work - Aduni CS 61C - Machine Structures, UC Berkeley ( Lectures - InfoCoBuild ) 6.004 - Computation Structures Spring 2013, MIT CS/ECE 3810 Computer Organization, Fall 2015, , University of Utah ( YouTube ) Digital Computer Organization - IIT Kharagpur Computer Organization - IIT Madras CS-224 - Computer Organization, 2009-2010 Spring, Bilkent University ( YouTube playlist ) INFORMATICS 2C - INTRODUCTION TO COMPUTER SYSTEMS (AUTUMN 2016) - University of Edinburgh Computer Architecture 18-447 - Introduction to Computer Architecture, CMU ( Lectures - YouTube - Fall 15 ) CS 152 Computer Architecture and Engineering, UC Berkeley CSEP 548 - Computer Architecture Autumn 2012 - University of Washington CS/ECE 6810 Computer Architecture, Spring 2016, University of Utah ( YouTube ) MOOC - Computer Architecture, David Wentzlaff - Princeton University/Coursera Computer Architecture - ETH Z\u00fcrich - Fall 2019 Digital Circuits and Computer Architecture - ETH Zurich - Spring 2017 Computer Architecture - IIT Delhi Computer Architecture - IIT Kanpur Computer Architecture - IIT Madras High Performance Computer Architecture - IIT Kharagpur Parallel Computer Architecture 15-418 - Parallel Computer Architecture and Programming, CMU ( Lecture Videos ) CS 267 Applications of Parallel Computers, Spring 16 - UC Berkeley ( YouTube ) MOOC - Heterogeneous Parallel Programming - Coursera ECE 498AL - Programming Massively Parallel Processors Parallel Computing - IIT Delhi Parallel Architectures 2012/13- University of Edinburgh Digital Systems Design ELEC2141 Digital Circuit Design, UNSW Digital Systems Design - IIT Kharagpur Digital Design Course - 2015 - UNCC CS1 - Higher Computing - Richard Buckland UNSW MOOC - From NAND to Tetris - Building a Modern Computer From First Principles ( YouTube ) System Validation, TU Delft High Performance Computing - IISC Bangalore Introduction to ARM - Open SecurityTraining Intro x86 (32 bit) - Open SecurityTraining Intermediate x86 (32 bit) - Open SecurityTraining Design of Digital Circuits - ETH Z\u00fcrich - Spring 2019 Onur Mutlu @ TU Wien 2019 - Memory Systems Memory Systems Course - Technion, Summer 2018","title":"Computer Organization and Architecture"},{"location":"awesome/cs-video-courses/#security","text":"Internet Security (WT 2018/19) - HPI University of Potsdam 6.858 Computer Systems Security - MIT OCW CS 161: Computer Security, UC Berkeley 6.875 - Cryptography - Spring 2018- MIT CSEP590A - Practical Aspects of Modern Cryptography, Winter 2011 - University of Washington ( Videos ) CS461/ECE422 - Computer Security - University of Illinois at Urbana-Champaign ( Videos ) Introduction to Cryptography, Christof Paar - Ruhr University Bochum, Germany ECS235B Foundations of Computer and Information Security - UC Davis CIS 4930/ CIS 5930 - Offensive Computer Security, Florida State University Introduction to Information Security I - IIT Madras Information Security - II - IIT Madras Introduction to Cryptology - IIT Roorkee Cryptography and Network Security - IIT Kharagpur 18-636 Browser Security, Stanford Internet Security - Weaknesses and Targets (WT 2015/16) ( WT 2012/13 ( YouTube )) IT Security, Steven Gordon - Thammasat University, Thailand Security and Cryptography, Steven Gordon - Thammasat University, Thailand MOOC - Cryptography - Coursera MOOC - Intro to Information Security - Udacity ICS 444 - Computer & Network Security Privacy and Security in Online Social Networks - IIT Madras Malware Dynamic Analysis - Open SecurityTraining ( YouTube ) CSN09112 - Network Security and Cryptography - Bill Buchanan - Edinburgh Napier CSN10107 - Security Testing and Network Forensics - Bill Buchanan - Edinburgh Napier CSN11123 - Advanced Cloud and Network Forensics - Bill Buchanan - Edinburgh Napier CSN11117 - e-Security - Bill Buchanan - Edinburgh Napier CSN08704 - Telecommunications - Bill Buchanan - Edinburgh Napier CSN11128 - Incident Response and Malware Analysis - Bill Buchanan - Edinburgh Napier Internet Security for Beginners by Dr. Christoph Meinel - HPI","title":"Security"},{"location":"awesome/cs-video-courses/#computer-graphics","text":"CS184 - Computer Graphics, Fall 2012 - UC Berkeley ECS 175 - Computer Graphics, Fall 2009 - UC Davis 6.837 - Computer Graphics - Spring 2017 - MIT 6.838 - Shape Analysis - Spring 2017- MIT Introduction to Computer Graphics - IIT Delhi Computer Graphics - IIT Madras Computer Graphics 2012, Wolfgang Huerst, Utrecht University CS 5630/6630 - Visualization, Fall 2016, University of Utah ( Lectures - Youtube ) Advanced Visualization UC Davis CSCI E-234 - Introduction to Computer Graphics and GPU Programming, Harvard Extension School Computer Graphics Fall 2011, Barbara Hecker Introduction to Graphics Architecture Ray Tracing for Global Illumination, UCDavis Rendering / Ray Tracing Course, SS 2015 - TU Wien ECS 178 Introduction to Geometric Modeling, Fall 2012, UC Davis ( iTunes ) Computational Geometry - IIT Delhi CS 468 - Differential Geometry for Computer Science - Stanford University ( Lecture videos ) CMU 15-462/662: Computer Graphics","title":"Computer Graphics"},{"location":"awesome/cs-video-courses/#image-processing-and-computer-vision","text":"MOOC - Digital Image processing - Duke/Coursera Computer Vision 2011 - EPFL, Switzerland Digital Image Processing - IIT Kharagpur Image Processing and Analysis - UC Davis CS 543 - Computer Vision \u2013 Spring 2017 ( Recordings ) CAP 5415 - Computer Vision - University of Central Florida ( Video Lectures ) EE225B - Digital Image Processing, Spring 2014 - UC Berkeley ( Videos - Spring 2006 ) EE637 - Digital Image Processing I - Purdue University ( Videos - Sp 2011 , Videos - Sp 2007 ) Computer Vision I: Variational Methods - TU M\u00fcnchen ( YouTube ) Computer Vision II: Multiple View Geometry (IN2228), SS 2016 - TU M\u00fcnchen ( YouTube ) EGGN 510 - Image and Multidimensional Signal Processing - Colorado School of Mines EENG 512/CSCI 512 - Computer Vision - Colorado School of Mines Computer Vision for Visual Effects - RPI ( YouTube ) Introduction to Image Processing - RPI ( YouTube ) CAP 6412 - Advanced Computer Vision - University of Central Florida ( Video lectures ) ( Spring 2018 ) Digital Signal Processing - RPI Advanced Vision 2014 - University of Edinburgh Photogrammetry Course - 2015/16 - University of Bonn, Germany MOOC - Introduction to Computer Vision - Udacity ECSE-4540 - Intro to Digital Image Processing - Spring 2015 - RPI Machine Learning for Computer Vision - Winter 2017-2018 - UniHeidelberg High-Level Vision - CBCSL OSU Advanced Computer Vision - CBCSL OSU Introduction to Image Processing & Computer Vision - CBCSL OSU Machine Learning for Computer Vision - TU Munich Biometrics - IIT Kanpur Quantitative Big Imaging 2019 ETH Zurich Multiple View Geometry in Computer Vision 3D Coordinate Systems \u2013 Remote Course (GE, 2020) - University of Bonn ( 2013 lectures ) Modern C++ Course For CV (2020) - University of Bonn Photogrammetry 1 Course \u2013 2020 - University of Bonn Photogrammetry II Course 2020/21 - University of Bonn","title":"Image Processing and Computer Vision"},{"location":"awesome/cs-video-courses/#computational-biology","text":"ECS 124 - Foundations of Algorithms for Bioinformatics - Dan Gusfield, UC Davis ( YouTube ) CSE549 - Computational Biology - Steven Skiena - 2010 SBU 7.32 Systems Biology, Fall 2014 - MIT OCW 6.802J/ 6.874J Foundations of Computational and Systems Biology - MIT OCW 6.047/6.878 Public Lectures on Computational Biology: Genomes, Networks, Evolution - MIT Bio 84 - Your Genes and Your Health, Stanford University BioMedical Informatics 231 Computational Molecular Biology, Stanford University BioMedical Informatics 258 Genomics, Bioinformatics & Medicine, Stanford University 03-251: Introduction to Computational Molecular Biology - Carnegie Mellon University 03-712: Biological Modeling and Simulation - Carnegie Mellon University MOOC - Bioinformatics Algorithms: An Active Learning Approach - UC San Diego/Coursera Neural Networks and Biological Modeling - Lecturer: Prof. Wulfram Gerstner - EPFL Video Lectures of Wulfram Gerstner: Computational Neuroscience - EPFL An Introduction To Systems Biology Introduction to Bioinformatics, METUOpenCourseWare MOOC - Algorithms for DNA Sequencing, Coursera Frontiers of Biomedical Engineering with W. Mark Saltzman - Yale NOC:Computational Systems Biology - IIT Madras NOC:BioInformatics:Algorithms and Applications - IIT Madras","title":"Computational Biology"},{"location":"awesome/cs-video-courses/#quantum-computing","text":"15-859BB: Quantum Computation and Quantum Information 2018 - CMU ( Youtube ) Quantum Mechanics for Scientists and Engineers Quantum Mechanics and Quantum Computation - Umesh Vazirani Quantum Information and Computing by Prof. D.K. Ghosh Quantum Computing by Prof. Debabrata Goswami The Building Blocks of a Quantum Computer: Part 1 - TU Delft The Building Blocks of a Quantum Computer: Part 2 - TU Delft Quantum Cryptography - TU Delft","title":"Quantum Computing"},{"location":"awesome/cs-video-courses/#robotics","text":"CS 223A - Introduction to Robotics, Stanford University 6.832 Underactuated Robotics - MIT OCW CS287 Advanced Robotics at UC Berkeley Fall 2019 -- Instructor: Pieter Abbeel CS 287 - Advanced Robotics, Fall 2011, UC Berkeley ( Videos ) CS235 - Applied Robot Design for Non-Robot-Designers - Stanford University Lecture: Visual Navigation for Flying Robots ( YouTube ) CS 205A: Mathematical Methods for Robotics, Vision, and Graphics (Fall 2013) Robotics 1, Prof. De Luca, Universit\u00e0 di Roma ( YouTube ) Robotics 2, Prof. De Luca, Universit\u00e0 di Roma ( YouTube ) Robot Mechanics and Control, SNU Introduction to Robotics Course - UNCC SLAM Lectures Introduction to Vision and Robotics 2015/16- University of Edinburgh ME 597 \u2013 Autonomous Mobile Robotics \u2013 Fall 2014 ME 780 \u2013 Perception For Autonomous Driving \u2013 Spring 2017 ME780 \u2013 Nonlinear State Estimation for Robotics and Computer Vision \u2013 Spring 2017 METR 4202/7202 -- Robotics & Automation - University of Queensland Robotics - IIT Bombay Introduction to Machine Vision 6.834J Cognitive Robotics - MIT OCW Hello (Real) World with ROS \u2013 Robot Operating System - TU Delft Programming for Robotics (ROS) - ETH Zurich Mechatronic System Design - TU Delft CS 206 Evolutionary Robotics Course Spring 2020 Foundations of Robotics - UTEC 2018-I Robotics - Youtube Robotics and Control: Theory and Practice IIT Roorkee Mechatronics ME142 - Mechatronics Spring 2020 - UC Merced Mobile Sensing and Robotics - Bonn University MSR2 - Sensors and State Estimation Course (2020) - Bonn University SLAM Course (2013) - Bonn University ENGR486 Robot Modeling and Control (2014W) Robotics by Prof. D K Pratihar - IIT Kharagpur Introduction to Mobile Robotics - SS 2019 - Universit\u00e4t Freiburg Robot Mapping - WS 2018/19 - Universit\u00e4t Freiburg Mechanism and Robot Kinematics - IIT Kharagpur Self-Driving Cars - Cyrill Stachniss - Winter 2020/21 - University of Bonn) Mobile Sensing and Robotics 1 \u2013 Part Stachniss (Jointly taught with PhoRS) - University of Bonn Mobile Sensing and Robotics 2 \u2013 Stachniss & Klingbeil/Holst - University of Bonn Aerial Robotics - University of Pennsylvania (UPenn) Modern Robotics - Northwestern University","title":"Robotics"},{"location":"awesome/cs-video-courses/#computational-finance","text":"COMP510 - Computational Finance - Steven Skiena - 2007 HKUST MOOC - Mathematical Methods for Quantitative Finance, University of Washington/Coursera) 18.S096 Topics in Mathematics with Applications in Finance, MIT OCW Computational Finance - Universit\u00e4t Leipzig Machine Learning for Trading | Udacity ACT 460 / STA 2502 \u2013 Stochastic Methods for Actuarial Science - University of Toronto MMF1928H / STA 2503F \u2013 Pricing Theory I / Applied Probability for Mathematical Finance - University of Toronto STA 4505H \u2013 High Frequency & Algorithmic trading - University of Toronto Mathematical Finance - IIT Guwahati Quantitative Finance - IIT Kanpur Financial Derivatives & Risk Management - IIT Roorkee Financial Mathematics - IIT Roorkee","title":"Computational Finance"},{"location":"awesome/cs-video-courses/#blockchain-development","text":"Blockchain and Cryptocurrencies Blockchain Fundamentals Decal 2018 - Berkeley DeCal Blockchain for Developers Decal - Spring 2018 - Berkeley DeCal Cryptocurrency Engineering and Design - Spring 2018 - MIT 15.S12 Blockchain and Money, Fall 2018 - MIT Blockchain - Foundations and Use Cases Become Blockchain Developer Solidity for Beginners - Dapp University Master Solidity - Dapp University IPFS Inter Planetary File System Dapp University Solidity, Blockchain, and Smart Contract Course \u2013 Beginner to Expert Python Tutorial - FreeCodingCamp Web 3.0 - Build Realtime Decentralized applications","title":"Blockchain Development"},{"location":"awesome/cs-video-courses/#misc","text":"HCI CS147 - Introduction to Human-Computer Interaction Design - Stanford CSEP 510 - Human Computer Interaction Programming for Designers - COMP1400-T2 (2010) - UNSW 08-763 Intro to HCI for Technology Executives - Fall 2015 - CMU 05-600 HCI Pro Seminar - Fall 2015 - CMU Game Development CS50's Introduction to Game Development MIT CMS.611J Creating Video Games, Fall 2014 MOOC - Beginning Game Programming with C# - Coursera Geospatial Introduction to Spatial Data Science, Autumn 2016, University of Chicago Spatial Regression Analysis, Spring 2017, University of Chicago Spatial Data Science, Autumn 2017, University of Chicago Introduction to Geographic Information Systems - IIT Roorkee SCICOMP - An Introduction to Efficient Scientific Computation, Universit\u00e4t Bremen CS E-259 XML with Java, Java Servlet, and JSP - Harvard CSE 40373 - Spr 2009: Multimedia Systems Exposing Digital Photography - Harvard Extension School MOOC - Matlab - Coursera Computing for Computer Scientists - University of Michigan Linux Implementation/Administration Practicum - Redhat by Tulio Llosa SIMS 141 - Search Engines - Fall 2005 UCBerkeley Innovative Computing - Harvard University Linux Programming & Scripting - IIT Madras Model Checking - IIT Madras Virtual Reality - IIT Madras CS 195 - Social Implications of Computing, Spring 2015 - UC Berkeley ( YouTube ) Spatial Databases and Geographic Information Systems - Technische Universit\u00e4t Braunschweig, Germany (in German) Dependable Systems (SS 2014) - HPI University of Potsdam Business Process Compliance (WT 2013/14) - HPI University of Potsdam Design Thinking for Digital Engineering (SS 2018) - Dr. Julia von Thienen - HPI CS224w \u2013 Social Network Analysis \u2013 Autumn 2017 - Stanford University","title":"Misc"},{"location":"awesome/fun-with-computer-graphics/","text":"fun-with-computer-graphics fun-with-computer-graphics Hi, you have just found fun-with-computer-graphics! This is a collection of computer graphics related courses, books, tutorials, articles, blogs, resources, researcher homepages, lab homepages, video channels, open source projects, websites, etc. Here are some useful tips for you to find what you want: You can now find the autogenerate table of contents in the top left corner (provided by GitHub). Computer Graphics Open-source Renderers Shiny Renderers mmp / pbrt-v3 The renderer described in the third edition of \"Physically Based Rendering: From Theory To Implementation\", by Matt Pharr, Wenzel Jakob, and Greg Humphreys. mmp / pbrt-v4 This is an early release of pbrt-v4, the rendering system that will be described in the (eventually) forthcoming fourth edition of Physically Based Rendering: From Theory to Implementation . mitsuba-renderer / mitsuba Mitsuba is a research-oriented rendering system in the style of PBRT, from which it derives much inspiration. mitsuba-renderer / mitsuba2 Mitsuba 2 is a research-oriented rendering system written in portable C++17. tunabrain / tungsten High performance physically based renderer in C++11. appleseedhq / appleseed A modern open source rendering engine for animation and visual effects. JiayinCao / SORT Simple Open-source Ray Tracer. AirGuanZ / Atrc Offline rendering lab based on ray tracing. shiinamiyuki / AkariRender AkariRender is a highly modular CPU/GPU physically based renderer written in C++17. shiinamiyuki / minpt Small yet (almost) complete modern pathtracer. Mike-Leo-Smith / LuisaRender High-Performance Renderer on GPU. neverfelly / misaki-render A modular physically-based photorealistic global illumination renderer. FaithZL / Paladin jbikker / lighthouse2 Lighthouse 2 framework for real-time ray tracing. g1n0st / AyaRay A Modern C++ Windows-platform physically based renderer developing by Chang Yu. harskish / fluctus An interactive OpenCL wavefront path tracer. google / filament Filament is a real-time physically-based renderer written in C++. It is mobile-first, but also multi-platform. Courses Courses GAMES101: \u73b0\u4ee3\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u5165\u95e8 ( bilibili ) GAMES101 \u672c\u8bfe\u7a0b\u5c06\u5168\u9762\u800c\u7cfb\u7edf\u5730\u4ecb\u7ecd\u73b0\u4ee3\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u7684\u56db\u5927\u7ec4\u6210\u90e8\u5206\uff1a\uff081\uff09\u5149\u6805\u5316\u6210\u50cf\uff0c\uff082\uff09\u51e0\u4f55\u8868\u793a\uff0c\uff083\uff09\u5149\u7684\u4f20\u64ad\u7406\u8bba\uff0c\u4ee5\u53ca\uff084\uff09\u52a8\u753b\u4e0e\u6a21\u62df\u3002\u6bcf\u4e2a\u65b9\u9762\u90fd\u4f1a\u4ece\u57fa\u7840\u539f\u7406\u51fa\u53d1\u8bb2\u89e3\u5230\u5b9e\u9645\u5e94\u7528\uff0c\u5e76\u4ecb\u7ecd\u524d\u6cbf\u7684\u7406\u8bba\u7814\u7a76\u3002\u901a\u8fc7\u672c\u8bfe\u7a0b\uff0c\u4f60\u53ef\u4ee5\u5b66\u4e60\u5230\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u80cc\u540e\u7684\u6570\u5b66\u548c\u7269\u7406\u77e5\u8bc6\uff0c\u5e76\u953b\u70bc\u5b9e\u9645\u7684\u7f16\u7a0b\u80fd\u529b\u3002 Teaching by @Lingqi Yan . GAMES202: \u9ad8\u8d28\u91cf\u5b9e\u65f6\u6e32\u67d3 ( bilibili ) GAMES202 \u672c\u8bfe\u7a0b\u5c06\u5168\u9762\u5730\u4ecb\u7ecd\u73b0\u4ee3\u5b9e\u65f6\u6e32\u67d3\u4e2d\u7684\u5173\u952e\u95ee\u9898\u4e0e\u89e3\u51b3\u65b9\u6cd5\u3002\u7531\u4e8e\u5b9e\u65f6\u6e32\u67d3 (>30 FPS) \u5bf9\u901f\u5ea6\u8981\u6c42\u6781\u9ad8\uff0c\u56e0\u6b64\u672c\u8bfe\u7a0b\u7684\u5173\u6ce8\u70b9\u5c06\u662f\u5728\u82db\u523b\u7684\u65f6\u95f4\u9650\u5236\u4e0b\uff0c\u4eba\u4eec\u5982\u4f55\u6253\u7834\u901f\u5ea6\u4e0e\u8d28\u91cf\u4e4b\u95f4\u7684\u6743\u8861\uff0c\u540c\u65f6\u4fdd\u8bc1\u5b9e\u65f6\u7684\u9ad8\u901f\u5ea6\u4e0e\u7167\u7247\u7ea7\u7684\u771f\u5b9e\u611f\u3002 Teaching by @Lingqi Yan . TU Wien Rendering/Ray Tracing Course ( YouTube ) TU WIEN Rendering This course aims to give an overview of basic and state-of-the-art methods of rendering. Offline methods such as ray and path tracing, photon mapping and many other algorithms are introduced and various refinement are explained. Teaching by @K\u00e1roly Zsolnai-Feh\u00e9r . Introduction to Computer Graphics UCSB CS180 This course is an introduction to the foundations of three-dimensional computer graphics. Topics covered include 2D and 3D transformations, Rasterization based interactive 3D graphics, shading and reflectance models, texture mapping, geometric modeling using B\u00e9zier and B-Spline curves, ray tracing, and animation. There will be an emphasis on both the mathematical and geometric aspects of graphics, as well as the ability to write fully functional 3D graphics programs. Teaching by @Lingqi Yan . Real-Time High Quality Rendering UCSB CS291A In this course, we will review the history and some of the recent ideas that seek to bridge the gap between realism and interactivity. We will focus on the use of complex lighting and shading within limited computation time. Specifically, topics will cover programmable shaders, real-time shadows, interactive global illumination, image-based rendering, precomputed rendering, adaptive sampling and reconstruction, and real-time ray tracing. Teaching by @Lingqi Yan . Rendering Algorithms (Fall19) Dartmouth This class focuses on advanced 3D graphics techniques for realistic image synthesis. You will learn how light interacts with objects in the real world, and how to translate the underlying math and physics into practical algorithms for rendering photorealistic images. Teaching by @Wojciech Jarosz . Computer Graphics (Fall18) Dartmouth This course provides a broad introduction to the mathematical and programmatic foundations of computer graphics, including modeling, rendering (drawing), and animating three-dimensional scenes. Teaching by @Wojciech Jarosz . Introduction to Computer Graphics and Imaging Stanford CS148 This is the introductory prerequisite course in the computer graphics sequence which introduces students to the technical concepts behind creating synthetic computer generated images. Interactive Computer Graphics Stanford CS248 This course provides a comprehensive introduction to computer graphics, focusing on fundamental concepts and techniques, as well as their cross-cutting relationship to multiple problem domains in interactive graphics (such as rendering, animation, geometry, image processing). Image Synthesis Techniques Stanford CS348b This course provides a broad overview of the theory and practice of making photo-realistic imagery. Rendering is treated as a problem in modeling and simulating the physics of light and appearance. Computer Graphics CMU 15-462/662 This course provides a comprehensive introduction to computer graphics. Focuses on fundamental concepts and techniques, and their cross-cutting relationship to multiple problem domains in graphics (rendering, animation, geometry, imaging). Computer Graphics - AS 19 ETH This course covers some of the fundamental concepts of modern computer graphics. The main topics of the course are modeling and rendering. During the course, we will discuss how digital 3D scenes are represented and modeled, and how a realistic image can be generated from a digital representation of a 3D scene. Teaching by Computer Graphics Laboratory (CGL) . Physically-based Simulation - AS 19 ETH Physically-based simulations are fundamental to many applications of computer graphics, including 3D video games, animated movies and films, or virtual surgery. This course introduces the physical concepts as well as the numerical methods required for simulating deformable objects, fluids, rigid bodies, and other physical systems. The material covered in this lecture ranges from simple mass-spring systems to advanced topics such as finite elements. Teaching by Computer Graphics Laboratory (CGL) . COS 426 Computer Graphics (Spring19) Princeton COS 426 This course will study topics in computer graphics, covering methods in image processing, modeling, rendering, and animation. COS 526 Advanced Computer Graphics (Fall16) Princeton COS 526 This course will study advanced topics in computer graphics, covering methods in computational photography, geometric modeling, photorealistic rendering, and other topics in computer graphics. Physically Based Rendering and Material Appearance Modelling DTU 02941 This course takes its outset in the appearance of real world materials. The goal is to get as close as possible to replicating the appearance of real materials by computer graphical rendering based on mathematical/physical models. Interactive 3D Graphics by Autodesk Udacity CS291 This class will teach you about the basic principles of 3D computer graphics: meshes, transforms, cameras, materials, lighting, and animation. Teaching by @Eric Haines Computer Graphics and Imaging Berkeley cs184/284a This course provides a broad introduction to the fundamentals of computer graphics. The main areas covered are modeling, rendering, animation and imaging. Topics include 2D and 3D transformations, drawing to raster displays, sampling, texturing, antialiasing, geometric modeling, ray tracing and global illumination, animation, cameras, image processing and computational imaging. There will be an emphasis on mathematical and geometric aspects of graphics, and the ability to write complete 3D graphics programs. Introduction To Computer Graphics Brown CS123 This course offers an in-depth exploration of fundamental concepts in 2D and 3D computer graphics. It introduces 2D raster graphics techniques, including scan conversion, simple image processing, interaction techniques and user interface design. The bulk of the course is devoted to 3D modeling, geometric transformations, and 3D viewing and rendering. A sequence of assignments culminates in a simple geometric modeler and ray tracer. C++ and the graphics library OGL are used throughout the course, as is shader programming on the GPU, taught from the first lab onwards. The final project is typically a small group project spec'd and implemented by the group using shaders to create special effects. Introduction To Computer Graphics Cornell CS4620 The study of creating manipulating, and using visual images in the computer. SIGGRAPH Courses SIGGRAPH Courses Path tracing in production This is the web page for the SIGGRAPH courses on path tracing in production. Books Books Fundamentals of Computer Graphics, 4th Edition Drawing on an impressive roster of experts in the field, Fundamentals of Computer Graphics, Fifth Edition offers an ideal resource for computer course curricula as well as a user-friendly personal or professional reference. Computer Graphics: Principles and Practice, 3rd Edition ( book website ) In this book, we explain the principles, as well as the mathematics, underlying computer graphics--knowledge that is essential for successful work both now and in the future. Early chapters show how to create 2D and 3D pictures right away, supporting experimentation. Later chapters, covering a broad range of topics, demonstrate more sophisticated approaches. Sections on current computer graphics practice show how to apply given principles in common situations, such as how to approximate an ideal solution on available hardware, or how to represent a data structure more efficiently. Topics are reinforced by exercises, programming problems, and hands-on projects. Real-Time Rendering, 4th Edition ( book website ) This edition discusses current, practical rendering methods used in games and other applications. It also presents a solid theoretical framework and relevant mathematics for the field of interactive computer graphics, all in an approachable style. New to this edition: new chapter on VR and AR as well as expanded coverage of Visual Appearance, Advanced Shading, Global Illumination, and Curves and Curved Surfaces. Physically Based Rendering: From Theory To Implementation, Third Edition ( read for free ) Physically Based Rendering describes both the mathematical theory behind a modern photorealistic rendering system as well as its practical implementation. A method known as \u201cliterate programming\u201d combines human-readable documentation and source code into a single reference that is specifically designed to aid comprehension. The ideas and software in this book show the reader how to design and employ a full-featured rendering system capable of creating stunning imagery. Robust Monte Carlo Methods for Light Transport Simulation ( thesis website ) Eric Veach. PhD Thesis, Stanford University, 1997 Nearly 20 years later, this monster thesis is still relevant when it comes to developing rendering algorithms. Introduces Monte Carlo rendering methods, multiple importance sampling, bidirectional path tracing, Metropolis Light Transport Advanced Global Illumination ( authors' site , Google Books sample ) This book provides the reader with a fundamental understanding of global illumination algorithms. It discusses a broad class of algorithms for realistic image synthesis and introduces a theoretical basis for the algorithms presented. \u300aRay Tracing in One Weekend\u300b ( read for free ) Peter Shirley 's The Ray Tracing in One Weekend series of books \u300aRay Tracing Gems\u300b ( book website ) This book is a collection of articles focused on ray tracing techniques for serious practitioners. Like other \"gems\" books, it focuses on subjects commonly considered too advanced for introductory texts, yet rarely addressed by research papers. Tutorials Tutorials Nori 2 Nori is a minimalistic ray tracer written in C++. It runs on Windows, Linux, and Mac OS and provides a foundation for the homework assignments in the course Advanced Computer Graphics taught at EPFL. Learn OpenGL ( English , Chinese ) The aim of LearnOpenGL is to show you all there is to modern OpenGL in an easy-to-understand fashion with clear examples, while also providing a useful reference for later studies. Learn Vulkan Scratchapixel 2.0 32 lessons, 166 chapters, 450,000 words, C++ source code Joey de Vries OpenGL Tutorials OpenGL Pixar in a Box: Rendering by Pixar Vulkan Tutorial The Book of Shaders 3d-game-shaders-for-beginners The Graphics Codex by Morgan McGuire Daily Pathtracer by Aras Pranckevi\u010dius Tiny renderer or how OpenGL works software rendering in 500 lines of code Rasterization in One Weekend by Tayfun Kayhan Articles Articles \u4ec0\u4e48\u662f\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66 \u4ec0\u4e48\u662f\u6df1\u5ea6\u5b66\u4e60\uff1f \u6570\u5b66\u5728\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u4e2d\u7684\u5e94\u7528 by \u5218\u5229\u521a \u7cfb\u7edf\u7684\u5b66\u4e60\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\uff0c\u6709\u54ea\u4e9b\u4e0d\u540c\u9636\u6bb5\u7684\u4e66\u7c4d\u7684\u63a8\u8350\uff1f Q&A \u73b0\u9636\u6bb5\u5e94\u8be5\u600e\u4e48\u5b66\u4e60\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u5462\uff1f Q&A \u5149\u7ebf\u8ffd\u8e2a\u4e0e\u5b9e\u65f6\u6e32\u67d3\u7684\u672a\u6765 by \u6587\u5200\u79cb\u4e8c \u57fa\u4e8e\u6444\u5f71\u53c2\u6570\u6e32\u67d3 by \u6587\u5200\u79cb\u4e8c \u57fa\u4e8e\u7269\u7406\u7740\u8272 ( 1 , 2 , 3 , 4 ) by \u6587\u5200\u79cb\u4e8c How to Start Learning Computer Graphics Programming ( \u4e2d\u8bd1 ) by Eric Arneb\u00e4ck \u91d1\u5c5e\uff0c\u5851\u6599\uff0c\u50bb\u50bb\u5206\u4e0d\u6e05\u695a by \u53db\u9006\u8005 Blogs Blogs (Back to TOC) Self Shadow @self_shadow has been collecting Siggraph courses/papers links for many years: Especially interesting are the Physically Based Shading in Theory and Practice course presentations. INTERPLAY OF LIGHT \"This blog is my scratchpad for graphics techniques I try and experiment with.\" by @Kostas Anagnostou Alan Zucconi author of the book Unity 2018 Shaders and Effects Cookbook Linden Reid Procedural geometry & graphics tutorials A game developer at Blizzard Harold Serrano Creator of the Untold Engine Behind the Pixels Edward(Shiqiu) Liu, a Senior Real Time Rendering Engineer at NVIDIA iquilezles Inigo Quilez JOEY DE VRIES Joey, author of learnopengl.com Coding Labs TYLER HOBBS HUMUS Icare3D Blog Resources pages Resources pages Real-Time Rendering Resources Resources for Real-Time Rendering Ke-Sen Huang's Home Page A collection of CG papers (from SIGGRAPH, Asia, EG, PG, etc.) Rendering Resources This page offers 32 different 3D scenes that you can use for free in your rendering research, publications and classes. Graphics Programming weekly Update per week, by @Jendrik Illner McGuire Computer Graphics Archive A collection of models. Technically Art by @Harry Alisavakis Open-Source Real-Time Rendering Engines and Libs GDCVault GDC Vault is a trove of in-depth design, technical and inspirational talks and slides from the influencers of the game development industry, taken from over 20 years of the worldwide Game Developers Conferences. Graphics Research Tools by Nvidia mattdesl/graphics-resources A list of graphic programming resources Readings on The State of The Art in Rendering by Kostas Anagnostou Readings on Physically Based Rendering by Kostas Anagnostou Advances in Real-Time Rendering in 3D Graphics and Games the well-established series of SIGGRAPH courses covering late-breaking work and advances in real-time computer graphics terkelg/awesome-creative-coding Creative Coding: Generative Art, Data visualization, Interaction Design, Resources eug/awesome-opengl A curated list of awesome OpenGL libraries, debuggers and resources vinjn/awesome-vulkan A curated list of awesome Vulkan libraries, debuggers and resources. Inspired by awesome-opengl and other awesome-... stuff. ericjang/awesome-graphics This is a curated list of computer graphics tutorials and resources. MIT: Most Visited Courses Real-time Rendering Blogs Researchers Researchers Benedikt Bitterli A PhD at Dartmouth College. Kun Xu (\u5f90\u6606) Associate professor at Graphics and Geometric Computing Group, Tsinghua University. Lingqi Yan (\u95eb\u4ee4\u742a) Assistant Professor at UC Santa Barbara. Ligang Liu (\u5218\u5229\u521a) A Professor at Graphics & Geometric Computing Laboratory (GCL), school of mathematical sciences USTC. Matt Pharr A research scientist at NVIDIA Research. Morgan McGuire A Professor of Computer Science at Williams College. Pradeep Sen A Professor at UC Santa Barbara. Ravi Ramamoorthi Professor at UC San Diego. Thomas M\u00fcller A senior research scientist at NVIDIA Z\u00fcrich. Toshiya Hachisuka An Associate Professor at The University of Tokyo. Wenzel Jakob An assistant professor leading the Realistic Graphics Lab at EPFL's School of Computer and Communication Sciences. Wojciech Jarosz An Assistant Professor at Dartmouth College. Labs Labs Graphics & Geometric Computing Group at Tsinghua Univ. Realistic Graphics Lab at EPFL Computer Graphics Lab at ETH Z\u00fcrich UCSB MIRAGE Lab at UCSB Graphics Lab at Stanford Princeton ImageX Labs at Princeton Carnegie Mellon Graphics Lab at CMU MIT Computer Graphics Group at MIT Center for Visual Computing at UCSD Video Channels Video Channels ACMSIGGRAPH The Cherno C++, Game Engine, ... ChiliTomatoNoodle DirectX & C++ Game Programming, 3D Programming Fundamentals, ... MIT OpenCourseWare Open-source Projects Projects Intel\u00ae Embree Intel\u00ae Embree is a collection of high-performance ray tracing kernels, developed at Intel. The Mesa 3D Graphics Library The Mesa project began as an open-source implementation of the OpenGL specification - a system for rendering interactive 3D graphics. The Advanced Rendering Toolkit ART is a command-line system for physically based image synthesis. TAICHI TAICHI: Open-source computer graphics library Intel\u00ae Embree Intel\u00ae Embree is a collection of high-performance ray tracing kernels, developed at Intel MERL BRDF Database The MERL BRDF database contains reflectance functions of 100 different materials minpt A path tracer in 300 lines of C++ yocto-gl Tiny C++ Libraries for Data-Driven Physically-based Graphics id-Software id-Software\u516c\u53f8\u7684\u6240\u6709\u6e38\u620f\u7684\u5f00\u6e90\u4ee3\u7801 WebGL Fluid Simulation Scotty3D 3D graphics software for mesh editing, path tracing, and animation Websites Websites Shadertoy CSRankings: Computer Science Rankings Essential Mathematics Essential Mathematics Probability Theory for Physically Based Rendering Part 1 , Part 2 by Jacco Bikker.","title":"fun-with-computer-graphics"},{"location":"awesome/fun-with-computer-graphics/#fun-with-computer-graphics","text":"","title":"fun-with-computer-graphics"},{"location":"awesome/fun-with-computer-graphics/#computer-graphics","text":"","title":"Computer Graphics"},{"location":"awesome/fun-with-computer-graphics/#open-source-renderers","text":"Shiny Renderers mmp / pbrt-v3 The renderer described in the third edition of \"Physically Based Rendering: From Theory To Implementation\", by Matt Pharr, Wenzel Jakob, and Greg Humphreys. mmp / pbrt-v4 This is an early release of pbrt-v4, the rendering system that will be described in the (eventually) forthcoming fourth edition of Physically Based Rendering: From Theory to Implementation . mitsuba-renderer / mitsuba Mitsuba is a research-oriented rendering system in the style of PBRT, from which it derives much inspiration. mitsuba-renderer / mitsuba2 Mitsuba 2 is a research-oriented rendering system written in portable C++17. tunabrain / tungsten High performance physically based renderer in C++11. appleseedhq / appleseed A modern open source rendering engine for animation and visual effects. JiayinCao / SORT Simple Open-source Ray Tracer. AirGuanZ / Atrc Offline rendering lab based on ray tracing. shiinamiyuki / AkariRender AkariRender is a highly modular CPU/GPU physically based renderer written in C++17. shiinamiyuki / minpt Small yet (almost) complete modern pathtracer. Mike-Leo-Smith / LuisaRender High-Performance Renderer on GPU. neverfelly / misaki-render A modular physically-based photorealistic global illumination renderer. FaithZL / Paladin jbikker / lighthouse2 Lighthouse 2 framework for real-time ray tracing. g1n0st / AyaRay A Modern C++ Windows-platform physically based renderer developing by Chang Yu. harskish / fluctus An interactive OpenCL wavefront path tracer. google / filament Filament is a real-time physically-based renderer written in C++. It is mobile-first, but also multi-platform.","title":"Open-source Renderers"},{"location":"awesome/fun-with-computer-graphics/#courses","text":"Courses GAMES101: \u73b0\u4ee3\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u5165\u95e8 ( bilibili ) GAMES101 \u672c\u8bfe\u7a0b\u5c06\u5168\u9762\u800c\u7cfb\u7edf\u5730\u4ecb\u7ecd\u73b0\u4ee3\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u7684\u56db\u5927\u7ec4\u6210\u90e8\u5206\uff1a\uff081\uff09\u5149\u6805\u5316\u6210\u50cf\uff0c\uff082\uff09\u51e0\u4f55\u8868\u793a\uff0c\uff083\uff09\u5149\u7684\u4f20\u64ad\u7406\u8bba\uff0c\u4ee5\u53ca\uff084\uff09\u52a8\u753b\u4e0e\u6a21\u62df\u3002\u6bcf\u4e2a\u65b9\u9762\u90fd\u4f1a\u4ece\u57fa\u7840\u539f\u7406\u51fa\u53d1\u8bb2\u89e3\u5230\u5b9e\u9645\u5e94\u7528\uff0c\u5e76\u4ecb\u7ecd\u524d\u6cbf\u7684\u7406\u8bba\u7814\u7a76\u3002\u901a\u8fc7\u672c\u8bfe\u7a0b\uff0c\u4f60\u53ef\u4ee5\u5b66\u4e60\u5230\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u80cc\u540e\u7684\u6570\u5b66\u548c\u7269\u7406\u77e5\u8bc6\uff0c\u5e76\u953b\u70bc\u5b9e\u9645\u7684\u7f16\u7a0b\u80fd\u529b\u3002 Teaching by @Lingqi Yan . GAMES202: \u9ad8\u8d28\u91cf\u5b9e\u65f6\u6e32\u67d3 ( bilibili ) GAMES202 \u672c\u8bfe\u7a0b\u5c06\u5168\u9762\u5730\u4ecb\u7ecd\u73b0\u4ee3\u5b9e\u65f6\u6e32\u67d3\u4e2d\u7684\u5173\u952e\u95ee\u9898\u4e0e\u89e3\u51b3\u65b9\u6cd5\u3002\u7531\u4e8e\u5b9e\u65f6\u6e32\u67d3 (>30 FPS) \u5bf9\u901f\u5ea6\u8981\u6c42\u6781\u9ad8\uff0c\u56e0\u6b64\u672c\u8bfe\u7a0b\u7684\u5173\u6ce8\u70b9\u5c06\u662f\u5728\u82db\u523b\u7684\u65f6\u95f4\u9650\u5236\u4e0b\uff0c\u4eba\u4eec\u5982\u4f55\u6253\u7834\u901f\u5ea6\u4e0e\u8d28\u91cf\u4e4b\u95f4\u7684\u6743\u8861\uff0c\u540c\u65f6\u4fdd\u8bc1\u5b9e\u65f6\u7684\u9ad8\u901f\u5ea6\u4e0e\u7167\u7247\u7ea7\u7684\u771f\u5b9e\u611f\u3002 Teaching by @Lingqi Yan . TU Wien Rendering/Ray Tracing Course ( YouTube ) TU WIEN Rendering This course aims to give an overview of basic and state-of-the-art methods of rendering. Offline methods such as ray and path tracing, photon mapping and many other algorithms are introduced and various refinement are explained. Teaching by @K\u00e1roly Zsolnai-Feh\u00e9r . Introduction to Computer Graphics UCSB CS180 This course is an introduction to the foundations of three-dimensional computer graphics. Topics covered include 2D and 3D transformations, Rasterization based interactive 3D graphics, shading and reflectance models, texture mapping, geometric modeling using B\u00e9zier and B-Spline curves, ray tracing, and animation. There will be an emphasis on both the mathematical and geometric aspects of graphics, as well as the ability to write fully functional 3D graphics programs. Teaching by @Lingqi Yan . Real-Time High Quality Rendering UCSB CS291A In this course, we will review the history and some of the recent ideas that seek to bridge the gap between realism and interactivity. We will focus on the use of complex lighting and shading within limited computation time. Specifically, topics will cover programmable shaders, real-time shadows, interactive global illumination, image-based rendering, precomputed rendering, adaptive sampling and reconstruction, and real-time ray tracing. Teaching by @Lingqi Yan . Rendering Algorithms (Fall19) Dartmouth This class focuses on advanced 3D graphics techniques for realistic image synthesis. You will learn how light interacts with objects in the real world, and how to translate the underlying math and physics into practical algorithms for rendering photorealistic images. Teaching by @Wojciech Jarosz . Computer Graphics (Fall18) Dartmouth This course provides a broad introduction to the mathematical and programmatic foundations of computer graphics, including modeling, rendering (drawing), and animating three-dimensional scenes. Teaching by @Wojciech Jarosz . Introduction to Computer Graphics and Imaging Stanford CS148 This is the introductory prerequisite course in the computer graphics sequence which introduces students to the technical concepts behind creating synthetic computer generated images. Interactive Computer Graphics Stanford CS248 This course provides a comprehensive introduction to computer graphics, focusing on fundamental concepts and techniques, as well as their cross-cutting relationship to multiple problem domains in interactive graphics (such as rendering, animation, geometry, image processing). Image Synthesis Techniques Stanford CS348b This course provides a broad overview of the theory and practice of making photo-realistic imagery. Rendering is treated as a problem in modeling and simulating the physics of light and appearance. Computer Graphics CMU 15-462/662 This course provides a comprehensive introduction to computer graphics. Focuses on fundamental concepts and techniques, and their cross-cutting relationship to multiple problem domains in graphics (rendering, animation, geometry, imaging). Computer Graphics - AS 19 ETH This course covers some of the fundamental concepts of modern computer graphics. The main topics of the course are modeling and rendering. During the course, we will discuss how digital 3D scenes are represented and modeled, and how a realistic image can be generated from a digital representation of a 3D scene. Teaching by Computer Graphics Laboratory (CGL) . Physically-based Simulation - AS 19 ETH Physically-based simulations are fundamental to many applications of computer graphics, including 3D video games, animated movies and films, or virtual surgery. This course introduces the physical concepts as well as the numerical methods required for simulating deformable objects, fluids, rigid bodies, and other physical systems. The material covered in this lecture ranges from simple mass-spring systems to advanced topics such as finite elements. Teaching by Computer Graphics Laboratory (CGL) . COS 426 Computer Graphics (Spring19) Princeton COS 426 This course will study topics in computer graphics, covering methods in image processing, modeling, rendering, and animation. COS 526 Advanced Computer Graphics (Fall16) Princeton COS 526 This course will study advanced topics in computer graphics, covering methods in computational photography, geometric modeling, photorealistic rendering, and other topics in computer graphics. Physically Based Rendering and Material Appearance Modelling DTU 02941 This course takes its outset in the appearance of real world materials. The goal is to get as close as possible to replicating the appearance of real materials by computer graphical rendering based on mathematical/physical models. Interactive 3D Graphics by Autodesk Udacity CS291 This class will teach you about the basic principles of 3D computer graphics: meshes, transforms, cameras, materials, lighting, and animation. Teaching by @Eric Haines Computer Graphics and Imaging Berkeley cs184/284a This course provides a broad introduction to the fundamentals of computer graphics. The main areas covered are modeling, rendering, animation and imaging. Topics include 2D and 3D transformations, drawing to raster displays, sampling, texturing, antialiasing, geometric modeling, ray tracing and global illumination, animation, cameras, image processing and computational imaging. There will be an emphasis on mathematical and geometric aspects of graphics, and the ability to write complete 3D graphics programs. Introduction To Computer Graphics Brown CS123 This course offers an in-depth exploration of fundamental concepts in 2D and 3D computer graphics. It introduces 2D raster graphics techniques, including scan conversion, simple image processing, interaction techniques and user interface design. The bulk of the course is devoted to 3D modeling, geometric transformations, and 3D viewing and rendering. A sequence of assignments culminates in a simple geometric modeler and ray tracer. C++ and the graphics library OGL are used throughout the course, as is shader programming on the GPU, taught from the first lab onwards. The final project is typically a small group project spec'd and implemented by the group using shaders to create special effects. Introduction To Computer Graphics Cornell CS4620 The study of creating manipulating, and using visual images in the computer.","title":"Courses"},{"location":"awesome/fun-with-computer-graphics/#siggraph-courses","text":"SIGGRAPH Courses Path tracing in production This is the web page for the SIGGRAPH courses on path tracing in production.","title":"SIGGRAPH Courses"},{"location":"awesome/fun-with-computer-graphics/#books","text":"Books Fundamentals of Computer Graphics, 4th Edition Drawing on an impressive roster of experts in the field, Fundamentals of Computer Graphics, Fifth Edition offers an ideal resource for computer course curricula as well as a user-friendly personal or professional reference. Computer Graphics: Principles and Practice, 3rd Edition ( book website ) In this book, we explain the principles, as well as the mathematics, underlying computer graphics--knowledge that is essential for successful work both now and in the future. Early chapters show how to create 2D and 3D pictures right away, supporting experimentation. Later chapters, covering a broad range of topics, demonstrate more sophisticated approaches. Sections on current computer graphics practice show how to apply given principles in common situations, such as how to approximate an ideal solution on available hardware, or how to represent a data structure more efficiently. Topics are reinforced by exercises, programming problems, and hands-on projects. Real-Time Rendering, 4th Edition ( book website ) This edition discusses current, practical rendering methods used in games and other applications. It also presents a solid theoretical framework and relevant mathematics for the field of interactive computer graphics, all in an approachable style. New to this edition: new chapter on VR and AR as well as expanded coverage of Visual Appearance, Advanced Shading, Global Illumination, and Curves and Curved Surfaces. Physically Based Rendering: From Theory To Implementation, Third Edition ( read for free ) Physically Based Rendering describes both the mathematical theory behind a modern photorealistic rendering system as well as its practical implementation. A method known as \u201cliterate programming\u201d combines human-readable documentation and source code into a single reference that is specifically designed to aid comprehension. The ideas and software in this book show the reader how to design and employ a full-featured rendering system capable of creating stunning imagery. Robust Monte Carlo Methods for Light Transport Simulation ( thesis website ) Eric Veach. PhD Thesis, Stanford University, 1997 Nearly 20 years later, this monster thesis is still relevant when it comes to developing rendering algorithms. Introduces Monte Carlo rendering methods, multiple importance sampling, bidirectional path tracing, Metropolis Light Transport Advanced Global Illumination ( authors' site , Google Books sample ) This book provides the reader with a fundamental understanding of global illumination algorithms. It discusses a broad class of algorithms for realistic image synthesis and introduces a theoretical basis for the algorithms presented. \u300aRay Tracing in One Weekend\u300b ( read for free ) Peter Shirley 's The Ray Tracing in One Weekend series of books \u300aRay Tracing Gems\u300b ( book website ) This book is a collection of articles focused on ray tracing techniques for serious practitioners. Like other \"gems\" books, it focuses on subjects commonly considered too advanced for introductory texts, yet rarely addressed by research papers.","title":"Books"},{"location":"awesome/fun-with-computer-graphics/#tutorials","text":"Tutorials Nori 2 Nori is a minimalistic ray tracer written in C++. It runs on Windows, Linux, and Mac OS and provides a foundation for the homework assignments in the course Advanced Computer Graphics taught at EPFL. Learn OpenGL ( English , Chinese ) The aim of LearnOpenGL is to show you all there is to modern OpenGL in an easy-to-understand fashion with clear examples, while also providing a useful reference for later studies. Learn Vulkan Scratchapixel 2.0 32 lessons, 166 chapters, 450,000 words, C++ source code Joey de Vries OpenGL Tutorials OpenGL Pixar in a Box: Rendering by Pixar Vulkan Tutorial The Book of Shaders 3d-game-shaders-for-beginners The Graphics Codex by Morgan McGuire Daily Pathtracer by Aras Pranckevi\u010dius Tiny renderer or how OpenGL works software rendering in 500 lines of code Rasterization in One Weekend by Tayfun Kayhan","title":"Tutorials"},{"location":"awesome/fun-with-computer-graphics/#articles","text":"Articles \u4ec0\u4e48\u662f\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66 \u4ec0\u4e48\u662f\u6df1\u5ea6\u5b66\u4e60\uff1f \u6570\u5b66\u5728\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u4e2d\u7684\u5e94\u7528 by \u5218\u5229\u521a \u7cfb\u7edf\u7684\u5b66\u4e60\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\uff0c\u6709\u54ea\u4e9b\u4e0d\u540c\u9636\u6bb5\u7684\u4e66\u7c4d\u7684\u63a8\u8350\uff1f Q&A \u73b0\u9636\u6bb5\u5e94\u8be5\u600e\u4e48\u5b66\u4e60\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u5462\uff1f Q&A \u5149\u7ebf\u8ffd\u8e2a\u4e0e\u5b9e\u65f6\u6e32\u67d3\u7684\u672a\u6765 by \u6587\u5200\u79cb\u4e8c \u57fa\u4e8e\u6444\u5f71\u53c2\u6570\u6e32\u67d3 by \u6587\u5200\u79cb\u4e8c \u57fa\u4e8e\u7269\u7406\u7740\u8272 ( 1 , 2 , 3 , 4 ) by \u6587\u5200\u79cb\u4e8c How to Start Learning Computer Graphics Programming ( \u4e2d\u8bd1 ) by Eric Arneb\u00e4ck \u91d1\u5c5e\uff0c\u5851\u6599\uff0c\u50bb\u50bb\u5206\u4e0d\u6e05\u695a by \u53db\u9006\u8005","title":"Articles"},{"location":"awesome/fun-with-computer-graphics/#blogs","text":"Blogs (Back to TOC) Self Shadow @self_shadow has been collecting Siggraph courses/papers links for many years: Especially interesting are the Physically Based Shading in Theory and Practice course presentations. INTERPLAY OF LIGHT \"This blog is my scratchpad for graphics techniques I try and experiment with.\" by @Kostas Anagnostou Alan Zucconi author of the book Unity 2018 Shaders and Effects Cookbook Linden Reid Procedural geometry & graphics tutorials A game developer at Blizzard Harold Serrano Creator of the Untold Engine Behind the Pixels Edward(Shiqiu) Liu, a Senior Real Time Rendering Engineer at NVIDIA iquilezles Inigo Quilez JOEY DE VRIES Joey, author of learnopengl.com Coding Labs TYLER HOBBS HUMUS Icare3D Blog","title":"Blogs"},{"location":"awesome/fun-with-computer-graphics/#resources-pages","text":"Resources pages Real-Time Rendering Resources Resources for Real-Time Rendering Ke-Sen Huang's Home Page A collection of CG papers (from SIGGRAPH, Asia, EG, PG, etc.) Rendering Resources This page offers 32 different 3D scenes that you can use for free in your rendering research, publications and classes. Graphics Programming weekly Update per week, by @Jendrik Illner McGuire Computer Graphics Archive A collection of models. Technically Art by @Harry Alisavakis Open-Source Real-Time Rendering Engines and Libs GDCVault GDC Vault is a trove of in-depth design, technical and inspirational talks and slides from the influencers of the game development industry, taken from over 20 years of the worldwide Game Developers Conferences. Graphics Research Tools by Nvidia mattdesl/graphics-resources A list of graphic programming resources Readings on The State of The Art in Rendering by Kostas Anagnostou Readings on Physically Based Rendering by Kostas Anagnostou Advances in Real-Time Rendering in 3D Graphics and Games the well-established series of SIGGRAPH courses covering late-breaking work and advances in real-time computer graphics terkelg/awesome-creative-coding Creative Coding: Generative Art, Data visualization, Interaction Design, Resources eug/awesome-opengl A curated list of awesome OpenGL libraries, debuggers and resources vinjn/awesome-vulkan A curated list of awesome Vulkan libraries, debuggers and resources. Inspired by awesome-opengl and other awesome-... stuff. ericjang/awesome-graphics This is a curated list of computer graphics tutorials and resources. MIT: Most Visited Courses Real-time Rendering Blogs","title":"Resources pages"},{"location":"awesome/fun-with-computer-graphics/#researchers","text":"Researchers Benedikt Bitterli A PhD at Dartmouth College. Kun Xu (\u5f90\u6606) Associate professor at Graphics and Geometric Computing Group, Tsinghua University. Lingqi Yan (\u95eb\u4ee4\u742a) Assistant Professor at UC Santa Barbara. Ligang Liu (\u5218\u5229\u521a) A Professor at Graphics & Geometric Computing Laboratory (GCL), school of mathematical sciences USTC. Matt Pharr A research scientist at NVIDIA Research. Morgan McGuire A Professor of Computer Science at Williams College. Pradeep Sen A Professor at UC Santa Barbara. Ravi Ramamoorthi Professor at UC San Diego. Thomas M\u00fcller A senior research scientist at NVIDIA Z\u00fcrich. Toshiya Hachisuka An Associate Professor at The University of Tokyo. Wenzel Jakob An assistant professor leading the Realistic Graphics Lab at EPFL's School of Computer and Communication Sciences. Wojciech Jarosz An Assistant Professor at Dartmouth College.","title":"Researchers"},{"location":"awesome/fun-with-computer-graphics/#labs","text":"Labs Graphics & Geometric Computing Group at Tsinghua Univ. Realistic Graphics Lab at EPFL Computer Graphics Lab at ETH Z\u00fcrich UCSB MIRAGE Lab at UCSB Graphics Lab at Stanford Princeton ImageX Labs at Princeton Carnegie Mellon Graphics Lab at CMU MIT Computer Graphics Group at MIT Center for Visual Computing at UCSD","title":"Labs"},{"location":"awesome/fun-with-computer-graphics/#video-channels","text":"Video Channels ACMSIGGRAPH The Cherno C++, Game Engine, ... ChiliTomatoNoodle DirectX & C++ Game Programming, 3D Programming Fundamentals, ... MIT OpenCourseWare","title":"Video Channels"},{"location":"awesome/fun-with-computer-graphics/#open-source-projects","text":"Projects Intel\u00ae Embree Intel\u00ae Embree is a collection of high-performance ray tracing kernels, developed at Intel. The Mesa 3D Graphics Library The Mesa project began as an open-source implementation of the OpenGL specification - a system for rendering interactive 3D graphics. The Advanced Rendering Toolkit ART is a command-line system for physically based image synthesis. TAICHI TAICHI: Open-source computer graphics library Intel\u00ae Embree Intel\u00ae Embree is a collection of high-performance ray tracing kernels, developed at Intel MERL BRDF Database The MERL BRDF database contains reflectance functions of 100 different materials minpt A path tracer in 300 lines of C++ yocto-gl Tiny C++ Libraries for Data-Driven Physically-based Graphics id-Software id-Software\u516c\u53f8\u7684\u6240\u6709\u6e38\u620f\u7684\u5f00\u6e90\u4ee3\u7801 WebGL Fluid Simulation Scotty3D 3D graphics software for mesh editing, path tracing, and animation","title":"Open-source Projects"},{"location":"awesome/fun-with-computer-graphics/#websites","text":"Websites Shadertoy CSRankings: Computer Science Rankings","title":"Websites"},{"location":"awesome/fun-with-computer-graphics/#essential-mathematics","text":"Essential Mathematics Probability Theory for Physically Based Rendering Part 1 , Part 2 by Jacco Bikker.","title":"Essential Mathematics"}]}